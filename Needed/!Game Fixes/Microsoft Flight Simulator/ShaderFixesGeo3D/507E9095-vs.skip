//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBufferGlobalConstant_Z
// {
//
//   struct StructGlobalConstant_Z
//   {
//       
//       float4 c[174];                 // Offset:    0
//
//   } Global;                          // Offset:    0 Size:  2784
//
// }
//
// cbuffer CBufferUserConstant_Z
// {
//
//   struct StructUserConstant_Z
//   {
//       
//       float4 c[183];                 // Offset:    0
//
//   } User;                            // Offset:    0 Size:  2928
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBufferUserConstant_Z             cbuffer      NA          NA            cb0      1 
// CBufferGlobalConstant_Z           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_InstanceID            0   x           2   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// INSTANCE_INDEXES         0   xy          2     NONE    uint   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[172], dynamicIndexed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input_sgv v2.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 1
add r0.xy, v0.xyxx, -cb1[54].zwzz
div r0.xy, r0.xyxx, cb1[54].xyxx
mad r0.xy, r0.xyxx, cb0[0].xyxx, cb0[0].zwzz
ishl r0.z, cb1[43].w, l(5)
iadd r0.z, r0.z, l(104)
or r0.zw, r0.zzzz, l(0, 0, 10, 11)
mad r0.w, v0.z, cb1[r0.w + 0].z, cb1[r0.w + 0].w
mad o0.z, v0.z, cb1[r0.z + 0].z, cb1[r0.z + 0].w
mul o0.xy, r0.wwww, r0.xyxx
mov o0.w, r0.w
add r0.xy, v1.xyxx, -cb0[1].zwzz
mul o1.zw, r0.xxxy, cb0[1].xxxy
mov o1.xy, v1.xyxx
mov o2.x, cb1[43].w
mov o2.y, v2.x
ret 
// Approximately 16 instruction slots used