;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; COLOR                    0   xyzw        1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; TEXCOORD                 1   xy          3     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyz         1     NONE   float   xyz 
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyz         6     NONE   float   xyz 
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xyzw        8     NONE   float   xyzw
; COLOR                    0   xyz         9     NONE   float   xyz 
; SV_ClipDistance          0   x          10  CLIPDST   float   x   
;
; shader hash: 738faccc5ed35857336e202ead5e0392
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; COLOR                    0                              
; TEXCOORD                 0                              
; TEXCOORD                 1                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4               centroid       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; COLOR                    0                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [544 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;
;
; ViewId state:
;
; Number of inputs: 14, outputs: 41
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2 }
;   output 1 depends on inputs: { 0, 1, 2 }
;   output 2 depends on inputs: { 0, 1, 2 }
;   output 3 depends on inputs: { 0, 1, 2 }
;   output 4 depends on inputs: { 0, 1, 2 }
;   output 5 depends on inputs: { 0, 1, 2 }
;   output 6 depends on inputs: { 0, 1, 2 }
;   output 8 depends on inputs: { 8, 9 }
;   output 9 depends on inputs: { 8, 9 }
;   output 10 depends on inputs: { 8, 9 }
;   output 11 depends on inputs: { 8, 9 }
;   output 12 depends on inputs: { 8, 9 }
;   output 13 depends on inputs: { 8, 9 }
;   output 14 depends on inputs: { 8, 9 }
;   output 15 depends on inputs: { 8, 9 }
;   output 16 depends on inputs: { 0, 8, 9 }
;   output 17 depends on inputs: { 1, 8, 9 }
;   output 18 depends on inputs: { 0, 8, 9 }
;   output 19 depends on inputs: { 1, 8, 9 }
;   output 20 depends on inputs: { 12, 13 }
;   output 21 depends on inputs: { 12, 13 }
;   output 22 depends on inputs: { 12 }
;   output 23 depends on inputs: { 13 }
;   output 24 depends on inputs: { 0, 1, 2 }
;   output 25 depends on inputs: { 0, 1, 2 }
;   output 26 depends on inputs: { 0, 1, 2 }
;   output 28 depends on inputs: { 0, 1, 2 }
;   output 29 depends on inputs: { 0, 1, 2 }
;   output 30 depends on inputs: { 0, 1, 2 }
;   output 31 depends on inputs: { 0, 1, 2 }
;   output 32 depends on inputs: { 0, 1, 2 }
;   output 33 depends on inputs: { 0, 1, 2 }
;   output 34 depends on inputs: { 0, 1, 2 }
;   output 35 depends on inputs: { 0, 1, 2 }
;   output 36 depends on inputs: { 4 }
;   output 37 depends on inputs: { 5 }
;   output 38 depends on inputs: { 6 }
;   output 40 depends on inputs: { 0, 1, 2 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.cb_1 = type { %hostlayout.struct.VSConstantsWater }
%hostlayout.struct.VSConstantsWater = type { %hostlayout.struct.VSConstantsTransform, [4 x [4 x <4 x float>]], <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float> }
%hostlayout.struct.VSConstantsTransform = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float> }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %13 = extractvalue %dx.types.CBufRet.f32 %12, 0
  %14 = extractvalue %dx.types.CBufRet.f32 %12, 1
  %15 = extractvalue %dx.types.CBufRet.f32 %12, 2
  %16 = extractvalue %dx.types.CBufRet.f32 %12, 3
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = extractvalue %dx.types.CBufRet.f32 %17, 3
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %26 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = fmul fast float %13, %9
  %33 = call float @dx.op.tertiary.f32(i32 46, float %10, float %18, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %11, float %23, float %33)  ; FMad(a,b,c)
  %35 = fadd fast float %34, %28
  %36 = fmul fast float %14, %9
  %37 = call float @dx.op.tertiary.f32(i32 46, float %10, float %19, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %11, float %24, float %37)  ; FMad(a,b,c)
  %39 = fadd fast float %38, %29
  %40 = fmul fast float %15, %9
  %41 = call float @dx.op.tertiary.f32(i32 46, float %10, float %20, float %40)  ; FMad(a,b,c)
  %42 = call float @dx.op.tertiary.f32(i32 46, float %11, float %25, float %41)  ; FMad(a,b,c)
  %43 = fadd fast float %42, %30
  %44 = fmul fast float %16, %9
  %45 = call float @dx.op.tertiary.f32(i32 46, float %10, float %21, float %44)  ; FMad(a,b,c)
  %46 = call float @dx.op.tertiary.f32(i32 46, float %11, float %26, float %45)  ; FMad(a,b,c)
  %47 = fadd fast float %46, %31
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = extractvalue %dx.types.CBufRet.f32 %48, 3
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = extractvalue %dx.types.CBufRet.f32 %53, 3
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = extractvalue %dx.types.CBufRet.f32 %58, 3
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = extractvalue %dx.types.CBufRet.f32 %63, 3
  %68 = fmul fast float %49, %35
  %69 = call float @dx.op.tertiary.f32(i32 46, float %39, float %54, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %43, float %59, float %69)  ; FMad(a,b,c)
  %71 = call float @dx.op.tertiary.f32(i32 46, float %47, float %64, float %70)  ; FMad(a,b,c)
  %72 = fmul fast float %50, %35
  %73 = call float @dx.op.tertiary.f32(i32 46, float %39, float %55, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %43, float %60, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %47, float %65, float %74)  ; FMad(a,b,c)
  %76 = fmul fast float %51, %35
  %77 = call float @dx.op.tertiary.f32(i32 46, float %39, float %56, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %43, float %61, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.tertiary.f32(i32 46, float %47, float %66, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %52, %35
  %81 = call float @dx.op.tertiary.f32(i32 46, float %39, float %57, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %43, float %62, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %47, float %67, float %82)  ; FMad(a,b,c)
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %99 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %100 = fmul fast float %85, %9
  %101 = call float @dx.op.tertiary.f32(i32 46, float %10, float %89, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %11, float %93, float %101)  ; FMad(a,b,c)
  %103 = fadd fast float %102, %97
  %104 = fmul fast float %86, %9
  %105 = call float @dx.op.tertiary.f32(i32 46, float %10, float %90, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %11, float %94, float %105)  ; FMad(a,b,c)
  %107 = fadd fast float %106, %98
  %108 = fmul fast float %87, %9
  %109 = call float @dx.op.tertiary.f32(i32 46, float %10, float %91, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %11, float %95, float %109)  ; FMad(a,b,c)
  %111 = fadd fast float %110, %99
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %35, float %39, float %43)  ; Dot3(ax,ay,az,bx,by,bz)
  %117 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %118 = fadd fast float %117, %116
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %121 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 0
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 1
  %128 = fmul fast float %4, 3.125000e-02
  %129 = fmul fast float %5, 3.125000e-02
  %130 = fmul fast float %120, %128
  %131 = call float @dx.op.tertiary.f32(i32 46, float %129, float %123, float %130)  ; FMad(a,b,c)
  %132 = fadd fast float %126, %131
  %133 = fmul fast float %121, %128
  %134 = call float @dx.op.tertiary.f32(i32 46, float %129, float %124, float %133)  ; FMad(a,b,c)
  %135 = fadd fast float %134, %127
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %141 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %144 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %145 = fadd fast float %4, 5.000000e-01
  %146 = fadd fast float %5, 5.000000e-01
  %147 = fmul fast float %145, -3.125000e-02
  %148 = fmul fast float %146, -3.125000e-02
  %149 = fmul fast float %137, %147
  %150 = call float @dx.op.tertiary.f32(i32 46, float %148, float %140, float %149)  ; FMad(a,b,c)
  %151 = fadd fast float %143, %150
  %152 = fmul fast float %138, %147
  %153 = call float @dx.op.tertiary.f32(i32 46, float %148, float %141, float %152)  ; FMad(a,b,c)
  %154 = fadd fast float %153, %144
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = fmul fast float %156, 4.000000e+00
  %158 = fmul fast float %156, 2.000000e+00
  %159 = fadd fast float %157, %9
  %160 = fadd fast float %158, %10
  %161 = fmul fast float %132, 2.280000e+02
  %162 = fmul fast float %135, 2.280000e+02
  %163 = call float @dx.op.unary.f32(i32 13, float %159)  ; Sin(value)
  %164 = fmul fast float %163, 0x3FB99999A0000000
  %165 = call float @dx.op.unary.f32(i32 12, float %160)  ; Cos(value)
  %166 = fmul fast float %165, 0x3FB99999A0000000
  %167 = fmul fast float %163, 0x3FA99999A0000000
  %168 = fmul fast float %165, 0x3FA99999A0000000
  %169 = fadd fast float %164, %161
  %170 = fadd fast float %166, %162
  %171 = fadd fast float %161, 5.000000e-01
  %172 = fadd fast float %171, %167
  %173 = fadd fast float %162, 5.000000e-01
  %174 = fadd fast float %173, %168
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 0
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 1
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 0
  %180 = extractvalue %dx.types.CBufRet.f32 %178, 1
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %184 = fmul fast float %176, %2
  %185 = call float @dx.op.tertiary.f32(i32 46, float %3, float %179, float %184)  ; FMad(a,b,c)
  %186 = fadd fast float %182, %185
  %187 = fmul fast float %177, %2
  %188 = call float @dx.op.tertiary.f32(i32 46, float %3, float %180, float %187)  ; FMad(a,b,c)
  %189 = fadd fast float %188, %183
  %190 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %191 = fadd fast float %190, %132
  %192 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %193 = fsub fast float %151, %192
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %196 = extractvalue %dx.types.CBufRet.f32 %194, 1
  %197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.f32 %197, 0
  %199 = extractvalue %dx.types.CBufRet.f32 %197, 1
  %200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %201 = extractvalue %dx.types.CBufRet.f32 %200, 0
  %202 = extractvalue %dx.types.CBufRet.f32 %200, 1
  %203 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %204 = fmul fast float %203, 3.200000e+01
  %205 = fmul fast float %204, %191
  %206 = fmul fast float %204, %135
  %207 = fmul fast float %205, %195
  %208 = call float @dx.op.tertiary.f32(i32 46, float %206, float %198, float %207)  ; FMad(a,b,c)
  %209 = fadd fast float %208, %201
  %210 = fmul fast float %205, %196
  %211 = call float @dx.op.tertiary.f32(i32 46, float %206, float %199, float %210)  ; FMad(a,b,c)
  %212 = fadd fast float %211, %202
  %213 = fmul fast float %204, %193
  %214 = fmul fast float %204, %154
  %215 = fmul fast float %213, %195
  %216 = call float @dx.op.tertiary.f32(i32 46, float %214, float %198, float %215)  ; FMad(a,b,c)
  %217 = fadd fast float %216, %201
  %218 = fmul fast float %213, %196
  %219 = call float @dx.op.tertiary.f32(i32 46, float %214, float %199, float %218)  ; FMad(a,b,c)
  %220 = fadd fast float %219, %202
  %221 = fmul fast float %195, %191
  %222 = call float @dx.op.tertiary.f32(i32 46, float %135, float %198, float %221)  ; FMad(a,b,c)
  %223 = fadd fast float %201, %222
  %224 = fmul fast float %196, %191
  %225 = call float @dx.op.tertiary.f32(i32 46, float %135, float %199, float %224)  ; FMad(a,b,c)
  %226 = fadd fast float %225, %202
  %227 = fmul fast float %195, %193
  %228 = call float @dx.op.tertiary.f32(i32 46, float %154, float %198, float %227)  ; FMad(a,b,c)
  %229 = fadd fast float %201, %228
  %230 = fmul fast float %196, %193
  %231 = call float @dx.op.tertiary.f32(i32 46, float %154, float %199, float %230)  ; FMad(a,b,c)
  %232 = fadd fast float %231, %202
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = fsub fast float %103, %234
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %237 = fsub fast float %107, %236
  %238 = extractvalue %dx.types.CBufRet.f32 %233, 2
  %239 = extractvalue %dx.types.CBufRet.f32 %233, 3
  %240 = fmul fast float %238, %235
  %241 = fmul fast float %239, %237
  %242 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %243 = extractvalue %dx.types.CBufRet.f32 %242, 0
  %244 = fsub fast float %103, %243
  %245 = extractvalue %dx.types.CBufRet.f32 %242, 1
  %246 = fsub fast float %107, %245
  %247 = extractvalue %dx.types.CBufRet.f32 %242, 2
  %248 = extractvalue %dx.types.CBufRet.f32 %242, 3
  %249 = fmul fast float %247, %244
  %250 = fmul fast float %248, %246
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %71)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %75)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %79)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %83)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %35)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %39)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %43)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %226)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %223)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %232)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %229)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %212)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %209)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %220)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %217)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %169)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %170)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %172)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %174)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %186)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %189)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %103)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %107)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %111)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %71)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %75)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %79)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float %83)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %240)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float %241)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 2, float %249)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 3, float %250)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 2, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 10, i32 0, i8 0, float %118)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 5}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 5}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %hostlayout.cb_1* undef, !"", i32 0, i32 1, i32 1, i32 544, null}
!7 = !{[30 x i32] [i32 14, i32 41, i32 -150667137, i32 271, i32 -150339457, i32 271, i32 -150994817, i32 271, i32 0, i32 0, i32 0, i32 16, i32 0, i32 32, i32 0, i32 64, i32 0, i32 0, i32 1048320, i32 0, i32 1048320, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7340032, i32 0, i32 11534336, i32 0]}
!8 = !{void ()* @main, !"main", !9, !4, null}
!9 = !{!10, !19, null}
!10 = !{!11, !14, !15, !17}
!11 = !{i32 0, !"POSITION", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 7}
!14 = !{i32 1, !"COLOR", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 1, i8 0, !13}
!15 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !16}
!16 = !{i32 3, i32 3}
!17 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !18, i8 0, i32 1, i8 2, i32 3, i8 0, !16}
!18 = !{i32 1}
!19 = !{!20, !22, !23, !24, !26, !28, !30, !32, !34, !36, !37}
!20 = !{i32 0, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 0, i8 0, !21}
!21 = !{i32 3, i32 15}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 3, i32 1, i8 0, !13}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 2, i8 0, !21}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 3, i8 0, !21}
!25 = !{i32 2}
!26 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 4, i8 0, !21}
!27 = !{i32 3}
!28 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !29, i8 3, i32 1, i8 4, i32 5, i8 0, !21}
!29 = !{i32 4}
!30 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !31, i8 2, i32 1, i8 3, i32 6, i8 0, !13}
!31 = !{i32 5}
!32 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !33, i8 2, i32 1, i8 4, i32 7, i8 0, !21}
!33 = !{i32 6}
!34 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !35, i8 2, i32 1, i8 4, i32 8, i8 0, !21}
!35 = !{i32 7}
!36 = !{i32 9, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 3, i32 9, i8 0, !13}
!37 = !{i32 10, !"SV_ClipDistance", i8 9, i8 6, !12, i8 2, i32 1, i8 1, i32 10, i8 0, !38}
!38 = !{i32 3, i32 1}
 