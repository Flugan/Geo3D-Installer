;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xy w
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: 011eb4655a2162de646d6bb4f1fd79e9
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       float4 View_PolarisCharacterLightMainColorScale;; Offset: 4560
;       float4 View_PolarisCharacterLightEnvColorScale;; Offset: 4576
;       uint View_PolarisContactShadowMask;           ; Offset: 4592
;       float View_PolarisTAAVelocityWeight;          ; Offset: 4596
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint View_bShadingEnergyConservation;         ; Offset: 5144
;       uint View_bShadingEnergyPreservation;         ; Offset: 5148
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_WaterData;         ; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5248
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5264
;       float PrePadding_View_5268;                   ; Offset: 5268
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint PrePadding_View_5288;                    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5296
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5376
;       uint PrePadding_View_5380;                    ; Offset: 5380
;       uint PrePadding_View_5384;                    ; Offset: 5384
;       uint PrePadding_View_5388;                    ; Offset: 5388
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5392
;       float PrePadding_View_5404;                   ; Offset: 5404
;       float3 View_TLASViewTilePosition;             ; Offset: 5408
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5420
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB1            cb1     1
; View_PreIntegratedBRDFSampler     sampler      NA          NA      S0             s0     1
; View_HairScatteringLUTSampler     sampler      NA          NA      S1             s1     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S2             s2     1
; LightAttenuationTextureSampler    sampler      NA          NA      S3             s3     1
; View_PreIntegratedBRDF            texture     f32          2d      T0             t0     1
; View_HairScatteringLUTTexture     texture     f32          3d      T1             t1     1
; View_SSProfilesTexture            texture     f32          2d      T2             t2     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T3             t3     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T4             t4     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T5             t5     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T6             t6     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T7             t7     1
; SceneTexturesStruct_GBufferETexture   texture     f32          2d      T8             t8     1
; SceneTexturesStruct_GBufferFTexture   texture     f32          2d      T9             t9     1
; SceneTexturesStruct_ScreenSpaceAOTexture   texture     f32          2d     T10            t10     1
; LightAttenuationTexture           texture     f32          2d     T11            t11     1
; LightingChannelsTexture           texture     u32          2d     T12            t12     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 1 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 2 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 3 depends on inputs: { 0, 1, 3, 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, <4 x float>, <4 x float>, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%struct.SamplerState = type { i32 }

define void @DeferredLightPixelMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 5420 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = fdiv fast float %24, %26
  %28 = fdiv fast float %25, %26
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = fmul fast float %30, %27
  %33 = fmul fast float %31, %28
  %34 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %35 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %36 = fadd fast float %32, %35
  %37 = fadd fast float %33, %34
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %40 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %41 = extractvalue %dx.types.ResRet.f32 %40, 0
  %42 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.f32 %42, 0
  %44 = fmul fast float %43, %41
  %45 = extractvalue %dx.types.CBufRet.f32 %42, 1
  %46 = fadd fast float %44, %45
  %47 = extractvalue %dx.types.CBufRet.f32 %42, 2
  %48 = fmul fast float %47, %41
  %49 = extractvalue %dx.types.CBufRet.f32 %42, 3
  %50 = fsub fast float %48, %49
  %51 = fdiv fast float 1.000000e+00, %50
  %52 = fadd fast float %46, %51
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %54 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %53, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %55 = extractvalue %dx.types.ResRet.f32 %54, 0
  %56 = extractvalue %dx.types.ResRet.f32 %54, 1
  %57 = extractvalue %dx.types.ResRet.f32 %54, 2
  %58 = extractvalue %dx.types.ResRet.f32 %54, 3
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %60 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %59, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %61 = extractvalue %dx.types.ResRet.f32 %60, 0
  %62 = extractvalue %dx.types.ResRet.f32 %60, 1
  %63 = extractvalue %dx.types.ResRet.f32 %60, 2
  %64 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %65 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %64, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %66 = extractvalue %dx.types.ResRet.f32 %65, 0
  %67 = extractvalue %dx.types.ResRet.f32 %65, 1
  %68 = extractvalue %dx.types.ResRet.f32 %65, 2
  %69 = extractvalue %dx.types.ResRet.f32 %65, 3
  %70 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %71 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %70, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %72 = extractvalue %dx.types.ResRet.f32 %71, 0
  %73 = extractvalue %dx.types.ResRet.f32 %71, 1
  %74 = extractvalue %dx.types.ResRet.f32 %71, 2
  %75 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %76 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %75, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %77 = extractvalue %dx.types.ResRet.f32 %76, 0
  %78 = extractvalue %dx.types.ResRet.f32 %76, 1
  %79 = extractvalue %dx.types.ResRet.f32 %76, 2
  %80 = extractvalue %dx.types.ResRet.f32 %76, 3
  %81 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %82 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %81, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %83 = extractvalue %dx.types.ResRet.f32 %82, 0
  %84 = extractvalue %dx.types.ResRet.f32 %82, 1
  %85 = extractvalue %dx.types.ResRet.f32 %82, 2
  %86 = extractvalue %dx.types.ResRet.f32 %82, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = fmul fast float %88, %36
  %91 = fmul fast float %89, %37
  %92 = fptoui float %90 to i32
  %93 = fptoui float %91 to i32
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 153)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = fptoui float %95 to i32
  %97 = add i32 %92, %93
  %98 = add i32 %97, %96
  %99 = and i32 %98, 1
  %100 = icmp ne i32 %99, 0
  %101 = fmul fast float %69, 2.550000e+02
  %102 = fadd fast float %101, 5.000000e-01
  %103 = fptoui float %102 to i32
  %104 = and i32 %103, 15
  %105 = lshr i32 %103, 4
  %106 = fmul fast float %61, 2.000000e+00
  %107 = fmul fast float %62, 2.000000e+00
  %108 = fmul fast float %63, 2.000000e+00
  %109 = fadd fast float %106, -1.000000e+00
  %110 = fadd fast float %107, -1.000000e+00
  %111 = fadd fast float %108, -1.000000e+00
  %112 = and i32 %103, 14
  %113 = icmp eq i32 %112, 2
  %114 = and i32 %103, 12
  %115 = icmp eq i32 %114, 4
  %116 = or i1 %115, %113
  %117 = icmp eq i32 %112, 8
  %118 = or i1 %117, %116
  %119 = icmp eq i32 %104, 13
  %120 = or i1 %119, %118
  %121 = select i1 %120, float %77, float 0.000000e+00
  %122 = select i1 %120, float %78, float 0.000000e+00
  %123 = select i1 %120, float %79, float 0.000000e+00
  %124 = select i1 %120, float %80, float 0.000000e+00
  %125 = and i32 %105, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %131, label %127

; <label>:127                                     ; preds = %0
  %128 = and i32 %105, 4
  %129 = icmp ne i32 %128, 0
  %130 = select i1 %129, float 0.000000e+00, float 1.000000e+00
  br label %131

; <label>:131                                     ; preds = %127, %0
  %132 = phi float [ %130, %127 ], [ %83, %0 ]
  %133 = phi float [ %130, %127 ], [ %84, %0 ]
  %134 = phi float [ %130, %127 ], [ %85, %0 ]
  %135 = phi float [ %130, %127 ], [ %86, %0 ]
  %136 = and i32 %105, 1
  %137 = icmp eq i32 %136, 0
  %138 = call float @dx.op.dot3.f32(i32 55, float %109, float %110, float %111, float %109, float %110, float %111)  ; Dot3(ax,ay,az,bx,by,bz)
  %139 = call float @dx.op.unary.f32(i32 25, float %138)  ; Rsqrt(value)
  %140 = fmul fast float %139, %109
  %141 = fmul fast float %139, %110
  %142 = fmul fast float %139, %111
  %143 = icmp eq i32 %104, 9
  %144 = select i1 %143, float 0.000000e+00, float %66
  %145 = fmul fast float %67, 0x3FB47AE140000000
  %146 = fsub fast float %72, %145
  %147 = fsub fast float %73, %145
  %148 = fsub fast float %74, %145
  %149 = fmul fast float %144, %146
  %150 = fmul fast float %144, %147
  %151 = fmul fast float %144, %148
  %152 = fadd fast float %149, %145
  %153 = fadd fast float %150, %145
  %154 = fadd fast float %151, %145
  %155 = icmp eq i32 %104, 5
  %156 = or i1 %155, %143
  br i1 %156, label %157, label %179

; <label>:157                                     ; preds = %131
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 3
  %160 = fcmp fast ogt float %159, 0.000000e+00
  br i1 %160, label %161, label %165

; <label>:161                                     ; preds = %157
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %164 = fcmp fast ogt float %163, 0.000000e+00
  br label %165

; <label>:165                                     ; preds = %161, %157
  %166 = phi i1 [ false, %157 ], [ %164, %161 ]
  %167 = fcmp fast une float %159, 0.000000e+00
  %168 = select i1 %167, float 1.000000e+00, float %72
  %169 = select i1 %167, float 1.000000e+00, float %73
  %170 = select i1 %167, float 1.000000e+00, float %74
  br i1 %166, label %171, label %179

; <label>:171                                     ; preds = %165
  %172 = uitofp i1 %100 to float
  %173 = xor i1 %100, true
  %174 = uitofp i1 %173 to float
  %175 = fmul fast float %174, %152
  %176 = fmul fast float %174, %153
  %177 = fmul fast float %174, %154
  %178 = fmul fast float %174, %67
  br label %179

; <label>:179                                     ; preds = %171, %165, %131
  %180 = phi float [ %152, %131 ], [ %175, %171 ], [ %152, %165 ]
  %181 = phi float [ %153, %131 ], [ %176, %171 ], [ %153, %165 ]
  %182 = phi float [ %154, %131 ], [ %177, %171 ], [ %154, %165 ]
  %183 = phi float [ %72, %131 ], [ %172, %171 ], [ %168, %165 ]
  %184 = phi float [ %73, %131 ], [ %172, %171 ], [ %169, %165 ]
  %185 = phi float [ %74, %131 ], [ %172, %171 ], [ %170, %165 ]
  %186 = phi float [ %67, %131 ], [ %178, %171 ], [ %67, %165 ]
  %187 = fmul fast float %183, %144
  %188 = fmul fast float %184, %144
  %189 = fmul fast float %185, %144
  %190 = fsub fast float %183, %187
  %191 = fsub fast float %184, %188
  %192 = fsub fast float %185, %189
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %195 = fmul fast float %194, %190
  %196 = fmul fast float %194, %191
  %197 = fmul fast float %194, %192
  %198 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %199 = extractvalue %dx.types.CBufRet.f32 %193, 1
  %200 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %201 = fadd fast float %195, %198
  %202 = fadd fast float %196, %199
  %203 = fadd fast float %197, %200
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 3
  %206 = fmul fast float %205, %180
  %207 = fmul fast float %205, %181
  %208 = fmul fast float %205, %182
  %209 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %210 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %211 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %212 = fadd fast float %206, %209
  %213 = fadd fast float %207, %210
  %214 = fadd fast float %208, %211
  br i1 %119, label %215, label %241

; <label>:215                                     ; preds = %179
  %216 = call float @dx.op.dot3.f32(i32 55, float %55, float %56, float %57, float 1.000000e+00, float 0x3F70101020000000, float 0x3EF0203040000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %217 = call float @dx.op.dot3.f32(i32 55, float %121, float %122, float %123, float 1.000000e+00, float 0x3F70101020000000, float 0x3EF0203040000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %218 = fmul fast float %217, 0x401921FB60000000
  %219 = fadd fast float %218, 0xC00921FB60000000
  %220 = call float @dx.op.unary.f32(i32 13, float %219)  ; Sin(value)
  %221 = call float @dx.op.unary.f32(i32 12, float %219)  ; Cos(value)
  %222 = fmul fast float %221, %216
  %223 = fmul fast float %220, %216
  %224 = fcmp fast oge float %124, 5.000000e-01
  %225 = select i1 %224, float -1.000000e+00, float 1.000000e+00
  %226 = fadd fast float %124, -5.000000e-01
  %227 = select i1 %224, float %226, float %124
  %228 = fmul fast float %58, 1.000000e+01
  %229 = call float @dx.op.dot2.f32(i32 54, float %222, float %223, float %222, float %223)  ; Dot2(ax,ay,bx,by)
  %230 = fsub fast float 1.000000e+00, %229
  %231 = call float @dx.op.binary.f32(i32 35, float %230, float 0.000000e+00)  ; FMax(a,b)
  %232 = call float @dx.op.unary.f32(i32 24, float %231)  ; Sqrt(value)
  %233 = fmul fast float %232, %225
  %234 = fmul fast float %227, 0x4010102040000000
  %235 = fadd fast float %234, -1.000000e+00
  %236 = call float @dx.op.dot3.f32(i32 55, float %222, float %223, float %233, float %222, float %223, float %233)  ; Dot3(ax,ay,az,bx,by,bz)
  %237 = call float @dx.op.unary.f32(i32 25, float %236)  ; Rsqrt(value)
  %238 = fmul fast float %237, %222
  %239 = fmul fast float %237, %223
  %240 = fmul fast float %237, %233
  br label %256

; <label>:241                                     ; preds = %179
  br i1 %137, label %256, label %242

; <label>:242                                     ; preds = %241
  %243 = fmul fast float %55, 2.000000e+00
  %244 = fmul fast float %56, 2.000000e+00
  %245 = fmul fast float %57, 2.000000e+00
  %246 = fadd fast float %243, -1.000000e+00
  %247 = fadd fast float %244, -1.000000e+00
  %248 = fadd fast float %245, -1.000000e+00
  %249 = fmul fast float %58, 2.000000e+00
  %250 = fadd fast float %249, -1.000000e+00
  %251 = call float @dx.op.dot3.f32(i32 55, float %246, float %247, float %248, float %246, float %247, float %248)  ; Dot3(ax,ay,az,bx,by,bz)
  %252 = call float @dx.op.unary.f32(i32 25, float %251)  ; Rsqrt(value)
  %253 = fmul fast float %252, %246
  %254 = fmul fast float %252, %247
  %255 = fmul fast float %252, %248
  br label %256

; <label>:256                                     ; preds = %242, %241, %215
  %257 = phi float [ %238, %215 ], [ %253, %242 ], [ 0.000000e+00, %241 ]
  %258 = phi float [ %239, %215 ], [ %254, %242 ], [ 0.000000e+00, %241 ]
  %259 = phi float [ %240, %215 ], [ %255, %242 ], [ 0.000000e+00, %241 ]
  %260 = phi float [ %235, %215 ], [ %250, %242 ], [ 0.000000e+00, %241 ]
  %261 = phi float [ %228, %215 ], [ 0.000000e+00, %242 ], [ 0.000000e+00, %241 ]
  %262 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %263 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %262, %dx.types.Handle %39, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %264 = extractvalue %dx.types.ResRet.f32 %263, 0
  %265 = icmp eq i32 %104, 0
  br i1 %265, label %3798, label %266

; <label>:266                                     ; preds = %256
  %267 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %268 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %267, i32 0, i32 %92, i32 %93, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %269 = extractvalue %dx.types.ResRet.i32 %268, 0
  %270 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %271 = extractvalue %dx.types.CBufRet.i32 %270, 3
  %272 = and i32 %271, %269
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %3798, label %274, !dx.controlflow.hints !42

; <label>:274                                     ; preds = %266
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 3
  %277 = fcmp fast olt float %276, 1.000000e+00
  %278 = select i1 %277, float %52, float 1.000000e+00
  %279 = fmul fast float %278, %27
  %280 = fmul fast float %278, %28
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 0
  %283 = extractvalue %dx.types.CBufRet.f32 %281, 1
  %284 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 0
  %287 = extractvalue %dx.types.CBufRet.f32 %285, 1
  %288 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %290 = extractvalue %dx.types.CBufRet.f32 %289, 0
  %291 = extractvalue %dx.types.CBufRet.f32 %289, 1
  %292 = extractvalue %dx.types.CBufRet.f32 %289, 2
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 0
  %295 = extractvalue %dx.types.CBufRet.f32 %293, 1
  %296 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %297 = fmul fast float %279, %282
  %298 = call float @dx.op.tertiary.f32(i32 46, float %280, float %286, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %52, float %290, float %298)  ; FMad(a,b,c)
  %300 = fadd fast float %299, %294
  %301 = fmul fast float %279, %283
  %302 = call float @dx.op.tertiary.f32(i32 46, float %280, float %287, float %301)  ; FMad(a,b,c)
  %303 = call float @dx.op.tertiary.f32(i32 46, float %52, float %291, float %302)  ; FMad(a,b,c)
  %304 = fadd fast float %303, %295
  %305 = fmul fast float %279, %284
  %306 = call float @dx.op.tertiary.f32(i32 46, float %280, float %288, float %305)  ; FMad(a,b,c)
  %307 = call float @dx.op.tertiary.f32(i32 46, float %52, float %292, float %306)  ; FMad(a,b,c)
  %308 = fadd fast float %307, %296
  %309 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %310 = extractvalue %dx.types.CBufRet.f32 %309, 0
  %311 = extractvalue %dx.types.CBufRet.f32 %309, 1
  %312 = extractvalue %dx.types.CBufRet.f32 %309, 2
  %313 = fsub fast float %300, %310
  %314 = fsub fast float %304, %311
  %315 = fsub fast float %308, %312
  %316 = call float @dx.op.dot3.f32(i32 55, float %313, float %314, float %315, float %313, float %314, float %315)  ; Dot3(ax,ay,az,bx,by,bz)
  %317 = call float @dx.op.unary.f32(i32 25, float %316)  ; Rsqrt(value)
  %318 = fmul fast float %313, %317
  %319 = fmul fast float %314, %317
  %320 = fmul fast float %315, %317
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 0
  %333 = extractvalue %dx.types.CBufRet.f32 %331, 1
  %334 = extractvalue %dx.types.CBufRet.f32 %331, 2
  %335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %336 = extractvalue %dx.types.CBufRet.f32 %335, 0
  %337 = extractvalue %dx.types.CBufRet.f32 %335, 1
  %338 = extractvalue %dx.types.CBufRet.f32 %335, 2
  %339 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %340 = extractvalue %dx.types.CBufRet.f32 %339, 0
  %341 = extractvalue %dx.types.CBufRet.f32 %339, 1
  %342 = extractvalue %dx.types.CBufRet.f32 %335, 3
  %343 = extractvalue %dx.types.CBufRet.f32 %339, 3
  %344 = extractvalue %dx.types.CBufRet.f32 %339, 2
  %345 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %346 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %347 = extractvalue %dx.types.CBufRet.f32 %346, 2
  %348 = call float @dx.op.unary.f32(i32 6, float %347)  ; FAbs(value)
  %349 = fcmp fast olt float %347, 0.000000e+00
  %350 = extractvalue %dx.types.CBufRet.f32 %346, 3
  %351 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %352 = extractvalue %dx.types.CBufRet.f32 %351, 0
  %353 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %354 = extractvalue %dx.types.CBufRet.f32 %353, 0
  %355 = extractvalue %dx.types.CBufRet.f32 %353, 1
  %356 = extractvalue %dx.types.CBufRet.f32 %353, 2
  %357 = extractvalue %dx.types.CBufRet.f32 %353, 3
  %358 = extractvalue %dx.types.CBufRet.i32 %270, 2
  %359 = fcmp fast oeq float %330, 0.000000e+00
  %360 = and i32 %269, 2
  %361 = icmp ne i32 %360, 0
  %362 = and i32 %271, 3
  %363 = icmp eq i32 %362, 3
  %364 = and i1 %361, %363
  br i1 %364, label %365, label %373

; <label>:365                                     ; preds = %274
  %366 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 285)  ; CBufferLoadLegacy(handle,regIndex)
  %367 = extractvalue %dx.types.CBufRet.f32 %366, 0
  %368 = extractvalue %dx.types.CBufRet.f32 %366, 1
  %369 = extractvalue %dx.types.CBufRet.f32 %366, 2
  %370 = fmul fast float %367, %327
  %371 = fmul fast float %368, %328
  %372 = fmul fast float %369, %329
  br label %373

; <label>:373                                     ; preds = %365, %274
  %374 = phi float [ %370, %365 ], [ %327, %274 ]
  %375 = phi float [ %371, %365 ], [ %328, %274 ]
  %376 = phi float [ %372, %365 ], [ %329, %274 ]
  %377 = icmp eq i32 %104, 7
  %378 = fcmp fast ogt float %124, 0.000000e+00
  %379 = and i1 %377, %378
  br i1 %379, label %380, label %584

; <label>:380                                     ; preds = %373
  %381 = fsub fast float -0.000000e+00, %332
  %382 = fsub fast float -0.000000e+00, %333
  %383 = fsub fast float -0.000000e+00, %334
  %384 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %183)  ; FMax(a,b)
  %385 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %184)  ; FMax(a,b)
  %386 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %185)  ; FMax(a,b)
  %387 = call float @dx.op.dot3.f32(i32 55, float %381, float %382, float %383, float %140, float %141, float %142)  ; Dot3(ax,ay,az,bx,by,bz)
  %388 = call float @dx.op.unary.f32(i32 24, float %384)  ; Sqrt(value)
  %389 = call float @dx.op.unary.f32(i32 24, float %385)  ; Sqrt(value)
  %390 = call float @dx.op.unary.f32(i32 24, float %386)  ; Sqrt(value)
  %391 = call float @dx.op.unary.f32(i32 6, float %387)  ; FAbs(value)
  %392 = call float @dx.op.unary.f32(i32 7, float %391)  ; Saturate(value)
  %393 = call float @dx.op.unary.f32(i32 7, float %68)  ; Saturate(value)
  %394 = call float @dx.op.unary.f32(i32 7, float %388)  ; Saturate(value)
  %395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %396 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %397 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %395, %dx.types.Handle %396, float %392, float %393, float %394, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %398 = extractvalue %dx.types.ResRet.f32 %397, 0
  %399 = extractvalue %dx.types.ResRet.f32 %397, 1
  %400 = call float @dx.op.unary.f32(i32 7, float %389)  ; Saturate(value)
  %401 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %395, %dx.types.Handle %396, float %392, float %393, float %400, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %402 = extractvalue %dx.types.ResRet.f32 %401, 0
  %403 = extractvalue %dx.types.ResRet.f32 %401, 1
  %404 = call float @dx.op.unary.f32(i32 7, float %390)  ; Saturate(value)
  %405 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %395, %dx.types.Handle %396, float %392, float %393, float %404, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %406 = extractvalue %dx.types.ResRet.f32 %405, 0
  %407 = extractvalue %dx.types.ResRet.f32 %405, 1
  %408 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %409 = extractvalue %dx.types.CBufRet.i32 %408, 2
  %410 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %381, float %382, float %383)  ; Dot3(ax,ay,az,bx,by,bz)
  %411 = call float @dx.op.binary.f32(i32 35, float %410, float -1.000000e+00)  ; FMax(a,b)
  %412 = call float @dx.op.binary.f32(i32 36, float %411, float 1.000000e+00)  ; FMin(a,b)
  %413 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %318, float %319, float %320)  ; Dot3(ax,ay,az,bx,by,bz)
  %414 = call float @dx.op.binary.f32(i32 35, float %413, float -1.000000e+00)  ; FMax(a,b)
  %415 = call float @dx.op.binary.f32(i32 36, float %414, float 1.000000e+00)  ; FMin(a,b)
  %416 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %398)  ; FMin(a,b)
  %417 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %402)  ; FMin(a,b)
  %418 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %406)  ; FMin(a,b)
  %419 = fmul fast float %416, %416
  %420 = fmul fast float %417, %417
  %421 = fmul fast float %418, %418
  %422 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %399)  ; FMin(a,b)
  %423 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %403)  ; FMin(a,b)
  %424 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %407)  ; FMin(a,b)
  %425 = fmul fast float %422, %422
  %426 = fmul fast float %423, %423
  %427 = fmul fast float %424, %424
  %428 = fsub fast float 1.000000e+00, %419
  %429 = fsub fast float 1.000000e+00, %420
  %430 = fsub fast float 1.000000e+00, %421
  %431 = fmul fast float %422, %419
  %432 = fmul fast float %423, %420
  %433 = fmul fast float %424, %421
  %434 = fdiv fast float %431, %428
  %435 = fdiv fast float %432, %429
  %436 = fdiv fast float %433, %430
  %437 = fmul fast float %431, %425
  %438 = fmul fast float %432, %426
  %439 = fmul fast float %433, %427
  %440 = fmul fast float %428, %428
  %441 = fmul fast float %429, %429
  %442 = fmul fast float %430, %430
  %443 = fmul fast float %440, %428
  %444 = fmul fast float %441, %429
  %445 = fmul fast float %442, %430
  %446 = fdiv fast float %437, %443
  %447 = fdiv fast float %438, %444
  %448 = fdiv fast float %439, %445
  %449 = fadd fast float %446, %434
  %450 = fadd fast float %447, %435
  %451 = fadd fast float %448, %436
  %452 = call float @dx.op.binary.f32(i32 35, float %68, float 0x3FC70A3D80000000)  ; FMax(a,b)
  %453 = call float @dx.op.binary.f32(i32 36, float %452, float 0x3FE3333340000000)  ; FMin(a,b)
  %454 = fmul fast float %453, %453
  %455 = fmul fast float %453, 5.000000e-01
  %456 = fmul fast float %455, %455
  %457 = fmul fast float %453, 2.000000e+00
  %458 = fmul fast float %457, %457
  %459 = fadd fast float %417, %416
  %460 = fadd fast float %459, %418
  %461 = fdiv fast float %416, %460
  %462 = fdiv fast float %417, %460
  %463 = fdiv fast float %418, %460
  %464 = call float @dx.op.dot3.f32(i32 55, float %454, float %456, float %458, float %461, float %462, float %463)  ; Dot3(ax,ay,az,bx,by,bz)
  %465 = fmul fast float %464, %464
  %466 = call float @dx.op.unary.f32(i32 16, float %412)  ; Asin(value)
  %467 = call float @dx.op.unary.f32(i32 16, float %415)  ; Asin(value)
  %468 = fadd fast float %467, %466
  %469 = fmul fast float %468, 5.000000e-01
  %470 = call float @dx.op.dot3.f32(i32 55, float 0xBFB1EB8520000000, float 0x3FA1EB8520000000, float 0x3FC1EB8520000000, float %461, float %462, float %463)  ; Dot3(ax,ay,az,bx,by,bz)
  %471 = fmul fast float %425, 2.000000e+00
  %472 = fmul fast float %426, 2.000000e+00
  %473 = fmul fast float %427, 2.000000e+00
  %474 = fdiv fast float %471, %440
  %475 = fdiv fast float %472, %441
  %476 = fdiv fast float %473, %442
  %477 = fsub fast float 1.000000e+00, %474
  %478 = fsub fast float 1.000000e+00, %475
  %479 = fsub fast float 1.000000e+00, %476
  %480 = fmul fast float %440, 2.000000e+00
  %481 = fmul fast float %441, 2.000000e+00
  %482 = fmul fast float %442, 2.000000e+00
  %483 = fmul fast float %419, 4.000000e+00
  %484 = fmul fast float %420, 4.000000e+00
  %485 = fmul fast float %421, 4.000000e+00
  %486 = fmul fast float %483, %425
  %487 = fmul fast float %484, %426
  %488 = fmul fast float %485, %427
  %489 = fadd fast float %486, %480
  %490 = fadd fast float %487, %481
  %491 = fadd fast float %488, %482
  %492 = fmul fast float %470, %470
  %493 = fmul fast float %492, %489
  %494 = fmul fast float %493, %477
  %495 = fmul fast float %492, %490
  %496 = fmul fast float %495, %478
  %497 = fmul fast float %492, %491
  %498 = fmul fast float %497, %479
  %499 = fdiv fast float %494, %443
  %500 = fdiv fast float %496, %444
  %501 = fdiv fast float %498, %445
  %502 = fadd fast float %423, %422
  %503 = fadd fast float %502, %424
  %504 = fdiv fast float %422, %503
  %505 = fdiv fast float %423, %503
  %506 = fdiv fast float %424, %503
  %507 = call float @dx.op.dot3.f32(i32 55, float %454, float %456, float %458, float %504, float %505, float %506)  ; Dot3(ax,ay,az,bx,by,bz)
  %508 = fmul fast float %507, %507
  %509 = fmul fast float %419, 0x3FE6666660000000
  %510 = fmul fast float %420, 0x3FE6666660000000
  %511 = fmul fast float %421, 0x3FE6666660000000
  %512 = fadd fast float %509, 1.000000e+00
  %513 = fadd fast float %510, 1.000000e+00
  %514 = fadd fast float %511, 1.000000e+00
  %515 = fmul fast float %465, 2.000000e+00
  %516 = fadd fast float %508, %515
  %517 = call float @dx.op.unary.f32(i32 24, float %516)  ; Sqrt(value)
  %518 = fmul fast float %517, %425
  %519 = fmul fast float %517, %426
  %520 = fmul fast float %517, %427
  %521 = fadd fast float %518, %517
  %522 = fadd fast float %519, %517
  %523 = fadd fast float %520, %517
  %524 = fmul fast float %512, %422
  %525 = fmul fast float %524, %521
  %526 = fmul fast float %513, %423
  %527 = fmul fast float %526, %522
  %528 = fmul fast float %514, %424
  %529 = fmul fast float %528, %523
  %530 = fmul fast float %425, %422
  %531 = fmul fast float %426, %423
  %532 = fmul fast float %427, %424
  %533 = fmul fast float %464, 2.000000e+00
  %534 = fmul fast float %507, 3.000000e+00
  %535 = fadd fast float %534, %533
  %536 = fmul fast float %530, %535
  %537 = fmul fast float %531, %535
  %538 = fmul fast float %532, %535
  %539 = fadd fast float %536, %422
  %540 = fadd fast float %537, %423
  %541 = fadd fast float %538, %424
  %542 = fdiv fast float %525, %539
  %543 = fdiv fast float %527, %540
  %544 = fdiv fast float %529, %541
  %545 = fmul fast float %542, %542
  %546 = fmul fast float %543, %543
  %547 = fmul fast float %544, %544
  %548 = fsub fast float %469, %499
  %549 = fadd fast float %545, %465
  %550 = fmul fast float %548, %548
  %551 = fmul fast float %550, -5.000000e-01
  %552 = fdiv fast float %551, %549
  %553 = fmul fast float %552, 0x3FF7154760000000
  %554 = call float @dx.op.unary.f32(i32 21, float %553)  ; Exp(value)
  %555 = fsub fast float %469, %500
  %556 = fadd fast float %546, %465
  %557 = fmul fast float %555, %555
  %558 = fmul fast float %557, -5.000000e-01
  %559 = fdiv fast float %558, %556
  %560 = fmul fast float %559, 0x3FF7154760000000
  %561 = call float @dx.op.unary.f32(i32 21, float %560)  ; Exp(value)
  %562 = fsub fast float %469, %501
  %563 = fadd fast float %547, %465
  %564 = fmul fast float %562, %562
  %565 = fmul fast float %564, -5.000000e-01
  %566 = fdiv fast float %565, %563
  %567 = fmul fast float %566, 0x3FF7154760000000
  %568 = call float @dx.op.unary.f32(i32 21, float %567)  ; Exp(value)
  %569 = fmul fast float %449, 0x3FDC8543C0000000
  %570 = fmul fast float %569, %554
  %571 = fmul fast float %450, 0x3FDC8543C0000000
  %572 = fmul fast float %571, %561
  %573 = fmul fast float %451, 0x3FDC8543C0000000
  %574 = fmul fast float %573, %568
  %575 = or i32 %409, 32
  %576 = and i32 %409, 8
  %577 = icmp ne i32 %576, 0
  %578 = select i1 %577, float %570, float 0.000000e+00
  %579 = select i1 %577, float %572, float 0.000000e+00
  %580 = select i1 %577, float %574, float 0.000000e+00
  %581 = lshr i32 %409, 6
  %582 = and i32 %581, 1
  %583 = xor i32 %582, 1
  br label %584

; <label>:584                                     ; preds = %380, %373
  %585 = phi float [ %384, %380 ], [ %183, %373 ]
  %586 = phi float [ %385, %380 ], [ %184, %373 ]
  %587 = phi float [ %386, %380 ], [ %185, %373 ]
  %588 = phi i32 [ %575, %380 ], [ 39, %373 ]
  %589 = phi float [ %578, %380 ], [ 0.000000e+00, %373 ]
  %590 = phi float [ %579, %380 ], [ 0.000000e+00, %373 ]
  %591 = phi float [ %580, %380 ], [ 0.000000e+00, %373 ]
  %592 = phi i32 [ 1, %380 ], [ 0, %373 ]
  %593 = phi i32 [ %583, %380 ], [ 1, %373 ]
  %594 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %595 = extractvalue %dx.types.CBufRet.i32 %594, 0
  %596 = uitofp i32 %595 to float
  %597 = fmul fast float %596, 0x4040551EC0000000
  %598 = fmul fast float %596, 0x4027A147A0000000
  %599 = fadd fast float %597, %22
  %600 = fadd fast float %598, %23
  %601 = call float @dx.op.dot2.f32(i32 54, float %599, float %600, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %602 = call float @dx.op.unary.f32(i32 22, float %601)  ; Frc(value)
  %603 = fmul fast float %602, 0x404A7DD040000000
  %604 = call float @dx.op.unary.f32(i32 22, float %603)  ; Frc(value)
  %605 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %606 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %607 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %605, %dx.types.Handle %606, float %36, float %37, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %608 = extractvalue %dx.types.ResRet.f32 %607, 2
  %609 = extractvalue %dx.types.ResRet.f32 %607, 3
  %610 = fmul fast float %608, %608
  %611 = fmul fast float %609, %609
  %612 = fsub fast float -0.000000e+00, %318
  %613 = fsub fast float -0.000000e+00, %319
  %614 = fsub fast float -0.000000e+00, %320
  %615 = fsub fast float %322, %300
  %616 = fsub fast float %323, %304
  %617 = fsub fast float %324, %308
  %618 = call float @dx.op.dot3.f32(i32 55, float %615, float %616, float %617, float %615, float %616, float %617)  ; Dot3(ax,ay,az,bx,by,bz)
  %619 = call float @dx.op.unary.f32(i32 25, float %618)  ; Rsqrt(value)
  %620 = fmul fast float %619, %615
  %621 = fmul fast float %619, %616
  %622 = fmul fast float %619, %617
  br i1 %359, label %623, label %630

; <label>:623                                     ; preds = %584
  %624 = fmul fast float %325, %325
  %625 = fmul fast float %624, %618
  %626 = fmul fast float %625, %625
  %627 = fsub fast float 1.000000e+00, %626
  %628 = call float @dx.op.unary.f32(i32 7, float %627)  ; Saturate(value)
  %629 = fmul fast float %628, %628
  br label %640

; <label>:630                                     ; preds = %584
  %631 = fmul fast float %615, %325
  %632 = fmul fast float %616, %325
  %633 = fmul fast float %617, %325
  %634 = call float @dx.op.dot3.f32(i32 55, float %631, float %632, float %633, float %631, float %632, float %633)  ; Dot3(ax,ay,az,bx,by,bz)
  %635 = call float @dx.op.unary.f32(i32 7, float %634)  ; Saturate(value)
  %636 = fsub fast float 1.000000e+00, %635
  %637 = call float @dx.op.unary.f32(i32 23, float %636)  ; Log(value)
  %638 = fmul fast float %637, %330
  %639 = call float @dx.op.unary.f32(i32 21, float %638)  ; Exp(value)
  br label %640

; <label>:640                                     ; preds = %630, %623
  %641 = phi float [ %629, %623 ], [ %639, %630 ]
  %642 = call float @dx.op.dot3.f32(i32 55, float %620, float %621, float %622, float %332, float %333, float %334)  ; Dot3(ax,ay,az,bx,by,bz)
  %643 = fsub fast float %642, %340
  %644 = fmul fast float %643, %341
  %645 = call float @dx.op.unary.f32(i32 7, float %644)  ; Saturate(value)
  %646 = fmul fast float %645, %645
  %647 = fmul fast float %646, %641
  %648 = fmul fast float %647, %374
  %649 = fmul fast float %647, %375
  %650 = fmul fast float %647, %376
  %651 = fcmp fast ogt float %647, 0.000000e+00
  br i1 %651, label %652, label %3783, !dx.controlflow.hints !43

; <label>:652                                     ; preds = %640
  %653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %654 = extractvalue %dx.types.CBufRet.f32 %653, 1
  %655 = fmul fast float %654, %52
  %656 = icmp eq i32 %358, 0
  br i1 %656, label %671, label %657, !dx.controlflow.hints !44

; <label>:657                                     ; preds = %652
  %658 = call float @dx.op.dot4.f32(i32 56, float %354, float %355, float %356, float %357, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %659 = call float @dx.op.dot4.f32(i32 56, float %132, float %133, float %134, float %135, float %354, float %355, float %356, float %357)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %660 = fadd fast float %659, -1.000000e+00
  %661 = fmul fast float %660, %658
  %662 = fadd fast float %661, 1.000000e+00
  %663 = fmul fast float %610, %662
  %664 = fmul fast float %662, %611
  %665 = icmp ugt i32 %358, 1
  %666 = fcmp fast ogt float %348, 0.000000e+00
  %667 = and i1 %666, %665
  br i1 %667, label %668, label %671

; <label>:668                                     ; preds = %657
  %669 = select i1 %349, float 1.000000e+00, float %655
  %670 = fmul fast float %669, %348
  br label %671

; <label>:671                                     ; preds = %668, %657, %652
  %672 = phi float [ %611, %668 ], [ %611, %657 ], [ 1.000000e+00, %652 ]
  %673 = phi float [ %664, %668 ], [ %664, %657 ], [ 1.000000e+00, %652 ]
  %674 = phi float [ %663, %668 ], [ %663, %657 ], [ %264, %652 ]
  %675 = phi float [ %670, %668 ], [ 0.000000e+00, %657 ], [ 0.000000e+00, %652 ]
  %676 = icmp ult i32 %358, 2
  %677 = and i1 %377, %676
  %678 = fmul fast float %655, 0x3FC99999A0000000
  %679 = select i1 %677, float %678, float %675
  %680 = select i1 %143, float 5.000000e-01, float %679
  %681 = fcmp fast ogt float %680, 0.000000e+00
  br i1 %681, label %682, label %1023, !dx.controlflow.hints !45

; <label>:682                                     ; preds = %671
  %683 = fadd fast float %604, -5.000000e-01
  %684 = and i1 %377, %656
  %685 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %686 = extractvalue %dx.types.CBufRet.f32 %685, 0
  %687 = extractvalue %dx.types.CBufRet.f32 %685, 1
  %688 = extractvalue %dx.types.CBufRet.f32 %685, 2
  %689 = extractvalue %dx.types.CBufRet.f32 %685, 3
  %690 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %691 = extractvalue %dx.types.CBufRet.f32 %690, 0
  %692 = extractvalue %dx.types.CBufRet.f32 %690, 1
  %693 = extractvalue %dx.types.CBufRet.f32 %690, 2
  %694 = extractvalue %dx.types.CBufRet.f32 %690, 3
  %695 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %696 = extractvalue %dx.types.CBufRet.f32 %695, 0
  %697 = extractvalue %dx.types.CBufRet.f32 %695, 1
  %698 = extractvalue %dx.types.CBufRet.f32 %695, 2
  %699 = extractvalue %dx.types.CBufRet.f32 %695, 3
  %700 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %701 = extractvalue %dx.types.CBufRet.f32 %700, 0
  %702 = extractvalue %dx.types.CBufRet.f32 %700, 1
  %703 = extractvalue %dx.types.CBufRet.f32 %700, 2
  %704 = extractvalue %dx.types.CBufRet.f32 %700, 3
  %705 = fmul fast float %686, %300
  %706 = call float @dx.op.tertiary.f32(i32 46, float %304, float %691, float %705)  ; FMad(a,b,c)
  %707 = call float @dx.op.tertiary.f32(i32 46, float %308, float %696, float %706)  ; FMad(a,b,c)
  %708 = fadd fast float %707, %701
  %709 = fmul fast float %687, %300
  %710 = call float @dx.op.tertiary.f32(i32 46, float %304, float %692, float %709)  ; FMad(a,b,c)
  %711 = call float @dx.op.tertiary.f32(i32 46, float %308, float %697, float %710)  ; FMad(a,b,c)
  %712 = fadd fast float %711, %702
  %713 = fmul fast float %688, %300
  %714 = call float @dx.op.tertiary.f32(i32 46, float %304, float %693, float %713)  ; FMad(a,b,c)
  %715 = call float @dx.op.tertiary.f32(i32 46, float %308, float %698, float %714)  ; FMad(a,b,c)
  %716 = fadd fast float %715, %703
  %717 = fmul fast float %689, %300
  %718 = call float @dx.op.tertiary.f32(i32 46, float %304, float %694, float %717)  ; FMad(a,b,c)
  %719 = call float @dx.op.tertiary.f32(i32 46, float %308, float %699, float %718)  ; FMad(a,b,c)
  %720 = fadd fast float %719, %704
  %721 = fmul fast float %680, %620
  %722 = fmul fast float %680, %621
  %723 = fmul fast float %680, %622
  %724 = fmul fast float %686, %721
  %725 = call float @dx.op.tertiary.f32(i32 46, float %722, float %691, float %724)  ; FMad(a,b,c)
  %726 = call float @dx.op.tertiary.f32(i32 46, float %723, float %696, float %725)  ; FMad(a,b,c)
  %727 = fmul fast float %687, %721
  %728 = call float @dx.op.tertiary.f32(i32 46, float %722, float %692, float %727)  ; FMad(a,b,c)
  %729 = call float @dx.op.tertiary.f32(i32 46, float %723, float %697, float %728)  ; FMad(a,b,c)
  %730 = fmul fast float %688, %721
  %731 = call float @dx.op.tertiary.f32(i32 46, float %722, float %693, float %730)  ; FMad(a,b,c)
  %732 = call float @dx.op.tertiary.f32(i32 46, float %723, float %698, float %731)  ; FMad(a,b,c)
  %733 = fmul fast float %689, %721
  %734 = call float @dx.op.tertiary.f32(i32 46, float %722, float %694, float %733)  ; FMad(a,b,c)
  %735 = call float @dx.op.tertiary.f32(i32 46, float %723, float %699, float %734)  ; FMad(a,b,c)
  %736 = fadd fast float %726, %708
  %737 = fadd fast float %729, %712
  %738 = fadd fast float %732, %716
  %739 = fadd fast float %735, %720
  %740 = fdiv fast float %708, %720
  %741 = fdiv fast float %712, %720
  %742 = fdiv fast float %716, %720
  %743 = fdiv fast float %736, %739
  %744 = fdiv fast float %737, %739
  %745 = fdiv fast float %738, %739
  %746 = fsub fast float %743, %740
  %747 = fsub fast float %744, %741
  %748 = fsub fast float %745, %742
  %749 = fmul fast float %30, %740
  %750 = fmul fast float %31, %741
  %751 = fadd fast float %749, %35
  %752 = fadd fast float %750, %34
  %753 = fmul fast float %30, %746
  %754 = fmul fast float %31, %747
  %755 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %756 = extractvalue %dx.types.CBufRet.f32 %755, 2
  %757 = extractvalue %dx.types.CBufRet.f32 %755, 3
  %758 = call float @dx.op.tertiary.f32(i32 46, float %680, float %756, float 0.000000e+00)  ; FMad(a,b,c)
  %759 = call float @dx.op.tertiary.f32(i32 46, float %680, float %757, float 0.000000e+00)  ; FMad(a,b,c)
  %760 = fadd fast float %758, %716
  %761 = fadd fast float %759, %720
  %762 = fdiv fast float %760, %761
  %763 = fsub fast float %762, %742
  %764 = call float @dx.op.unary.f32(i32 6, float %763)  ; FAbs(value)
  %765 = fmul fast float %764, 2.500000e-01
  %766 = fmul fast float %683, 1.250000e-01
  %767 = fadd fast float %766, 1.250000e-01
  %768 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %751, float %752, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %769 = extractvalue %dx.types.ResRet.f32 %768, 0
  %770 = fmul fast float %753, %767
  %771 = fmul fast float %754, %767
  %772 = fmul fast float %748, %767
  %773 = fadd fast float %770, %751
  %774 = fadd fast float %771, %752
  %775 = fadd fast float %772, %742
  %776 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %773, float %774, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %777 = extractvalue %dx.types.ResRet.f32 %776, 0
  %778 = fadd fast float %775, %765
  %779 = fsub fast float %778, %777
  %780 = call float @dx.op.unary.f32(i32 6, float %779)  ; FAbs(value)
  %781 = fcmp fast olt float %780, %765
  %782 = zext i1 %781 to i32
  br i1 %684, label %787, label %783

; <label>:783                                     ; preds = %682
  %784 = fcmp fast une float %777, %769
  %785 = and i1 %781, %784
  %786 = zext i1 %785 to i32
  br label %787

; <label>:787                                     ; preds = %783, %682
  %788 = phi i32 [ %782, %682 ], [ %786, %783 ]
  %789 = icmp ne i32 %788, 0
  %790 = select i1 %789, float %767, float -1.000000e+00
  %791 = fadd fast float %766, 2.500000e-01
  %792 = fmul fast float %753, %791
  %793 = fmul fast float %754, %791
  %794 = fmul fast float %748, %791
  %795 = fadd fast float %792, %751
  %796 = fadd fast float %793, %752
  %797 = fadd fast float %794, %742
  %798 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %795, float %796, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %799 = extractvalue %dx.types.ResRet.f32 %798, 0
  %800 = fadd fast float %797, %765
  %801 = fsub fast float %800, %799
  %802 = call float @dx.op.unary.f32(i32 6, float %801)  ; FAbs(value)
  %803 = fcmp fast olt float %802, %765
  %804 = zext i1 %803 to i32
  br i1 %684, label %809, label %805

; <label>:805                                     ; preds = %787
  %806 = fcmp fast une float %799, %769
  %807 = and i1 %803, %806
  %808 = zext i1 %807 to i32
  br label %809

; <label>:809                                     ; preds = %805, %787
  %810 = phi i32 [ %804, %787 ], [ %808, %805 ]
  %811 = icmp ne i32 %810, 0
  %812 = fcmp fast olt float %790, 0.000000e+00
  %813 = and i1 %812, %811
  %814 = select i1 %813, float %791, float %790
  %815 = fadd fast float %766, 3.750000e-01
  %816 = fmul fast float %753, %815
  %817 = fmul fast float %754, %815
  %818 = fmul fast float %748, %815
  %819 = fadd fast float %816, %751
  %820 = fadd fast float %817, %752
  %821 = fadd fast float %818, %742
  %822 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %819, float %820, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %823 = extractvalue %dx.types.ResRet.f32 %822, 0
  %824 = fadd fast float %821, %765
  %825 = fsub fast float %824, %823
  %826 = call float @dx.op.unary.f32(i32 6, float %825)  ; FAbs(value)
  %827 = fcmp fast olt float %826, %765
  %828 = zext i1 %827 to i32
  br i1 %684, label %833, label %829

; <label>:829                                     ; preds = %809
  %830 = fcmp fast une float %823, %769
  %831 = and i1 %827, %830
  %832 = zext i1 %831 to i32
  br label %833

; <label>:833                                     ; preds = %829, %809
  %834 = phi i32 [ %828, %809 ], [ %832, %829 ]
  %835 = icmp ne i32 %834, 0
  %836 = fcmp fast olt float %814, 0.000000e+00
  %837 = and i1 %836, %835
  %838 = select i1 %837, float %815, float %814
  %839 = fadd fast float %766, 5.000000e-01
  %840 = fmul fast float %753, %839
  %841 = fmul fast float %754, %839
  %842 = fmul fast float %748, %839
  %843 = fadd fast float %840, %751
  %844 = fadd fast float %841, %752
  %845 = fadd fast float %842, %742
  %846 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %843, float %844, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %847 = extractvalue %dx.types.ResRet.f32 %846, 0
  %848 = fadd fast float %845, %765
  %849 = fsub fast float %848, %847
  %850 = call float @dx.op.unary.f32(i32 6, float %849)  ; FAbs(value)
  %851 = fcmp fast olt float %850, %765
  %852 = zext i1 %851 to i32
  br i1 %684, label %857, label %853

; <label>:853                                     ; preds = %833
  %854 = fcmp fast une float %847, %769
  %855 = and i1 %851, %854
  %856 = zext i1 %855 to i32
  br label %857

; <label>:857                                     ; preds = %853, %833
  %858 = phi i32 [ %852, %833 ], [ %856, %853 ]
  %859 = icmp ne i32 %858, 0
  %860 = fcmp fast olt float %838, 0.000000e+00
  %861 = and i1 %860, %859
  %862 = select i1 %861, float %839, float %838
  %863 = fadd fast float %766, 6.250000e-01
  %864 = fmul fast float %753, %863
  %865 = fmul fast float %754, %863
  %866 = fmul fast float %748, %863
  %867 = fadd fast float %864, %751
  %868 = fadd fast float %865, %752
  %869 = fadd fast float %866, %742
  %870 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %867, float %868, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %871 = extractvalue %dx.types.ResRet.f32 %870, 0
  %872 = fadd fast float %869, %765
  %873 = fsub fast float %872, %871
  %874 = call float @dx.op.unary.f32(i32 6, float %873)  ; FAbs(value)
  %875 = fcmp fast olt float %874, %765
  %876 = zext i1 %875 to i32
  br i1 %684, label %881, label %877

; <label>:877                                     ; preds = %857
  %878 = fcmp fast une float %871, %769
  %879 = and i1 %875, %878
  %880 = zext i1 %879 to i32
  br label %881

; <label>:881                                     ; preds = %877, %857
  %882 = phi i32 [ %876, %857 ], [ %880, %877 ]
  %883 = icmp ne i32 %882, 0
  %884 = fcmp fast olt float %862, 0.000000e+00
  %885 = and i1 %884, %883
  %886 = select i1 %885, float %863, float %862
  %887 = fadd fast float %766, 7.500000e-01
  %888 = fmul fast float %753, %887
  %889 = fmul fast float %754, %887
  %890 = fmul fast float %748, %887
  %891 = fadd fast float %888, %751
  %892 = fadd fast float %889, %752
  %893 = fadd fast float %890, %742
  %894 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %891, float %892, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %895 = extractvalue %dx.types.ResRet.f32 %894, 0
  %896 = fadd fast float %893, %765
  %897 = fsub fast float %896, %895
  %898 = call float @dx.op.unary.f32(i32 6, float %897)  ; FAbs(value)
  %899 = fcmp fast olt float %898, %765
  %900 = zext i1 %899 to i32
  br i1 %684, label %905, label %901

; <label>:901                                     ; preds = %881
  %902 = fcmp fast une float %895, %769
  %903 = and i1 %899, %902
  %904 = zext i1 %903 to i32
  br label %905

; <label>:905                                     ; preds = %901, %881
  %906 = phi i32 [ %900, %881 ], [ %904, %901 ]
  %907 = icmp ne i32 %906, 0
  %908 = fcmp fast olt float %886, 0.000000e+00
  %909 = and i1 %908, %907
  %910 = select i1 %909, float %887, float %886
  %911 = fadd fast float %766, 8.750000e-01
  %912 = fmul fast float %753, %911
  %913 = fmul fast float %754, %911
  %914 = fmul fast float %748, %911
  %915 = fadd fast float %912, %751
  %916 = fadd fast float %913, %752
  %917 = fadd fast float %914, %742
  %918 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %915, float %916, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %919 = extractvalue %dx.types.ResRet.f32 %918, 0
  %920 = fadd fast float %917, %765
  %921 = fsub fast float %920, %919
  %922 = call float @dx.op.unary.f32(i32 6, float %921)  ; FAbs(value)
  %923 = fcmp fast olt float %922, %765
  %924 = zext i1 %923 to i32
  br i1 %684, label %929, label %925

; <label>:925                                     ; preds = %905
  %926 = fcmp fast une float %919, %769
  %927 = and i1 %923, %926
  %928 = zext i1 %927 to i32
  br label %929

; <label>:929                                     ; preds = %925, %905
  %930 = phi i32 [ %924, %905 ], [ %928, %925 ]
  %931 = icmp ne i32 %930, 0
  %932 = fcmp fast olt float %910, 0.000000e+00
  %933 = and i1 %932, %931
  %934 = select i1 %933, float %911, float %910
  %935 = fadd fast float %766, 1.000000e+00
  %936 = fmul fast float %753, %935
  %937 = fmul fast float %754, %935
  %938 = fmul fast float %748, %935
  %939 = fadd fast float %936, %751
  %940 = fadd fast float %937, %752
  %941 = fadd fast float %938, %742
  %942 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %38, %dx.types.Handle %39, float %939, float %940, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %943 = extractvalue %dx.types.ResRet.f32 %942, 0
  %944 = fadd fast float %941, %765
  %945 = fsub fast float %944, %943
  %946 = call float @dx.op.unary.f32(i32 6, float %945)  ; FAbs(value)
  %947 = fcmp fast olt float %946, %765
  %948 = zext i1 %947 to i32
  br i1 %684, label %953, label %949

; <label>:949                                     ; preds = %929
  %950 = fcmp fast une float %943, %769
  %951 = and i1 %947, %950
  %952 = zext i1 %951 to i32
  br label %953

; <label>:953                                     ; preds = %949, %929
  %954 = phi i32 [ %948, %929 ], [ %952, %949 ]
  %955 = icmp ne i32 %954, 0
  %956 = fcmp fast olt float %934, 0.000000e+00
  %957 = and i1 %956, %955
  %958 = select i1 %957, float %935, float %934
  %959 = fcmp fast ogt float %958, 0.000000e+00
  br i1 %959, label %960, label %989

; <label>:960                                     ; preds = %953
  %961 = fmul fast float %958, %753
  %962 = fmul fast float %958, %754
  %963 = fadd fast float %961, %751
  %964 = fadd fast float %962, %752
  %965 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %59, %dx.types.Handle %39, float %963, float %964, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %966 = extractvalue %dx.types.ResRet.f32 %965, 3
  %967 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %64, %dx.types.Handle %39, float %963, float %964, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %968 = extractvalue %dx.types.ResRet.f32 %967, 3
  %969 = fmul fast float %968, 2.550000e+02
  %970 = fadd fast float %969, 5.000000e-01
  %971 = fptoui float %970 to i32
  %972 = and i32 %971, 15
  %973 = fmul fast float %966, 0x400FFDF3C0000000
  %974 = fptoui float %973 to i32
  %975 = and i32 %974, 1
  %976 = icmp ne i32 %975, 0
  %977 = icmp ne i32 %972, 9
  %978 = and i1 %976, %977
  %979 = zext i1 %978 to i32
  %980 = fcmp fast olt float %963, 1.000000e+00
  %981 = fcmp fast olt float %964, 1.000000e+00
  %982 = fcmp fast ogt float %963, 0.000000e+00
  %983 = fcmp fast ogt float %964, 0.000000e+00
  %984 = and i1 %982, %980
  %985 = and i1 %983, %981
  %986 = and i1 %984, %985
  %987 = fmul fast float %958, %680
  %988 = select i1 %986, float %987, float -1.000000e+00
  br label %989

; <label>:989                                     ; preds = %960, %953
  %990 = phi float [ %988, %960 ], [ -1.000000e+00, %953 ]
  %991 = phi i32 [ %979, %960 ], [ 0, %953 ]
  %992 = fcmp fast ogt float %990, 0.000000e+00
  br i1 %992, label %993, label %1023

; <label>:993                                     ; preds = %989
  %994 = icmp ne i32 %991, 0
  %995 = select i1 %994, float %350, float %352
  %996 = fcmp fast ogt float %995, 0.000000e+00
  br i1 %996, label %997, label %1018

; <label>:997                                     ; preds = %993
  %998 = add nsw i32 %104, -5
  %999 = icmp ult i32 %998, 3
  %1000 = or i1 %113, %999
  %1001 = or i1 %143, %1000
  %1002 = icmp ne i32 %104, 7
  %1003 = and i1 %1002, %1001
  %1004 = icmp ne i32 %104, 9
  %1005 = and i1 %1004, %1003
  %1006 = icmp ne i32 %104, 5
  %1007 = and i1 %1006, %1005
  br i1 %1007, label %1008, label %1018

; <label>:1008                                    ; preds = %997
  %1009 = call float @dx.op.binary.f32(i32 36, float %124, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1010 = fsub fast float 1.000000e+00, %1009
  %1011 = call float @dx.op.unary.f32(i32 23, float %1010)  ; Log(value)
  %1012 = fmul fast float %990, 0x3FA99999A0000000
  %1013 = fmul fast float %1012, %1011
  %1014 = call float @dx.op.unary.f32(i32 21, float %1013)  ; Exp(value)
  %1015 = call float @dx.op.unary.f32(i32 7, float %1014)  ; Saturate(value)
  %1016 = fsub fast float 1.000000e+00, %1015
  %1017 = fmul fast float %1016, %995
  br label %1018

; <label>:1018                                    ; preds = %1008, %997, %993
  %1019 = phi float [ %1017, %1008 ], [ %995, %997 ], [ %995, %993 ]
  %1020 = fsub fast float 1.000000e+00, %1019
  %1021 = fmul fast float %1020, %674
  %1022 = fmul fast float %1020, %673
  br label %1023

; <label>:1023                                    ; preds = %1018, %989, %671
  %1024 = phi float [ %1022, %1018 ], [ %673, %989 ], [ %673, %671 ]
  %1025 = phi float [ %1021, %1018 ], [ %674, %989 ], [ %674, %671 ]
  %1026 = fadd fast float %1025, %1024
  %1027 = fcmp fast ogt float %1026, 0.000000e+00
  br i1 %1027, label %1028, label %3783, !dx.controlflow.hints !46

; <label>:1028                                    ; preds = %1023
  %1029 = fmul fast float %343, 5.000000e-01
  %1030 = fmul fast float %1029, %336
  %1031 = fmul fast float %1029, %337
  %1032 = fmul fast float %1029, %338
  %1033 = fsub fast float %615, %1030
  %1034 = fsub fast float %616, %1031
  %1035 = fsub fast float %617, %1032
  %1036 = fadd fast float %1030, %615
  %1037 = fadd fast float %1031, %616
  %1038 = fadd fast float %1032, %617
  %1039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 245)  ; CBufferLoadLegacy(handle,regIndex)
  %1040 = extractvalue %dx.types.CBufRet.f32 %1039, 2
  %1041 = call float @dx.op.binary.f32(i32 35, float %68, float %1040)  ; FMax(a,b)
  %1042 = fcmp fast ogt float %343, 0.000000e+00
  %1043 = call float @dx.op.dot3.f32(i32 55, float %1033, float %1034, float %1035, float %1033, float %1034, float %1035)  ; Dot3(ax,ay,az,bx,by,bz)
  %1044 = call float @dx.op.unary.f32(i32 25, float %1043)  ; Rsqrt(value)
  br i1 %1042, label %1045, label %1061, !dx.controlflow.hints !47

; <label>:1045                                    ; preds = %1028
  %1046 = call float @dx.op.dot3.f32(i32 55, float %1036, float %1037, float %1038, float %1036, float %1037, float %1038)  ; Dot3(ax,ay,az,bx,by,bz)
  %1047 = call float @dx.op.unary.f32(i32 25, float %1046)  ; Rsqrt(value)
  %1048 = fmul fast float %1047, %1044
  %1049 = call float @dx.op.dot3.f32(i32 55, float %1033, float %1034, float %1035, float %1036, float %1037, float %1038)  ; Dot3(ax,ay,az,bx,by,bz)
  %1050 = fmul fast float %1049, %1048
  %1051 = fmul fast float %1050, 5.000000e-01
  %1052 = fadd fast float %1048, 5.000000e-01
  %1053 = fadd fast float %1052, %1051
  %1054 = fdiv fast float %1048, %1053
  %1055 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1033, float %1034, float %1035)  ; Dot3(ax,ay,az,bx,by,bz)
  %1056 = fmul fast float %1055, %1044
  %1057 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1036, float %1037, float %1038)  ; Dot3(ax,ay,az,bx,by,bz)
  %1058 = fmul fast float %1057, %1047
  %1059 = fadd fast float %1058, %1056
  %1060 = fmul fast float %1059, 5.000000e-01
  br label %1068

; <label>:1061                                    ; preds = %1028
  %1062 = fadd fast float %1043, 1.000000e+00
  %1063 = fdiv fast float 1.000000e+00, %1062
  %1064 = fmul fast float %1044, %1033
  %1065 = fmul fast float %1044, %1034
  %1066 = fmul fast float %1044, %1035
  %1067 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1064, float %1065, float %1066)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %1068

; <label>:1068                                    ; preds = %1061, %1045
  %1069 = phi float [ %1060, %1045 ], [ %1067, %1061 ]
  %1070 = phi float [ %1054, %1045 ], [ %1063, %1061 ]
  %1071 = phi float [ %1050, %1045 ], [ 1.000000e+00, %1061 ]
  %1072 = fcmp fast ogt float %342, 0.000000e+00
  br i1 %1072, label %1073, label %1086

; <label>:1073                                    ; preds = %1068
  %1074 = fmul fast float %342, %342
  %1075 = fmul fast float %1074, %1070
  %1076 = call float @dx.op.unary.f32(i32 7, float %1075)  ; Saturate(value)
  %1077 = call float @dx.op.unary.f32(i32 24, float %1076)  ; Sqrt(value)
  %1078 = fcmp fast olt float %1069, %1077
  br i1 %1078, label %1079, label %1086

; <label>:1079                                    ; preds = %1073
  %1080 = fsub fast float -0.000000e+00, %1077
  %1081 = call float @dx.op.binary.f32(i32 35, float %1069, float %1080)  ; FMax(a,b)
  %1082 = fadd fast float %1081, %1077
  %1083 = fmul fast float %1082, %1082
  %1084 = fmul fast float %1077, 4.000000e+00
  %1085 = fdiv fast float %1083, %1084
  br label %1086

; <label>:1086                                    ; preds = %1079, %1073, %1068
  %1087 = phi float [ %1069, %1068 ], [ %1085, %1079 ], [ %1069, %1073 ]
  %1088 = call float @dx.op.unary.f32(i32 7, float %1087)  ; Saturate(value)
  %1089 = select i1 %359, float %1070, float 1.000000e+00
  br i1 %1042, label %1090, label %1121

; <label>:1090                                    ; preds = %1086
  %1091 = call float @dx.op.dot3.f32(i32 55, float %318, float %319, float %320, float %140, float %141, float %142)  ; Dot3(ax,ay,az,bx,by,bz)
  %1092 = fmul fast float %1091, 2.000000e+00
  %1093 = fmul fast float %1092, %140
  %1094 = fmul fast float %1092, %141
  %1095 = fmul fast float %1092, %142
  %1096 = fsub fast float %318, %1093
  %1097 = fsub fast float %319, %1094
  %1098 = fsub fast float %320, %1095
  %1099 = fmul fast float %343, %336
  %1100 = fmul fast float %343, %337
  %1101 = fmul fast float %343, %338
  %1102 = fmul fast float %343, %343
  %1103 = call float @dx.op.dot3.f32(i32 55, float %1096, float %1097, float %1098, float %1099, float %1100, float %1101)  ; Dot3(ax,ay,az,bx,by,bz)
  %1104 = fmul fast float %1096, %1103
  %1105 = fmul fast float %1097, %1103
  %1106 = fmul fast float %1098, %1103
  %1107 = fsub fast float %1104, %1099
  %1108 = fsub fast float %1105, %1100
  %1109 = fsub fast float %1106, %1101
  %1110 = call float @dx.op.dot3.f32(i32 55, float %1033, float %1034, float %1035, float %1107, float %1108, float %1109)  ; Dot3(ax,ay,az,bx,by,bz)
  %1111 = fmul fast float %1103, %1103
  %1112 = fsub fast float %1102, %1111
  %1113 = fdiv fast float %1110, %1112
  %1114 = call float @dx.op.unary.f32(i32 7, float %1113)  ; Saturate(value)
  %1115 = fmul fast float %1114, %1099
  %1116 = fmul fast float %1114, %1100
  %1117 = fmul fast float %1114, %1101
  %1118 = fadd fast float %1115, %1033
  %1119 = fadd fast float %1116, %1034
  %1120 = fadd fast float %1117, %1035
  br label %1121

; <label>:1121                                    ; preds = %1090, %1086
  %1122 = phi float [ %1118, %1090 ], [ %1033, %1086 ]
  %1123 = phi float [ %1119, %1090 ], [ %1034, %1086 ]
  %1124 = phi float [ %1120, %1090 ], [ %1035, %1086 ]
  %1125 = call float @dx.op.dot3.f32(i32 55, float %1122, float %1123, float %1124, float %1122, float %1123, float %1124)  ; Dot3(ax,ay,az,bx,by,bz)
  %1126 = call float @dx.op.unary.f32(i32 25, float %1125)  ; Rsqrt(value)
  %1127 = fmul fast float %1126, %1122
  %1128 = fmul fast float %1126, %1123
  %1129 = fmul fast float %1126, %1124
  %1130 = call float @dx.op.binary.f32(i32 35, float %1041, float %1040)  ; FMax(a,b)
  %1131 = fmul fast float %1130, %1130
  %1132 = fmul fast float %1126, %342
  %1133 = fsub fast float 1.000000e+00, %1131
  %1134 = fmul fast float %1132, %1133
  %1135 = call float @dx.op.unary.f32(i32 7, float %1134)  ; Saturate(value)
  %1136 = fmul fast float %1126, %344
  %1137 = call float @dx.op.unary.f32(i32 7, float %1136)  ; Saturate(value)
  switch i32 %104, label %3729 [
    i32 1, label %1138
    i32 10, label %1138
    i32 11, label %1138
    i32 2, label %1341
    i32 3, label %1656
    i32 4, label %1878
    i32 5, label %2265
    i32 6, label %2576
    i32 7, label %2799
    i32 8, label %3120
    i32 9, label %3367
    i32 13, label %3571
  ]

; <label>:1138                                    ; preds = %1121, %1121, %1121
  %1139 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1140 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %1141 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1142 = fmul fast float %1141, 2.000000e+00
  %1143 = fadd fast float %1142, 2.000000e+00
  %1144 = call float @dx.op.unary.f32(i32 25, float %1143)  ; Rsqrt(value)
  %1145 = fadd fast float %1140, %1139
  %1146 = fmul fast float %1144, %1145
  %1147 = call float @dx.op.unary.f32(i32 7, float %1146)  ; Saturate(value)
  %1148 = fmul fast float %1144, %1141
  %1149 = fadd fast float %1148, %1144
  %1150 = call float @dx.op.unary.f32(i32 7, float %1149)  ; Saturate(value)
  %1151 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %1151, label %1152, label %1241

; <label>:1152                                    ; preds = %1138
  %1153 = fmul fast float %1135, %1135
  %1154 = fsub fast float 1.000000e+00, %1153
  %1155 = call float @dx.op.unary.f32(i32 24, float %1154)  ; Sqrt(value)
  %1156 = fmul fast float %1139, 2.000000e+00
  %1157 = fmul fast float %1156, %1140
  %1158 = fsub fast float %1157, %1141
  %1159 = fcmp fast ult float %1158, %1155
  br i1 %1159, label %1162, label %1160

; <label>:1160                                    ; preds = %1152
  %1161 = call float @dx.op.unary.f32(i32 6, float %1140)  ; FAbs(value)
  br label %1241

; <label>:1162                                    ; preds = %1152
  %1163 = fmul fast float %1158, %1158
  %1164 = fsub fast float 1.000000e+00, %1163
  %1165 = call float @dx.op.unary.f32(i32 25, float %1164)  ; Rsqrt(value)
  %1166 = fmul fast float %1165, %1135
  %1167 = fmul fast float %1158, %1139
  %1168 = fsub fast float %1140, %1167
  %1169 = fmul fast float %1166, %1168
  %1170 = fmul fast float %1140, %1140
  %1171 = fmul fast float %1170, 2.000000e+00
  %1172 = fadd fast float %1171, -1.000000e+00
  %1173 = fmul fast float %1158, %1141
  %1174 = fsub fast float %1172, %1173
  %1175 = fmul fast float %1166, %1174
  %1176 = fmul fast float %1139, %1139
  %1177 = fsub fast float 1.000000e+00, %1176
  %1178 = fsub fast float %1177, %1170
  %1179 = fmul fast float %1141, %1141
  %1180 = fsub fast float %1178, %1179
  %1181 = fmul fast float %1157, %1141
  %1182 = fadd fast float %1180, %1181
  %1183 = call float @dx.op.unary.f32(i32 7, float %1182)  ; Saturate(value)
  %1184 = call float @dx.op.unary.f32(i32 24, float %1183)  ; Sqrt(value)
  %1185 = fmul fast float %1184, %1166
  %1186 = fmul fast float %1140, 2.000000e+00
  %1187 = fmul fast float %1186, %1166
  %1188 = fmul fast float %1187, %1184
  %1189 = fmul fast float %1155, %1139
  %1190 = fadd fast float %1189, %1140
  %1191 = fadd fast float %1190, %1169
  %1192 = fmul fast float %1155, %1141
  %1193 = fadd fast float %1192, 1.000000e+00
  %1194 = fadd fast float %1193, %1175
  %1195 = fmul fast float %1185, %1194
  %1196 = fmul fast float %1191, %1194
  %1197 = fmul fast float %1188, %1191
  %1198 = fmul fast float %1195, 5.000000e-01
  %1199 = fmul fast float %1191, 2.500000e-01
  %1200 = fmul fast float %1199, %1188
  %1201 = fsub fast float %1200, %1198
  %1202 = fmul fast float %1201, %1196
  %1203 = fmul fast float %1195, %1195
  %1204 = fmul fast float %1195, 2.000000e+00
  %1205 = fsub fast float %1197, %1204
  %1206 = fmul fast float %1205, %1197
  %1207 = fadd fast float %1206, %1203
  %1208 = fmul fast float %1194, %1194
  %1209 = fmul fast float %1208, %1190
  %1210 = fadd fast float %1194, %1192
  %1211 = fmul fast float %1210, 5.000000e-01
  %1212 = fsub fast float -5.000000e-01, %1211
  %1213 = fmul fast float %1212, %1196
  %1214 = fadd fast float %1213, %1209
  %1215 = fmul fast float %1214, %1191
  %1216 = fadd fast float %1207, %1215
  %1217 = fmul fast float %1202, 2.000000e+00
  %1218 = fmul fast float %1216, %1216
  %1219 = fmul fast float %1202, %1202
  %1220 = fadd fast float %1218, %1219
  %1221 = fdiv fast float %1217, %1220
  %1222 = fmul fast float %1216, %1221
  %1223 = fmul fast float %1202, %1221
  %1224 = fsub fast float 1.000000e+00, %1223
  %1225 = fmul fast float %1224, %1169
  %1226 = fmul fast float %1222, %1185
  %1227 = fmul fast float %1224, %1175
  %1228 = fmul fast float %1222, %1188
  %1229 = fadd fast float %1228, %1192
  %1230 = fadd fast float %1229, %1227
  %1231 = fmul fast float %1230, 2.000000e+00
  %1232 = fadd fast float %1231, 2.000000e+00
  %1233 = call float @dx.op.unary.f32(i32 25, float %1232)  ; Rsqrt(value)
  %1234 = fadd fast float %1190, %1226
  %1235 = fadd fast float %1234, %1225
  %1236 = fmul fast float %1235, %1233
  %1237 = call float @dx.op.unary.f32(i32 7, float %1236)  ; Saturate(value)
  %1238 = fmul fast float %1230, %1233
  %1239 = fadd fast float %1238, %1233
  %1240 = call float @dx.op.unary.f32(i32 7, float %1239)  ; Saturate(value)
  br label %1241

; <label>:1241                                    ; preds = %1162, %1160, %1138
  %1242 = phi float [ %1161, %1160 ], [ %1240, %1162 ], [ %1150, %1138 ]
  %1243 = phi float [ 1.000000e+00, %1160 ], [ %1237, %1162 ], [ %1147, %1138 ]
  %1244 = call float @dx.op.unary.f32(i32 6, float %1140)  ; FAbs(value)
  %1245 = fadd fast float %1244, 0x3EE4F8B580000000
  %1246 = call float @dx.op.unary.f32(i32 7, float %1245)  ; Saturate(value)
  %1247 = fmul fast float %201, 0x3FD45F3060000000
  %1248 = fmul fast float %202, 0x3FD45F3060000000
  %1249 = fmul fast float %203, 0x3FD45F3060000000
  %1250 = fmul fast float %1088, %1089
  %1251 = fmul fast float %1247, %1250
  %1252 = fmul fast float %1248, %1250
  %1253 = fmul fast float %1249, %1250
  %1254 = fmul fast float %1041, %1041
  %1255 = fmul fast float %1254, %1254
  %1256 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %1256, label %1257, label %1264

; <label>:1257                                    ; preds = %1241
  %1258 = fmul fast float %1137, %1137
  %1259 = fmul fast float %1242, 0x400CCCCCC0000000
  %1260 = fadd fast float %1259, 0x3FD99999A0000000
  %1261 = fdiv fast float %1258, %1260
  %1262 = fadd fast float %1261, %1255
  %1263 = call float @dx.op.unary.f32(i32 7, float %1262)  ; Saturate(value)
  br label %1264

; <label>:1264                                    ; preds = %1257, %1241
  %1265 = phi float [ %1263, %1257 ], [ %1255, %1241 ]
  br i1 %1151, label %1266, label %1279

; <label>:1266                                    ; preds = %1264
  %1267 = fmul fast float %1135, 2.500000e-01
  %1268 = bitcast float %1265 to i32
  %1269 = ashr i32 %1268, 1
  %1270 = add nsw i32 %1269, 532487669
  %1271 = bitcast i32 %1270 to float
  %1272 = fmul fast float %1271, 3.000000e+00
  %1273 = fadd fast float %1272, %1135
  %1274 = fmul fast float %1267, %1273
  %1275 = fadd fast float %1242, 0x3F50624DE0000000
  %1276 = fdiv fast float %1274, %1275
  %1277 = fadd fast float %1276, %1265
  %1278 = fdiv fast float %1265, %1277
  br label %1279

; <label>:1279                                    ; preds = %1266, %1264
  %1280 = phi float [ %1277, %1266 ], [ %1265, %1264 ]
  %1281 = phi float [ %1278, %1266 ], [ 1.000000e+00, %1264 ]
  %1282 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %1282, label %1283, label %1302

; <label>:1283                                    ; preds = %1279
  %1284 = fsub fast float 0x3FF00068E0000000, %1071
  %1285 = fadd fast float %1071, 1.000000e+00
  %1286 = fdiv fast float %1284, %1285
  %1287 = call float @dx.op.unary.f32(i32 24, float %1286)  ; Sqrt(value)
  %1288 = fmul fast float %1287, 2.500000e-01
  %1289 = bitcast float %1280 to i32
  %1290 = ashr i32 %1289, 1
  %1291 = add nsw i32 %1290, 532487669
  %1292 = bitcast i32 %1291 to float
  %1293 = fmul fast float %1292, 3.000000e+00
  %1294 = fadd fast float %1287, %1293
  %1295 = fmul fast float %1288, %1294
  %1296 = fadd fast float %1242, 0x3F50624DE0000000
  %1297 = fdiv fast float %1295, %1296
  %1298 = fadd fast float %1297, %1280
  %1299 = fdiv fast float %1280, %1298
  %1300 = call float @dx.op.unary.f32(i32 24, float %1299)  ; Sqrt(value)
  %1301 = fmul fast float %1300, %1281
  br label %1302

; <label>:1302                                    ; preds = %1283, %1279
  %1303 = phi float [ %1301, %1283 ], [ %1281, %1279 ]
  %1304 = fmul fast float %1265, %1243
  %1305 = fsub fast float %1304, %1243
  %1306 = fmul fast float %1305, %1243
  %1307 = fadd fast float %1306, 1.000000e+00
  %1308 = fmul fast float %1307, %1307
  %1309 = fmul fast float %1308, 0x400921FB60000000
  %1310 = fdiv fast float %1265, %1309
  %1311 = fmul fast float %1310, %1303
  %1312 = call float @dx.op.unary.f32(i32 24, float %1265)  ; Sqrt(value)
  %1313 = fsub fast float 1.000000e+00, %1312
  %1314 = fmul fast float %1313, %1246
  %1315 = fadd fast float %1314, %1312
  %1316 = fmul fast float %1315, %1088
  %1317 = fmul fast float %1313, %1088
  %1318 = fadd fast float %1317, %1312
  %1319 = fmul fast float %1318, %1246
  %1320 = fadd fast float %1316, %1319
  %1321 = fdiv fast float 5.000000e-01, %1320
  %1322 = fsub fast float 1.000000e+00, %1242
  %1323 = fmul fast float %1322, %1322
  %1324 = fmul fast float %1323, %1323
  %1325 = fmul fast float %1324, %1322
  %1326 = fmul fast float %213, 5.000000e+01
  %1327 = call float @dx.op.unary.f32(i32 7, float %1326)  ; Saturate(value)
  %1328 = fmul fast float %1327, %1325
  %1329 = fsub fast float 1.000000e+00, %1325
  %1330 = fmul fast float %1329, %212
  %1331 = fmul fast float %1329, %213
  %1332 = fmul fast float %1329, %214
  %1333 = fadd fast float %1328, %1330
  %1334 = fadd fast float %1328, %1331
  %1335 = fadd fast float %1328, %1332
  %1336 = fmul fast float %1311, %1321
  %1337 = fmul fast float %1336, %1250
  %1338 = fmul fast float %1337, %1333
  %1339 = fmul fast float %1337, %1334
  %1340 = fmul fast float %1337, %1335
  br label %3729

; <label>:1341                                    ; preds = %1121
  %1342 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1343 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %1344 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1345 = fmul fast float %1344, 2.000000e+00
  %1346 = fadd fast float %1345, 2.000000e+00
  %1347 = call float @dx.op.unary.f32(i32 25, float %1346)  ; Rsqrt(value)
  %1348 = fadd fast float %1343, %1342
  %1349 = fmul fast float %1347, %1348
  %1350 = call float @dx.op.unary.f32(i32 7, float %1349)  ; Saturate(value)
  %1351 = fmul fast float %1347, %1344
  %1352 = fadd fast float %1351, %1347
  %1353 = call float @dx.op.unary.f32(i32 7, float %1352)  ; Saturate(value)
  %1354 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %1354, label %1355, label %1444

; <label>:1355                                    ; preds = %1341
  %1356 = fmul fast float %1135, %1135
  %1357 = fsub fast float 1.000000e+00, %1356
  %1358 = call float @dx.op.unary.f32(i32 24, float %1357)  ; Sqrt(value)
  %1359 = fmul fast float %1342, 2.000000e+00
  %1360 = fmul fast float %1359, %1343
  %1361 = fsub fast float %1360, %1344
  %1362 = fcmp fast ult float %1361, %1358
  br i1 %1362, label %1365, label %1363

; <label>:1363                                    ; preds = %1355
  %1364 = call float @dx.op.unary.f32(i32 6, float %1343)  ; FAbs(value)
  br label %1444

; <label>:1365                                    ; preds = %1355
  %1366 = fmul fast float %1361, %1361
  %1367 = fsub fast float 1.000000e+00, %1366
  %1368 = call float @dx.op.unary.f32(i32 25, float %1367)  ; Rsqrt(value)
  %1369 = fmul fast float %1368, %1135
  %1370 = fmul fast float %1361, %1342
  %1371 = fsub fast float %1343, %1370
  %1372 = fmul fast float %1369, %1371
  %1373 = fmul fast float %1343, %1343
  %1374 = fmul fast float %1373, 2.000000e+00
  %1375 = fadd fast float %1374, -1.000000e+00
  %1376 = fmul fast float %1361, %1344
  %1377 = fsub fast float %1375, %1376
  %1378 = fmul fast float %1369, %1377
  %1379 = fmul fast float %1342, %1342
  %1380 = fsub fast float 1.000000e+00, %1379
  %1381 = fsub fast float %1380, %1373
  %1382 = fmul fast float %1344, %1344
  %1383 = fsub fast float %1381, %1382
  %1384 = fmul fast float %1360, %1344
  %1385 = fadd fast float %1383, %1384
  %1386 = call float @dx.op.unary.f32(i32 7, float %1385)  ; Saturate(value)
  %1387 = call float @dx.op.unary.f32(i32 24, float %1386)  ; Sqrt(value)
  %1388 = fmul fast float %1387, %1369
  %1389 = fmul fast float %1343, 2.000000e+00
  %1390 = fmul fast float %1389, %1369
  %1391 = fmul fast float %1390, %1387
  %1392 = fmul fast float %1358, %1342
  %1393 = fadd fast float %1392, %1343
  %1394 = fadd fast float %1393, %1372
  %1395 = fmul fast float %1358, %1344
  %1396 = fadd fast float %1395, 1.000000e+00
  %1397 = fadd fast float %1396, %1378
  %1398 = fmul fast float %1388, %1397
  %1399 = fmul fast float %1394, %1397
  %1400 = fmul fast float %1391, %1394
  %1401 = fmul fast float %1398, 5.000000e-01
  %1402 = fmul fast float %1394, 2.500000e-01
  %1403 = fmul fast float %1402, %1391
  %1404 = fsub fast float %1403, %1401
  %1405 = fmul fast float %1404, %1399
  %1406 = fmul fast float %1398, %1398
  %1407 = fmul fast float %1398, 2.000000e+00
  %1408 = fsub fast float %1400, %1407
  %1409 = fmul fast float %1408, %1400
  %1410 = fadd fast float %1409, %1406
  %1411 = fmul fast float %1397, %1397
  %1412 = fmul fast float %1411, %1393
  %1413 = fadd fast float %1397, %1395
  %1414 = fmul fast float %1413, 5.000000e-01
  %1415 = fsub fast float -5.000000e-01, %1414
  %1416 = fmul fast float %1415, %1399
  %1417 = fadd fast float %1416, %1412
  %1418 = fmul fast float %1417, %1394
  %1419 = fadd fast float %1410, %1418
  %1420 = fmul fast float %1405, 2.000000e+00
  %1421 = fmul fast float %1419, %1419
  %1422 = fmul fast float %1405, %1405
  %1423 = fadd fast float %1421, %1422
  %1424 = fdiv fast float %1420, %1423
  %1425 = fmul fast float %1419, %1424
  %1426 = fmul fast float %1405, %1424
  %1427 = fsub fast float 1.000000e+00, %1426
  %1428 = fmul fast float %1427, %1372
  %1429 = fmul fast float %1425, %1388
  %1430 = fmul fast float %1427, %1378
  %1431 = fmul fast float %1425, %1391
  %1432 = fadd fast float %1431, %1395
  %1433 = fadd fast float %1432, %1430
  %1434 = fmul fast float %1433, 2.000000e+00
  %1435 = fadd fast float %1434, 2.000000e+00
  %1436 = call float @dx.op.unary.f32(i32 25, float %1435)  ; Rsqrt(value)
  %1437 = fadd fast float %1393, %1429
  %1438 = fadd fast float %1437, %1428
  %1439 = fmul fast float %1438, %1436
  %1440 = call float @dx.op.unary.f32(i32 7, float %1439)  ; Saturate(value)
  %1441 = fmul fast float %1433, %1436
  %1442 = fadd fast float %1441, %1436
  %1443 = call float @dx.op.unary.f32(i32 7, float %1442)  ; Saturate(value)
  br label %1444

; <label>:1444                                    ; preds = %1365, %1363, %1341
  %1445 = phi float [ %1364, %1363 ], [ %1443, %1365 ], [ %1353, %1341 ]
  %1446 = phi float [ 1.000000e+00, %1363 ], [ %1440, %1365 ], [ %1350, %1341 ]
  %1447 = call float @dx.op.unary.f32(i32 6, float %1343)  ; FAbs(value)
  %1448 = fadd fast float %1447, 0x3EE4F8B580000000
  %1449 = call float @dx.op.unary.f32(i32 7, float %1448)  ; Saturate(value)
  %1450 = fmul fast float %201, 0x3FD45F3060000000
  %1451 = fmul fast float %202, 0x3FD45F3060000000
  %1452 = fmul fast float %203, 0x3FD45F3060000000
  %1453 = fmul fast float %1088, %1089
  %1454 = fmul fast float %1450, %1453
  %1455 = fmul fast float %1451, %1453
  %1456 = fmul fast float %1452, %1453
  %1457 = fmul fast float %1041, %1041
  %1458 = fmul fast float %1457, %1457
  %1459 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %1459, label %1460, label %1467

; <label>:1460                                    ; preds = %1444
  %1461 = fmul fast float %1137, %1137
  %1462 = fmul fast float %1445, 0x400CCCCCC0000000
  %1463 = fadd fast float %1462, 0x3FD99999A0000000
  %1464 = fdiv fast float %1461, %1463
  %1465 = fadd fast float %1464, %1458
  %1466 = call float @dx.op.unary.f32(i32 7, float %1465)  ; Saturate(value)
  br label %1467

; <label>:1467                                    ; preds = %1460, %1444
  %1468 = phi float [ %1466, %1460 ], [ %1458, %1444 ]
  br i1 %1354, label %1469, label %1482

; <label>:1469                                    ; preds = %1467
  %1470 = fmul fast float %1135, 2.500000e-01
  %1471 = bitcast float %1468 to i32
  %1472 = ashr i32 %1471, 1
  %1473 = add nsw i32 %1472, 532487669
  %1474 = bitcast i32 %1473 to float
  %1475 = fmul fast float %1474, 3.000000e+00
  %1476 = fadd fast float %1475, %1135
  %1477 = fmul fast float %1470, %1476
  %1478 = fadd fast float %1445, 0x3F50624DE0000000
  %1479 = fdiv fast float %1477, %1478
  %1480 = fadd fast float %1479, %1468
  %1481 = fdiv fast float %1468, %1480
  br label %1482

; <label>:1482                                    ; preds = %1469, %1467
  %1483 = phi float [ %1480, %1469 ], [ %1468, %1467 ]
  %1484 = phi float [ %1481, %1469 ], [ 1.000000e+00, %1467 ]
  %1485 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %1485, label %1486, label %1505

; <label>:1486                                    ; preds = %1482
  %1487 = fsub fast float 0x3FF00068E0000000, %1071
  %1488 = fadd fast float %1071, 1.000000e+00
  %1489 = fdiv fast float %1487, %1488
  %1490 = call float @dx.op.unary.f32(i32 24, float %1489)  ; Sqrt(value)
  %1491 = fmul fast float %1490, 2.500000e-01
  %1492 = bitcast float %1483 to i32
  %1493 = ashr i32 %1492, 1
  %1494 = add nsw i32 %1493, 532487669
  %1495 = bitcast i32 %1494 to float
  %1496 = fmul fast float %1495, 3.000000e+00
  %1497 = fadd fast float %1490, %1496
  %1498 = fmul fast float %1491, %1497
  %1499 = fadd fast float %1445, 0x3F50624DE0000000
  %1500 = fdiv fast float %1498, %1499
  %1501 = fadd fast float %1500, %1483
  %1502 = fdiv fast float %1483, %1501
  %1503 = call float @dx.op.unary.f32(i32 24, float %1502)  ; Sqrt(value)
  %1504 = fmul fast float %1503, %1484
  br label %1505

; <label>:1505                                    ; preds = %1486, %1482
  %1506 = phi float [ %1504, %1486 ], [ %1484, %1482 ]
  %1507 = fmul fast float %1468, %1446
  %1508 = fsub fast float %1507, %1446
  %1509 = fmul fast float %1508, %1446
  %1510 = fadd fast float %1509, 1.000000e+00
  %1511 = fmul fast float %1510, %1510
  %1512 = fmul fast float %1511, 0x400921FB60000000
  %1513 = fdiv fast float %1468, %1512
  %1514 = fmul fast float %1513, %1506
  %1515 = call float @dx.op.unary.f32(i32 24, float %1468)  ; Sqrt(value)
  %1516 = fsub fast float 1.000000e+00, %1515
  %1517 = fmul fast float %1516, %1449
  %1518 = fadd fast float %1517, %1515
  %1519 = fmul fast float %1518, %1088
  %1520 = fmul fast float %1516, %1088
  %1521 = fadd fast float %1520, %1515
  %1522 = fmul fast float %1521, %1449
  %1523 = fadd fast float %1519, %1522
  %1524 = fdiv fast float 5.000000e-01, %1523
  %1525 = fsub fast float 1.000000e+00, %1445
  %1526 = fmul fast float %1525, %1525
  %1527 = fmul fast float %1526, %1526
  %1528 = fmul fast float %1527, %1525
  %1529 = fmul fast float %213, 5.000000e+01
  %1530 = call float @dx.op.unary.f32(i32 7, float %1529)  ; Saturate(value)
  %1531 = fmul fast float %1530, %1528
  %1532 = fsub fast float 1.000000e+00, %1528
  %1533 = fmul fast float %1532, %212
  %1534 = fmul fast float %1532, %213
  %1535 = fmul fast float %1532, %214
  %1536 = fadd fast float %1531, %1533
  %1537 = fadd fast float %1531, %1534
  %1538 = fadd fast float %1531, %1535
  %1539 = fmul fast float %1514, %1524
  %1540 = fmul fast float %1539, %1453
  %1541 = fmul fast float %1540, %1536
  %1542 = fmul fast float %1540, %1537
  %1543 = fmul fast float %1540, %1538
  %1544 = fmul fast float %121, %121
  %1545 = fmul fast float %122, %122
  %1546 = fmul fast float %123, %123
  %1547 = call float @dx.op.dot3.f32(i32 55, float %1127, float %1128, float %1129, float %318, float %319, float %320)  ; Dot3(ax,ay,az,bx,by,bz)
  %1548 = call float @dx.op.unary.f32(i32 7, float %1547)  ; Saturate(value)
  %1549 = call float @dx.op.unary.f32(i32 23, float %1548)  ; Log(value)
  %1550 = fmul fast float %1549, 1.200000e+01
  %1551 = call float @dx.op.unary.f32(i32 21, float %1550)  ; Exp(value)
  %1552 = fmul fast float %124, 0x4007333340000000
  %1553 = fsub fast float 3.000000e+00, %1552
  %1554 = fmul fast float %1551, %1553
  %1555 = fmul fast float %1342, 0x3FE5555560000000
  %1556 = fadd fast float %1555, 0x3FD5555560000000
  %1557 = call float @dx.op.unary.f32(i32 7, float %1556)  ; Saturate(value)
  %1558 = call float @dx.op.unary.f32(i32 23, float %1557)  ; Log(value)
  %1559 = fmul fast float %1558, 1.500000e+00
  %1560 = call float @dx.op.unary.f32(i32 21, float %1559)  ; Exp(value)
  %1561 = fmul fast float %1560, 0x3FFAAAAAA0000000
  %1562 = fadd fast float %1561, -1.000000e+00
  %1563 = fmul fast float %1562, %124
  %1564 = fadd fast float %1563, 1.000000e+00
  %1565 = fmul fast float %1564, 0x3FC45F3060000000
  %1566 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 284)  ; CBufferLoadLegacy(handle,regIndex)
  %1567 = extractvalue %dx.types.CBufRet.f32 %1566, 3
  %1568 = call float @dx.op.binary.f32(i32 35, float %1544, float 0x3D71979980000000)  ; FMax(a,b)
  %1569 = call float @dx.op.binary.f32(i32 35, float %1545, float 0x3D71979980000000)  ; FMax(a,b)
  %1570 = call float @dx.op.binary.f32(i32 35, float %1546, float 0x3D71979980000000)  ; FMax(a,b)
  %1571 = call float @dx.op.binary.f32(i32 36, float %1568, float 1.000000e+00)  ; FMin(a,b)
  %1572 = call float @dx.op.binary.f32(i32 36, float %1569, float 1.000000e+00)  ; FMin(a,b)
  %1573 = call float @dx.op.binary.f32(i32 36, float %1570, float 1.000000e+00)  ; FMin(a,b)
  %1574 = call float @dx.op.unary.f32(i32 23, float %1571)  ; Log(value)
  %1575 = call float @dx.op.unary.f32(i32 23, float %1572)  ; Log(value)
  %1576 = call float @dx.op.unary.f32(i32 23, float %1573)  ; Log(value)
  %1577 = fmul fast float %1574, 0xBFE62E4300000000
  %1578 = fmul fast float %1575, 0xBFE62E4300000000
  %1579 = fmul fast float %1576, 0xBFE62E4300000000
  %1580 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %1567)  ; FMax(a,b)
  %1581 = fdiv fast float %1577, %1580
  %1582 = fdiv fast float %1578, %1580
  %1583 = fdiv fast float %1579, %1580
  %1584 = fmul fast float %1581, 0xBFF7154760000000
  %1585 = fmul fast float %1582, 0xBFF7154760000000
  %1586 = fmul fast float %1583, 0xBFF7154760000000
  %1587 = call float @dx.op.unary.f32(i32 21, float %1584)  ; Exp(value)
  %1588 = call float @dx.op.unary.f32(i32 21, float %1585)  ; Exp(value)
  %1589 = call float @dx.op.unary.f32(i32 21, float %1586)  ; Exp(value)
  %1590 = fcmp fast olt float %1588, %1589
  br i1 %1590, label %1592, label %1591

; <label>:1591                                    ; preds = %1505
  br label %1592

; <label>:1592                                    ; preds = %1591, %1505
  %1593 = phi float [ %1588, %1591 ], [ %1589, %1505 ]
  %1594 = phi float [ %1589, %1591 ], [ %1588, %1505 ]
  %1595 = phi float [ 0.000000e+00, %1591 ], [ -1.000000e+00, %1505 ]
  %1596 = phi float [ 0xBFD5555560000000, %1591 ], [ 0x3FE5555560000000, %1505 ]
  %1597 = fcmp fast olt float %1587, %1593
  %1598 = select i1 %1597, float %1593, float %1587
  %1599 = select i1 %1597, float %1596, float %1595
  %1600 = select i1 %1597, float %1587, float %1593
  %1601 = call float @dx.op.binary.f32(i32 36, float %1600, float %1594)  ; FMin(a,b)
  %1602 = fsub fast float %1598, %1601
  %1603 = fsub fast float %1600, %1594
  %1604 = fmul fast float %1602, 6.000000e+00
  %1605 = fadd fast float %1604, 0x3DDB7CDFE0000000
  %1606 = fdiv fast float %1603, %1605
  %1607 = fadd fast float %1606, %1599
  %1608 = call float @dx.op.unary.f32(i32 6, float %1607)  ; FAbs(value)
  %1609 = fadd fast float %1598, 0x3DDB7CDFE0000000
  %1610 = fdiv fast float %1602, %1609
  %1611 = fcmp fast olt float %1545, %1546
  %1612 = select i1 %1611, float %1546, float %1545
  %1613 = fcmp fast olt float %1544, %1612
  %1614 = select i1 %1613, float %1612, float %1544
  %1615 = fmul fast float %1608, 6.000000e+00
  %1616 = fadd fast float %1615, -3.000000e+00
  %1617 = call float @dx.op.unary.f32(i32 6, float %1616)  ; FAbs(value)
  %1618 = fadd fast float %1617, -1.000000e+00
  %1619 = fadd fast float %1615, -2.000000e+00
  %1620 = call float @dx.op.unary.f32(i32 6, float %1619)  ; FAbs(value)
  %1621 = fsub fast float 2.000000e+00, %1620
  %1622 = fadd fast float %1615, -4.000000e+00
  %1623 = call float @dx.op.unary.f32(i32 6, float %1622)  ; FAbs(value)
  %1624 = fsub fast float 2.000000e+00, %1623
  %1625 = call float @dx.op.unary.f32(i32 7, float %1618)  ; Saturate(value)
  %1626 = call float @dx.op.unary.f32(i32 7, float %1621)  ; Saturate(value)
  %1627 = call float @dx.op.unary.f32(i32 7, float %1624)  ; Saturate(value)
  %1628 = fadd fast float %1625, -1.000000e+00
  %1629 = fadd fast float %1626, -1.000000e+00
  %1630 = fadd fast float %1627, -1.000000e+00
  %1631 = fmul fast float %1628, %1610
  %1632 = fmul fast float %1629, %1610
  %1633 = fmul fast float %1630, %1610
  %1634 = fadd fast float %1631, 1.000000e+00
  %1635 = fadd fast float %1632, 1.000000e+00
  %1636 = fadd fast float %1633, 1.000000e+00
  %1637 = fmul fast float %1634, %1614
  %1638 = fmul fast float %1635, %1614
  %1639 = fmul fast float %1636, %1614
  %1640 = fsub fast float 1.000000e+00, %1565
  %1641 = fmul fast float %1554, %1640
  %1642 = fadd fast float %1641, %1565
  %1643 = fmul fast float %1642, %1089
  %1644 = fsub fast float %1544, %1637
  %1645 = fsub fast float %1545, %1638
  %1646 = fsub fast float %1546, %1639
  %1647 = fmul fast float %1644, %672
  %1648 = fmul fast float %1645, %672
  %1649 = fmul fast float %1646, %672
  %1650 = fadd fast float %1647, %1637
  %1651 = fadd fast float %1648, %1638
  %1652 = fadd fast float %1649, %1639
  %1653 = fmul fast float %1650, %1643
  %1654 = fmul fast float %1651, %1643
  %1655 = fmul fast float %1652, %1643
  br label %3729

; <label>:1656                                    ; preds = %1121
  %1657 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1658 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %1659 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1660 = fmul fast float %1659, 2.000000e+00
  %1661 = fadd fast float %1660, 2.000000e+00
  %1662 = call float @dx.op.unary.f32(i32 25, float %1661)  ; Rsqrt(value)
  %1663 = fadd fast float %1658, %1657
  %1664 = fmul fast float %1662, %1663
  %1665 = call float @dx.op.unary.f32(i32 7, float %1664)  ; Saturate(value)
  %1666 = fmul fast float %1662, %1659
  %1667 = fadd fast float %1666, %1662
  %1668 = call float @dx.op.unary.f32(i32 7, float %1667)  ; Saturate(value)
  %1669 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %1669, label %1670, label %1759

; <label>:1670                                    ; preds = %1656
  %1671 = fmul fast float %1135, %1135
  %1672 = fsub fast float 1.000000e+00, %1671
  %1673 = call float @dx.op.unary.f32(i32 24, float %1672)  ; Sqrt(value)
  %1674 = fmul fast float %1657, 2.000000e+00
  %1675 = fmul fast float %1674, %1658
  %1676 = fsub fast float %1675, %1659
  %1677 = fcmp fast ult float %1676, %1673
  br i1 %1677, label %1680, label %1678

; <label>:1678                                    ; preds = %1670
  %1679 = call float @dx.op.unary.f32(i32 6, float %1658)  ; FAbs(value)
  br label %1759

; <label>:1680                                    ; preds = %1670
  %1681 = fmul fast float %1676, %1676
  %1682 = fsub fast float 1.000000e+00, %1681
  %1683 = call float @dx.op.unary.f32(i32 25, float %1682)  ; Rsqrt(value)
  %1684 = fmul fast float %1683, %1135
  %1685 = fmul fast float %1676, %1657
  %1686 = fsub fast float %1658, %1685
  %1687 = fmul fast float %1684, %1686
  %1688 = fmul fast float %1658, %1658
  %1689 = fmul fast float %1688, 2.000000e+00
  %1690 = fadd fast float %1689, -1.000000e+00
  %1691 = fmul fast float %1676, %1659
  %1692 = fsub fast float %1690, %1691
  %1693 = fmul fast float %1684, %1692
  %1694 = fmul fast float %1657, %1657
  %1695 = fsub fast float 1.000000e+00, %1694
  %1696 = fsub fast float %1695, %1688
  %1697 = fmul fast float %1659, %1659
  %1698 = fsub fast float %1696, %1697
  %1699 = fmul fast float %1675, %1659
  %1700 = fadd fast float %1698, %1699
  %1701 = call float @dx.op.unary.f32(i32 7, float %1700)  ; Saturate(value)
  %1702 = call float @dx.op.unary.f32(i32 24, float %1701)  ; Sqrt(value)
  %1703 = fmul fast float %1702, %1684
  %1704 = fmul fast float %1658, 2.000000e+00
  %1705 = fmul fast float %1704, %1684
  %1706 = fmul fast float %1705, %1702
  %1707 = fmul fast float %1673, %1657
  %1708 = fadd fast float %1707, %1658
  %1709 = fadd fast float %1708, %1687
  %1710 = fmul fast float %1673, %1659
  %1711 = fadd fast float %1710, 1.000000e+00
  %1712 = fadd fast float %1711, %1693
  %1713 = fmul fast float %1703, %1712
  %1714 = fmul fast float %1709, %1712
  %1715 = fmul fast float %1706, %1709
  %1716 = fmul fast float %1713, 5.000000e-01
  %1717 = fmul fast float %1709, 2.500000e-01
  %1718 = fmul fast float %1717, %1706
  %1719 = fsub fast float %1718, %1716
  %1720 = fmul fast float %1719, %1714
  %1721 = fmul fast float %1713, %1713
  %1722 = fmul fast float %1713, 2.000000e+00
  %1723 = fsub fast float %1715, %1722
  %1724 = fmul fast float %1723, %1715
  %1725 = fadd fast float %1724, %1721
  %1726 = fmul fast float %1712, %1712
  %1727 = fmul fast float %1726, %1708
  %1728 = fadd fast float %1712, %1710
  %1729 = fmul fast float %1728, 5.000000e-01
  %1730 = fsub fast float -5.000000e-01, %1729
  %1731 = fmul fast float %1730, %1714
  %1732 = fadd fast float %1731, %1727
  %1733 = fmul fast float %1732, %1709
  %1734 = fadd fast float %1725, %1733
  %1735 = fmul fast float %1720, 2.000000e+00
  %1736 = fmul fast float %1734, %1734
  %1737 = fmul fast float %1720, %1720
  %1738 = fadd fast float %1736, %1737
  %1739 = fdiv fast float %1735, %1738
  %1740 = fmul fast float %1734, %1739
  %1741 = fmul fast float %1720, %1739
  %1742 = fsub fast float 1.000000e+00, %1741
  %1743 = fmul fast float %1742, %1687
  %1744 = fmul fast float %1740, %1703
  %1745 = fmul fast float %1742, %1693
  %1746 = fmul fast float %1740, %1706
  %1747 = fadd fast float %1746, %1710
  %1748 = fadd fast float %1747, %1745
  %1749 = fmul fast float %1748, 2.000000e+00
  %1750 = fadd fast float %1749, 2.000000e+00
  %1751 = call float @dx.op.unary.f32(i32 25, float %1750)  ; Rsqrt(value)
  %1752 = fadd fast float %1708, %1744
  %1753 = fadd fast float %1752, %1743
  %1754 = fmul fast float %1753, %1751
  %1755 = call float @dx.op.unary.f32(i32 7, float %1754)  ; Saturate(value)
  %1756 = fmul fast float %1748, %1751
  %1757 = fadd fast float %1756, %1751
  %1758 = call float @dx.op.unary.f32(i32 7, float %1757)  ; Saturate(value)
  br label %1759

; <label>:1759                                    ; preds = %1680, %1678, %1656
  %1760 = phi float [ %1679, %1678 ], [ %1758, %1680 ], [ %1668, %1656 ]
  %1761 = phi float [ 1.000000e+00, %1678 ], [ %1755, %1680 ], [ %1665, %1656 ]
  %1762 = call float @dx.op.unary.f32(i32 6, float %1658)  ; FAbs(value)
  %1763 = fadd fast float %1762, 0x3EE4F8B580000000
  %1764 = call float @dx.op.unary.f32(i32 7, float %1763)  ; Saturate(value)
  %1765 = fmul fast float %201, 0x3FD45F3060000000
  %1766 = fmul fast float %202, 0x3FD45F3060000000
  %1767 = fmul fast float %203, 0x3FD45F3060000000
  %1768 = fmul fast float %1088, %1089
  %1769 = fmul fast float %1765, %1768
  %1770 = fmul fast float %1766, %1768
  %1771 = fmul fast float %1767, %1768
  %1772 = fmul fast float %1041, %1041
  %1773 = fmul fast float %1772, %1772
  %1774 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %1774, label %1775, label %1782

; <label>:1775                                    ; preds = %1759
  %1776 = fmul fast float %1137, %1137
  %1777 = fmul fast float %1760, 0x400CCCCCC0000000
  %1778 = fadd fast float %1777, 0x3FD99999A0000000
  %1779 = fdiv fast float %1776, %1778
  %1780 = fadd fast float %1779, %1773
  %1781 = call float @dx.op.unary.f32(i32 7, float %1780)  ; Saturate(value)
  br label %1782

; <label>:1782                                    ; preds = %1775, %1759
  %1783 = phi float [ %1781, %1775 ], [ %1773, %1759 ]
  br i1 %1669, label %1784, label %1797

; <label>:1784                                    ; preds = %1782
  %1785 = fmul fast float %1135, 2.500000e-01
  %1786 = bitcast float %1783 to i32
  %1787 = ashr i32 %1786, 1
  %1788 = add nsw i32 %1787, 532487669
  %1789 = bitcast i32 %1788 to float
  %1790 = fmul fast float %1789, 3.000000e+00
  %1791 = fadd fast float %1790, %1135
  %1792 = fmul fast float %1785, %1791
  %1793 = fadd fast float %1760, 0x3F50624DE0000000
  %1794 = fdiv fast float %1792, %1793
  %1795 = fadd fast float %1794, %1783
  %1796 = fdiv fast float %1783, %1795
  br label %1797

; <label>:1797                                    ; preds = %1784, %1782
  %1798 = phi float [ %1795, %1784 ], [ %1783, %1782 ]
  %1799 = phi float [ %1796, %1784 ], [ 1.000000e+00, %1782 ]
  %1800 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %1800, label %1801, label %1820

; <label>:1801                                    ; preds = %1797
  %1802 = fsub fast float 0x3FF00068E0000000, %1071
  %1803 = fadd fast float %1071, 1.000000e+00
  %1804 = fdiv fast float %1802, %1803
  %1805 = call float @dx.op.unary.f32(i32 24, float %1804)  ; Sqrt(value)
  %1806 = fmul fast float %1805, 2.500000e-01
  %1807 = bitcast float %1798 to i32
  %1808 = ashr i32 %1807, 1
  %1809 = add nsw i32 %1808, 532487669
  %1810 = bitcast i32 %1809 to float
  %1811 = fmul fast float %1810, 3.000000e+00
  %1812 = fadd fast float %1805, %1811
  %1813 = fmul fast float %1806, %1812
  %1814 = fadd fast float %1760, 0x3F50624DE0000000
  %1815 = fdiv fast float %1813, %1814
  %1816 = fadd fast float %1815, %1798
  %1817 = fdiv fast float %1798, %1816
  %1818 = call float @dx.op.unary.f32(i32 24, float %1817)  ; Sqrt(value)
  %1819 = fmul fast float %1818, %1799
  br label %1820

; <label>:1820                                    ; preds = %1801, %1797
  %1821 = phi float [ %1819, %1801 ], [ %1799, %1797 ]
  %1822 = fmul fast float %1783, %1761
  %1823 = fsub fast float %1822, %1761
  %1824 = fmul fast float %1823, %1761
  %1825 = fadd fast float %1824, 1.000000e+00
  %1826 = fmul fast float %1825, %1825
  %1827 = fmul fast float %1826, 0x400921FB60000000
  %1828 = fdiv fast float %1783, %1827
  %1829 = fmul fast float %1828, %1821
  %1830 = call float @dx.op.unary.f32(i32 24, float %1783)  ; Sqrt(value)
  %1831 = fsub fast float 1.000000e+00, %1830
  %1832 = fmul fast float %1831, %1764
  %1833 = fadd fast float %1832, %1830
  %1834 = fmul fast float %1833, %1088
  %1835 = fmul fast float %1831, %1088
  %1836 = fadd fast float %1835, %1830
  %1837 = fmul fast float %1836, %1764
  %1838 = fadd fast float %1834, %1837
  %1839 = fdiv fast float 5.000000e-01, %1838
  %1840 = fsub fast float 1.000000e+00, %1760
  %1841 = fmul fast float %1840, %1840
  %1842 = fmul fast float %1841, %1841
  %1843 = fmul fast float %1842, %1840
  %1844 = fmul fast float %213, 5.000000e+01
  %1845 = call float @dx.op.unary.f32(i32 7, float %1844)  ; Saturate(value)
  %1846 = fmul fast float %1845, %1843
  %1847 = fsub fast float 1.000000e+00, %1843
  %1848 = fmul fast float %1847, %212
  %1849 = fmul fast float %1847, %213
  %1850 = fmul fast float %1847, %214
  %1851 = fadd fast float %1846, %1848
  %1852 = fadd fast float %1846, %1849
  %1853 = fadd fast float %1846, %1850
  %1854 = fmul fast float %1829, %1839
  %1855 = fmul fast float %1854, %1768
  %1856 = fmul fast float %1855, %1851
  %1857 = fmul fast float %1855, %1852
  %1858 = fmul fast float %1855, %1853
  %1859 = fmul fast float %1657, 5.000000e-01
  %1860 = fadd fast float %1859, 5.000000e-01
  %1861 = call float @dx.op.unary.f32(i32 7, float %1860)  ; Saturate(value)
  %1862 = fsub fast float 1.000000e+00, %124
  %1863 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1864 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1865 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1863, %dx.types.Handle %1864, float %1861, float %1862, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1866 = extractvalue %dx.types.ResRet.f32 %1865, 0
  %1867 = extractvalue %dx.types.ResRet.f32 %1865, 1
  %1868 = extractvalue %dx.types.ResRet.f32 %1865, 2
  %1869 = fmul fast float %121, %121
  %1870 = fmul fast float %1869, %1089
  %1871 = fmul fast float %1870, %1866
  %1872 = fmul fast float %122, %122
  %1873 = fmul fast float %1872, %1089
  %1874 = fmul fast float %1873, %1867
  %1875 = fmul fast float %123, %123
  %1876 = fmul fast float %1875, %1089
  %1877 = fmul fast float %1876, %1868
  br label %3729

; <label>:1878                                    ; preds = %1121
  %1879 = call float @dx.op.binary.f32(i32 35, float %122, float 0x3F947AE140000000)  ; FMax(a,b)
  %1880 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1881 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %1882 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %1883 = fmul fast float %1882, 2.000000e+00
  %1884 = fadd fast float %1883, 2.000000e+00
  %1885 = call float @dx.op.unary.f32(i32 25, float %1884)  ; Rsqrt(value)
  %1886 = fadd fast float %1881, %1880
  %1887 = fmul fast float %1885, %1886
  %1888 = call float @dx.op.unary.f32(i32 7, float %1887)  ; Saturate(value)
  %1889 = fmul fast float %1885, %1882
  %1890 = fadd fast float %1889, %1885
  %1891 = call float @dx.op.unary.f32(i32 7, float %1890)  ; Saturate(value)
  %1892 = fmul fast float %1041, %1041
  %1893 = fsub fast float 1.000000e+00, %1892
  %1894 = fmul fast float %1879, %1879
  %1895 = fcmp fast ogt float %1893, 0.000000e+00
  %1896 = fsub fast float 1.000000e+00, %1894
  %1897 = fdiv fast float %1896, %1893
  %1898 = select i1 %1895, float %1897, float 0.000000e+00
  %1899 = fmul fast float %1898, %1135
  %1900 = call float @dx.op.unary.f32(i32 7, float %1899)  ; Saturate(value)
  %1901 = fcmp fast ogt float %1900, 0.000000e+00
  br i1 %1901, label %1902, label %1992

; <label>:1902                                    ; preds = %1878
  %1903 = fmul fast float %1900, %1900
  %1904 = fsub fast float 1.000000e+00, %1903
  %1905 = call float @dx.op.unary.f32(i32 24, float %1904)  ; Sqrt(value)
  %1906 = fmul fast float %1880, 2.000000e+00
  %1907 = fmul fast float %1906, %1881
  %1908 = fsub fast float %1907, %1882
  %1909 = fcmp fast ult float %1908, %1905
  br i1 %1909, label %1912, label %1910

; <label>:1910                                    ; preds = %1902
  %1911 = call float @dx.op.unary.f32(i32 6, float %1881)  ; FAbs(value)
  br label %1992

; <label>:1912                                    ; preds = %1902
  %1913 = fmul fast float %1908, %1908
  %1914 = fsub fast float 1.000000e+00, %1913
  %1915 = call float @dx.op.unary.f32(i32 25, float %1914)  ; Rsqrt(value)
  %1916 = fmul fast float %1915, %1900
  %1917 = fmul fast float %1908, %1880
  %1918 = fsub fast float %1881, %1917
  %1919 = fmul fast float %1916, %1918
  %1920 = fmul fast float %1881, %1881
  %1921 = fmul fast float %1920, 2.000000e+00
  %1922 = fadd fast float %1921, -1.000000e+00
  %1923 = fmul fast float %1908, %1882
  %1924 = fsub fast float %1922, %1923
  %1925 = fmul fast float %1916, %1924
  %1926 = fmul fast float %1880, %1880
  %1927 = fsub fast float 1.000000e+00, %1926
  %1928 = fsub fast float %1927, %1920
  %1929 = fmul fast float %1882, %1882
  %1930 = fsub fast float %1928, %1929
  %1931 = fmul fast float %1907, %1882
  %1932 = fadd fast float %1930, %1931
  %1933 = call float @dx.op.unary.f32(i32 7, float %1932)  ; Saturate(value)
  %1934 = call float @dx.op.unary.f32(i32 24, float %1933)  ; Sqrt(value)
  %1935 = fmul fast float %1934, %1916
  %1936 = fmul fast float %1881, 2.000000e+00
  %1937 = fmul fast float %1936, %1916
  %1938 = fmul fast float %1937, %1934
  %1939 = fmul fast float %1905, %1880
  %1940 = fadd fast float %1939, %1881
  %1941 = fadd fast float %1940, %1919
  %1942 = fmul fast float %1905, %1882
  %1943 = fadd fast float %1942, 1.000000e+00
  %1944 = fadd fast float %1943, %1925
  %1945 = fmul fast float %1935, %1944
  %1946 = fmul fast float %1941, %1944
  %1947 = fmul fast float %1938, %1941
  %1948 = fmul fast float %1945, 5.000000e-01
  %1949 = fmul fast float %1941, 2.500000e-01
  %1950 = fmul fast float %1949, %1938
  %1951 = fsub fast float %1950, %1948
  %1952 = fmul fast float %1951, %1946
  %1953 = fmul fast float %1945, %1945
  %1954 = fmul fast float %1945, 2.000000e+00
  %1955 = fsub fast float %1947, %1954
  %1956 = fmul fast float %1955, %1947
  %1957 = fadd fast float %1956, %1953
  %1958 = fmul fast float %1944, %1944
  %1959 = fmul fast float %1958, %1940
  %1960 = fadd fast float %1944, %1942
  %1961 = fmul fast float %1960, 5.000000e-01
  %1962 = fsub fast float -5.000000e-01, %1961
  %1963 = fmul fast float %1962, %1946
  %1964 = fadd fast float %1963, %1959
  %1965 = fmul fast float %1964, %1941
  %1966 = fadd fast float %1957, %1965
  %1967 = fmul fast float %1952, 2.000000e+00
  %1968 = fmul fast float %1966, %1966
  %1969 = fmul fast float %1952, %1952
  %1970 = fadd fast float %1968, %1969
  %1971 = fdiv fast float %1967, %1970
  %1972 = fmul fast float %1966, %1971
  %1973 = fmul fast float %1952, %1971
  %1974 = fsub fast float 1.000000e+00, %1973
  %1975 = fmul fast float %1974, %1919
  %1976 = fmul fast float %1972, %1935
  %1977 = fmul fast float %1974, %1925
  %1978 = fmul fast float %1972, %1938
  %1979 = fadd fast float %1976, %1939
  %1980 = fadd fast float %1979, %1975
  %1981 = fadd fast float %1978, %1942
  %1982 = fadd fast float %1981, %1977
  %1983 = fmul fast float %1982, 2.000000e+00
  %1984 = fadd fast float %1983, 2.000000e+00
  %1985 = call float @dx.op.unary.f32(i32 25, float %1984)  ; Rsqrt(value)
  %1986 = fadd fast float %1980, %1881
  %1987 = fmul fast float %1986, %1985
  %1988 = call float @dx.op.unary.f32(i32 7, float %1987)  ; Saturate(value)
  %1989 = fmul fast float %1982, %1985
  %1990 = fadd fast float %1989, %1985
  %1991 = call float @dx.op.unary.f32(i32 7, float %1990)  ; Saturate(value)
  br label %1992

; <label>:1992                                    ; preds = %1912, %1910, %1878
  %1993 = phi float [ %1911, %1910 ], [ %1991, %1912 ], [ %1891, %1878 ]
  %1994 = phi float [ 1.000000e+00, %1910 ], [ %1988, %1912 ], [ %1888, %1878 ]
  %1995 = phi float [ %1880, %1910 ], [ %1980, %1912 ], [ %1880, %1878 ]
  %1996 = call float @dx.op.unary.f32(i32 6, float %1881)  ; FAbs(value)
  %1997 = fadd fast float %1996, 0x3EE4F8B580000000
  %1998 = call float @dx.op.unary.f32(i32 7, float %1997)  ; Saturate(value)
  %1999 = fsub fast float 1.000000e+00, %1993
  %2000 = fmul fast float %1999, %1999
  %2001 = fmul fast float %2000, %2000
  %2002 = fmul fast float %2001, %1999
  %2003 = fsub fast float 1.000000e+00, %2002
  %2004 = fmul fast float %2003, 0x3FA47AE140000000
  %2005 = fadd fast float %2004, %2002
  %2006 = fmul fast float %1894, %1894
  %2007 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %2007, label %2008, label %2015

; <label>:2008                                    ; preds = %1992
  %2009 = fmul fast float %1137, %1137
  %2010 = fmul fast float %1993, 0x400CCCCCC0000000
  %2011 = fadd fast float %2010, 0x3FD99999A0000000
  %2012 = fdiv fast float %2009, %2011
  %2013 = fadd fast float %2012, %2006
  %2014 = call float @dx.op.unary.f32(i32 7, float %2013)  ; Saturate(value)
  br label %2015

; <label>:2015                                    ; preds = %2008, %1992
  %2016 = phi float [ %2014, %2008 ], [ %2006, %1992 ]
  br i1 %1901, label %2017, label %2030

; <label>:2017                                    ; preds = %2015
  %2018 = fmul fast float %1900, 2.500000e-01
  %2019 = bitcast float %2016 to i32
  %2020 = ashr i32 %2019, 1
  %2021 = add nsw i32 %2020, 532487669
  %2022 = bitcast i32 %2021 to float
  %2023 = fmul fast float %2022, 3.000000e+00
  %2024 = fadd fast float %2023, %1900
  %2025 = fmul fast float %2018, %2024
  %2026 = fadd fast float %1993, 0x3F50624DE0000000
  %2027 = fdiv fast float %2025, %2026
  %2028 = fadd fast float %2027, %2016
  %2029 = fdiv fast float %2016, %2028
  br label %2030

; <label>:2030                                    ; preds = %2017, %2015
  %2031 = phi float [ %2028, %2017 ], [ %2016, %2015 ]
  %2032 = phi float [ %2029, %2017 ], [ 1.000000e+00, %2015 ]
  %2033 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %2033, label %2034, label %2053

; <label>:2034                                    ; preds = %2030
  %2035 = fsub fast float 0x3FF00068E0000000, %1071
  %2036 = fadd fast float %1071, 1.000000e+00
  %2037 = fdiv fast float %2035, %2036
  %2038 = call float @dx.op.unary.f32(i32 24, float %2037)  ; Sqrt(value)
  %2039 = fmul fast float %2038, 2.500000e-01
  %2040 = bitcast float %2031 to i32
  %2041 = ashr i32 %2040, 1
  %2042 = add nsw i32 %2041, 532487669
  %2043 = bitcast i32 %2042 to float
  %2044 = fmul fast float %2043, 3.000000e+00
  %2045 = fadd fast float %2038, %2044
  %2046 = fmul fast float %2039, %2045
  %2047 = fadd fast float %1993, 0x3F50624DE0000000
  %2048 = fdiv fast float %2046, %2047
  %2049 = fadd fast float %2048, %2031
  %2050 = fdiv fast float %2031, %2049
  %2051 = call float @dx.op.unary.f32(i32 24, float %2050)  ; Sqrt(value)
  %2052 = fmul fast float %2051, %2032
  br label %2053

; <label>:2053                                    ; preds = %2034, %2030
  %2054 = phi float [ %2052, %2034 ], [ %2032, %2030 ]
  %2055 = call float @dx.op.unary.f32(i32 24, float %2016)  ; Sqrt(value)
  %2056 = fsub fast float 1.000000e+00, %2055
  %2057 = fmul fast float %2056, %1998
  %2058 = fadd fast float %2057, %2055
  %2059 = fmul fast float %2058, %1088
  %2060 = fmul fast float %2056, %1088
  %2061 = fadd fast float %2060, %2055
  %2062 = fmul fast float %2061, %1998
  %2063 = fadd fast float %2059, %2062
  %2064 = fdiv fast float 5.000000e-01, %2063
  %2065 = fmul fast float %2016, %1994
  %2066 = fsub fast float %2065, %1994
  %2067 = fmul fast float %2066, %1994
  %2068 = fadd fast float %2067, 1.000000e+00
  %2069 = fmul fast float %2068, %2068
  %2070 = fmul fast float %2069, 0x400921FB60000000
  %2071 = fdiv fast float %2016, %2070
  %2072 = fmul fast float %1088, %1089
  %2073 = fmul fast float %2072, %2005
  %2074 = fmul fast float %2073, %2054
  %2075 = fmul fast float %2074, %2064
  %2076 = fmul fast float %2075, %2071
  %2077 = fmul fast float %2076, %121
  %2078 = fsub fast float 1.000000e+00, %2005
  %2079 = fmul fast float %2078, %2078
  %2080 = fmul fast float %1993, 0x3FCC28F5C0000000
  %2081 = fsub fast float 0x3FE428F5C0000000, %2080
  %2082 = fmul fast float %2081, %1993
  %2083 = fadd fast float %2082, 0xBFE7D70A40000000
  %2084 = fmul fast float %2083, %1994
  %2085 = fmul fast float %1998, 0x3FE5555560000000
  %2086 = fsub fast float %2085, %2084
  %2087 = call float @dx.op.binary.f32(i32 35, float %2086, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2088 = call float @dx.op.binary.f32(i32 36, float %2087, float 1.000000e+00)  ; FMin(a,b)
  %2089 = fmul fast float %1993, 0x3FE5555560000000
  %2090 = fsub fast float %2089, %2083
  %2091 = call float @dx.op.unary.f32(i32 7, float %2090)  ; Saturate(value)
  %2092 = fcmp fast ogt float %144, 0.000000e+00
  br i1 %2092, label %2093, label %2130

; <label>:2093                                    ; preds = %2053
  %2094 = fmul fast float %1995, 0x3FE5555560000000
  %2095 = fsub fast float %2094, %2084
  %2096 = call float @dx.op.binary.f32(i32 35, float %2095, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2097 = call float @dx.op.binary.f32(i32 36, float %2096, float 1.000000e+00)  ; FMin(a,b)
  %2098 = fdiv fast float 1.000000e+00, %2088
  %2099 = fdiv fast float 1.000000e+00, %2097
  %2100 = fmul fast float %585, 0x3FD45F3060000000
  %2101 = fmul fast float %586, 0x3FD45F3060000000
  %2102 = fmul fast float %587, 0x3FD45F3060000000
  %2103 = call float @dx.op.binary.f32(i32 35, float %2100, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2104 = call float @dx.op.binary.f32(i32 35, float %2101, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2105 = call float @dx.op.binary.f32(i32 35, float %2102, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2106 = call float @dx.op.unary.f32(i32 23, float %2103)  ; Log(value)
  %2107 = call float @dx.op.unary.f32(i32 23, float %2104)  ; Log(value)
  %2108 = call float @dx.op.unary.f32(i32 23, float %2105)  ; Log(value)
  %2109 = fadd fast float %2098, -2.000000e+00
  %2110 = fadd fast float %2109, %2099
  %2111 = call float @dx.op.binary.f32(i32 35, float %2110, float 0.000000e+00)  ; FMax(a,b)
  %2112 = fmul fast float %2106, 5.000000e-01
  %2113 = fmul fast float %2112, %2111
  %2114 = fmul fast float %2107, 5.000000e-01
  %2115 = fmul fast float %2114, %2111
  %2116 = fmul fast float %2108, 5.000000e-01
  %2117 = fmul fast float %2116, %2111
  %2118 = call float @dx.op.unary.f32(i32 21, float %2113)  ; Exp(value)
  %2119 = call float @dx.op.unary.f32(i32 21, float %2115)  ; Exp(value)
  %2120 = call float @dx.op.unary.f32(i32 21, float %2117)  ; Exp(value)
  %2121 = fadd fast float %2118, -1.000000e+00
  %2122 = fadd fast float %2119, -1.000000e+00
  %2123 = fadd fast float %2120, -1.000000e+00
  %2124 = fmul fast float %2121, %144
  %2125 = fmul fast float %2122, %144
  %2126 = fmul fast float %2123, %144
  %2127 = fadd fast float %2124, 1.000000e+00
  %2128 = fadd fast float %2125, 1.000000e+00
  %2129 = fadd fast float %2126, 1.000000e+00
  br label %2130

; <label>:2130                                    ; preds = %2093, %2053
  %2131 = phi float [ %2127, %2093 ], [ 1.000000e+00, %2053 ]
  %2132 = phi float [ %2128, %2093 ], [ 1.000000e+00, %2053 ]
  %2133 = phi float [ %2129, %2093 ], [ 1.000000e+00, %2053 ]
  %2134 = fmul fast float %201, 0x3FD45F3060000000
  %2135 = fmul fast float %202, 0x3FD45F3060000000
  %2136 = fmul fast float %203, 0x3FD45F3060000000
  %2137 = fmul fast float %2134, %2072
  %2138 = fmul fast float %2135, %2072
  %2139 = fmul fast float %2136, %2072
  %2140 = fmul fast float %2079, %2137
  %2141 = fmul fast float %2140, %2131
  %2142 = fmul fast float %2079, %2138
  %2143 = fmul fast float %2142, %2132
  %2144 = fmul fast float %2079, %2139
  %2145 = fmul fast float %2144, %2133
  %2146 = fsub fast float %2141, %2137
  %2147 = fsub fast float %2143, %2138
  %2148 = fsub fast float %2145, %2139
  %2149 = fmul fast float %2146, %121
  %2150 = fmul fast float %2147, %121
  %2151 = fmul fast float %2148, %121
  %2152 = fadd fast float %2149, %2137
  %2153 = fadd fast float %2150, %2138
  %2154 = fadd fast float %2151, %2139
  %2155 = fmul fast float %1892, %1892
  %2156 = call float @dx.op.unary.f32(i32 24, float %2155)  ; Sqrt(value)
  %2157 = fsub fast float 1.000000e+00, %2156
  %2158 = fmul fast float %2157, %2088
  %2159 = fadd fast float %2158, %2156
  %2160 = fmul fast float %2159, %1088
  %2161 = fmul fast float %2157, %1088
  %2162 = fadd fast float %2161, %2156
  %2163 = fmul fast float %2162, %2088
  %2164 = fadd fast float %2160, %2163
  %2165 = fdiv fast float 5.000000e-01, %2164
  %2166 = fmul fast float %1994, %2155
  %2167 = fsub fast float %2166, %1994
  %2168 = fmul fast float %2167, %1994
  %2169 = fadd fast float %2168, 1.000000e+00
  %2170 = fmul fast float %2169, %2169
  %2171 = fmul fast float %2170, 0x400921FB60000000
  %2172 = fdiv fast float %2155, %2171
  %2173 = fsub fast float 1.000000e+00, %2091
  %2174 = fmul fast float %2173, %2173
  %2175 = fmul fast float %2174, %2174
  %2176 = fmul fast float %2175, %2173
  %2177 = fmul fast float %213, 5.000000e+01
  %2178 = call float @dx.op.unary.f32(i32 7, float %2177)  ; Saturate(value)
  %2179 = fmul fast float %2178, %2176
  %2180 = fsub fast float 1.000000e+00, %2176
  %2181 = fmul fast float %2180, %212
  %2182 = fmul fast float %2180, %213
  %2183 = fmul fast float %2180, %214
  %2184 = fadd fast float %2179, %2181
  %2185 = fadd fast float %2179, %2182
  %2186 = fadd fast float %2179, %2183
  %2187 = fmul fast float %2178, %2002
  %2188 = fmul fast float %2003, %212
  %2189 = fmul fast float %2003, %213
  %2190 = fmul fast float %2003, %214
  %2191 = fadd fast float %2187, %2188
  %2192 = fadd fast float %2187, %2189
  %2193 = fadd fast float %2187, %2190
  br i1 %2007, label %2194, label %2201

; <label>:2194                                    ; preds = %2130
  %2195 = fmul fast float %1137, %1137
  %2196 = fmul fast float %1993, 0x400CCCCCC0000000
  %2197 = fadd fast float %2196, 0x3FD99999A0000000
  %2198 = fdiv fast float %2195, %2197
  %2199 = fadd fast float %2198, %2155
  %2200 = call float @dx.op.unary.f32(i32 7, float %2199)  ; Saturate(value)
  br label %2201

; <label>:2201                                    ; preds = %2194, %2130
  %2202 = phi float [ %2200, %2194 ], [ %2155, %2130 ]
  %2203 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %2203, label %2204, label %2217

; <label>:2204                                    ; preds = %2201
  %2205 = fmul fast float %1135, 2.500000e-01
  %2206 = bitcast float %2202 to i32
  %2207 = ashr i32 %2206, 1
  %2208 = add nsw i32 %2207, 532487669
  %2209 = bitcast i32 %2208 to float
  %2210 = fmul fast float %2209, 3.000000e+00
  %2211 = fadd fast float %2210, %1135
  %2212 = fmul fast float %2205, %2211
  %2213 = fadd fast float %1993, 0x3F50624DE0000000
  %2214 = fdiv fast float %2212, %2213
  %2215 = fadd fast float %2214, %2202
  %2216 = fdiv fast float %2202, %2215
  br label %2217

; <label>:2217                                    ; preds = %2204, %2201
  %2218 = phi float [ %2215, %2204 ], [ %2202, %2201 ]
  %2219 = phi float [ %2216, %2204 ], [ 1.000000e+00, %2201 ]
  br i1 %2033, label %2220, label %2239

; <label>:2220                                    ; preds = %2217
  %2221 = fsub fast float 0x3FF00068E0000000, %1071
  %2222 = fadd fast float %1071, 1.000000e+00
  %2223 = fdiv fast float %2221, %2222
  %2224 = call float @dx.op.unary.f32(i32 24, float %2223)  ; Sqrt(value)
  %2225 = fmul fast float %2224, 2.500000e-01
  %2226 = bitcast float %2218 to i32
  %2227 = ashr i32 %2226, 1
  %2228 = add nsw i32 %2227, 532487669
  %2229 = bitcast i32 %2228 to float
  %2230 = fmul fast float %2229, 3.000000e+00
  %2231 = fadd fast float %2224, %2230
  %2232 = fmul fast float %2225, %2231
  %2233 = fadd fast float %1993, 0x3F50624DE0000000
  %2234 = fdiv fast float %2232, %2233
  %2235 = fadd fast float %2234, %2218
  %2236 = fdiv fast float %2218, %2235
  %2237 = call float @dx.op.unary.f32(i32 24, float %2236)  ; Sqrt(value)
  %2238 = fmul fast float %2237, %2219
  br label %2239

; <label>:2239                                    ; preds = %2220, %2217
  %2240 = phi float [ %2238, %2220 ], [ %2219, %2217 ]
  %2241 = fmul fast float %2072, %2165
  %2242 = fmul fast float %2241, %2172
  %2243 = fmul fast float %2242, %2240
  %2244 = fmul fast float %2131, %2079
  %2245 = fmul fast float %2132, %2079
  %2246 = fmul fast float %2133, %2079
  %2247 = fmul fast float %2244, %2184
  %2248 = fmul fast float %2245, %2185
  %2249 = fmul fast float %2246, %2186
  %2250 = fsub fast float %2247, %2191
  %2251 = fsub fast float %2248, %2192
  %2252 = fsub fast float %2249, %2193
  %2253 = fmul fast float %2250, %121
  %2254 = fmul fast float %2251, %121
  %2255 = fmul fast float %2252, %121
  %2256 = fadd fast float %2253, %2191
  %2257 = fadd fast float %2254, %2192
  %2258 = fadd fast float %2255, %2193
  %2259 = fmul fast float %2243, %2256
  %2260 = fmul fast float %2243, %2257
  %2261 = fmul fast float %2243, %2258
  %2262 = fadd fast float %2259, %2077
  %2263 = fadd fast float %2260, %2077
  %2264 = fadd fast float %2261, %2077
  br label %3729

; <label>:2265                                    ; preds = %1121
  %2266 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %2267 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %2268 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %2269 = fmul fast float %2268, 2.000000e+00
  %2270 = fadd fast float %2269, 2.000000e+00
  %2271 = call float @dx.op.unary.f32(i32 25, float %2270)  ; Rsqrt(value)
  %2272 = fadd fast float %2267, %2266
  %2273 = fmul fast float %2271, %2272
  %2274 = call float @dx.op.unary.f32(i32 7, float %2273)  ; Saturate(value)
  %2275 = fmul fast float %2271, %2268
  %2276 = fadd fast float %2275, %2271
  %2277 = call float @dx.op.unary.f32(i32 7, float %2276)  ; Saturate(value)
  %2278 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %2278, label %2279, label %2368

; <label>:2279                                    ; preds = %2265
  %2280 = fmul fast float %1135, %1135
  %2281 = fsub fast float 1.000000e+00, %2280
  %2282 = call float @dx.op.unary.f32(i32 24, float %2281)  ; Sqrt(value)
  %2283 = fmul fast float %2266, 2.000000e+00
  %2284 = fmul fast float %2283, %2267
  %2285 = fsub fast float %2284, %2268
  %2286 = fcmp fast ult float %2285, %2282
  br i1 %2286, label %2289, label %2287

; <label>:2287                                    ; preds = %2279
  %2288 = call float @dx.op.unary.f32(i32 6, float %2267)  ; FAbs(value)
  br label %2368

; <label>:2289                                    ; preds = %2279
  %2290 = fmul fast float %2285, %2285
  %2291 = fsub fast float 1.000000e+00, %2290
  %2292 = call float @dx.op.unary.f32(i32 25, float %2291)  ; Rsqrt(value)
  %2293 = fmul fast float %2292, %1135
  %2294 = fmul fast float %2285, %2266
  %2295 = fsub fast float %2267, %2294
  %2296 = fmul fast float %2293, %2295
  %2297 = fmul fast float %2267, %2267
  %2298 = fmul fast float %2297, 2.000000e+00
  %2299 = fadd fast float %2298, -1.000000e+00
  %2300 = fmul fast float %2285, %2268
  %2301 = fsub fast float %2299, %2300
  %2302 = fmul fast float %2293, %2301
  %2303 = fmul fast float %2266, %2266
  %2304 = fsub fast float 1.000000e+00, %2303
  %2305 = fsub fast float %2304, %2297
  %2306 = fmul fast float %2268, %2268
  %2307 = fsub fast float %2305, %2306
  %2308 = fmul fast float %2284, %2268
  %2309 = fadd fast float %2307, %2308
  %2310 = call float @dx.op.unary.f32(i32 7, float %2309)  ; Saturate(value)
  %2311 = call float @dx.op.unary.f32(i32 24, float %2310)  ; Sqrt(value)
  %2312 = fmul fast float %2311, %2293
  %2313 = fmul fast float %2267, 2.000000e+00
  %2314 = fmul fast float %2313, %2293
  %2315 = fmul fast float %2314, %2311
  %2316 = fmul fast float %2282, %2266
  %2317 = fadd fast float %2316, %2267
  %2318 = fadd fast float %2317, %2296
  %2319 = fmul fast float %2282, %2268
  %2320 = fadd fast float %2319, 1.000000e+00
  %2321 = fadd fast float %2320, %2302
  %2322 = fmul fast float %2312, %2321
  %2323 = fmul fast float %2318, %2321
  %2324 = fmul fast float %2315, %2318
  %2325 = fmul fast float %2322, 5.000000e-01
  %2326 = fmul fast float %2318, 2.500000e-01
  %2327 = fmul fast float %2326, %2315
  %2328 = fsub fast float %2327, %2325
  %2329 = fmul fast float %2328, %2323
  %2330 = fmul fast float %2322, %2322
  %2331 = fmul fast float %2322, 2.000000e+00
  %2332 = fsub fast float %2324, %2331
  %2333 = fmul fast float %2332, %2324
  %2334 = fadd fast float %2333, %2330
  %2335 = fmul fast float %2321, %2321
  %2336 = fmul fast float %2335, %2317
  %2337 = fadd fast float %2321, %2319
  %2338 = fmul fast float %2337, 5.000000e-01
  %2339 = fsub fast float -5.000000e-01, %2338
  %2340 = fmul fast float %2339, %2323
  %2341 = fadd fast float %2340, %2336
  %2342 = fmul fast float %2341, %2318
  %2343 = fadd fast float %2334, %2342
  %2344 = fmul fast float %2329, 2.000000e+00
  %2345 = fmul fast float %2343, %2343
  %2346 = fmul fast float %2329, %2329
  %2347 = fadd fast float %2345, %2346
  %2348 = fdiv fast float %2344, %2347
  %2349 = fmul fast float %2343, %2348
  %2350 = fmul fast float %2329, %2348
  %2351 = fsub fast float 1.000000e+00, %2350
  %2352 = fmul fast float %2351, %2296
  %2353 = fmul fast float %2349, %2312
  %2354 = fmul fast float %2351, %2302
  %2355 = fmul fast float %2349, %2315
  %2356 = fadd fast float %2355, %2319
  %2357 = fadd fast float %2356, %2354
  %2358 = fmul fast float %2357, 2.000000e+00
  %2359 = fadd fast float %2358, 2.000000e+00
  %2360 = call float @dx.op.unary.f32(i32 25, float %2359)  ; Rsqrt(value)
  %2361 = fadd fast float %2317, %2353
  %2362 = fadd fast float %2361, %2352
  %2363 = fmul fast float %2362, %2360
  %2364 = call float @dx.op.unary.f32(i32 7, float %2363)  ; Saturate(value)
  %2365 = fmul fast float %2357, %2360
  %2366 = fadd fast float %2365, %2360
  %2367 = call float @dx.op.unary.f32(i32 7, float %2366)  ; Saturate(value)
  br label %2368

; <label>:2368                                    ; preds = %2289, %2287, %2265
  %2369 = phi float [ %2288, %2287 ], [ %2367, %2289 ], [ %2277, %2265 ]
  %2370 = phi float [ 1.000000e+00, %2287 ], [ %2364, %2289 ], [ %2274, %2265 ]
  %2371 = call float @dx.op.unary.f32(i32 6, float %2267)  ; FAbs(value)
  %2372 = fadd fast float %2371, 0x3EE4F8B580000000
  %2373 = call float @dx.op.unary.f32(i32 7, float %2372)  ; Saturate(value)
  %2374 = fmul fast float %121, 2.550000e+02
  %2375 = fadd fast float %2374, 5.000000e-01
  %2376 = fptoui float %2375 to i32
  %2377 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2378 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2377, i32 0, i32 5, i32 %2376, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2379 = extractvalue %dx.types.ResRet.f32 %2378, 0
  %2380 = extractvalue %dx.types.ResRet.f32 %2378, 1
  %2381 = extractvalue %dx.types.ResRet.f32 %2378, 2
  %2382 = fadd fast float %124, 0xBFB99999A0000000
  %2383 = fmul fast float %2382, 1.000000e+01
  %2384 = call float @dx.op.unary.f32(i32 7, float %2383)  ; Saturate(value)
  %2385 = fmul fast float %2379, 2.000000e+00
  %2386 = fadd fast float %2385, -1.000000e+00
  %2387 = fmul fast float %2386, %2384
  %2388 = fadd fast float %2387, 1.000000e+00
  %2389 = fmul fast float %2380, 2.000000e+00
  %2390 = fadd fast float %2389, -1.000000e+00
  %2391 = fmul fast float %2390, %2384
  %2392 = fadd fast float %2391, 1.000000e+00
  %2393 = fmul fast float %2388, %1041
  %2394 = call float @dx.op.unary.f32(i32 7, float %2393)  ; Saturate(value)
  %2395 = call float @dx.op.binary.f32(i32 35, float %2394, float 0x3F947AE140000000)  ; FMax(a,b)
  %2396 = fmul fast float %2392, %1041
  %2397 = call float @dx.op.unary.f32(i32 7, float %2396)  ; Saturate(value)
  %2398 = fsub fast float %2397, %2395
  %2399 = fmul fast float %2398, %2381
  %2400 = fadd fast float %2399, %2395
  %2401 = fmul fast float %1041, 2.000000e+00
  %2402 = fmul fast float %2369, %2369
  %2403 = fmul fast float %2402, %2401
  %2404 = fadd fast float %2403, -5.000000e-01
  %2405 = fsub fast float 1.000000e+00, %2373
  %2406 = fmul fast float %2405, %2405
  %2407 = fmul fast float %2404, %2405
  %2408 = fmul fast float %2406, %2406
  %2409 = fmul fast float %2408, %2407
  %2410 = fadd fast float %2409, 1.000000e+00
  %2411 = fsub fast float 1.000000e+00, %1088
  %2412 = fmul fast float %2411, %2411
  %2413 = fmul fast float %2412, %2412
  %2414 = fmul fast float %2413, %2411
  %2415 = fmul fast float %2414, %2404
  %2416 = fadd fast float %2415, 1.000000e+00
  %2417 = fmul fast float %2416, 0x3FD45F3060000000
  %2418 = fmul fast float %2417, %2410
  %2419 = fmul fast float %1088, %1089
  %2420 = fmul fast float %2419, %201
  %2421 = fmul fast float %2420, %2418
  %2422 = fmul fast float %2419, %202
  %2423 = fmul fast float %2422, %2418
  %2424 = fmul fast float %2419, %203
  %2425 = fmul fast float %2424, %2418
  %2426 = fmul fast float %2400, %2400
  %2427 = fmul fast float %2426, %2426
  %2428 = fmul fast float %2395, %2395
  %2429 = fmul fast float %2428, %2428
  %2430 = fmul fast float %2397, %2397
  %2431 = fmul fast float %2430, %2430
  %2432 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %2432, label %2433, label %2440

; <label>:2433                                    ; preds = %2368
  %2434 = fmul fast float %1137, %1137
  %2435 = fmul fast float %2369, 0x400CCCCCC0000000
  %2436 = fadd fast float %2435, 0x3FD99999A0000000
  %2437 = fdiv fast float %2434, %2436
  %2438 = fadd fast float %2437, %2429
  %2439 = call float @dx.op.unary.f32(i32 7, float %2438)  ; Saturate(value)
  br label %2440

; <label>:2440                                    ; preds = %2433, %2368
  %2441 = phi float [ %2439, %2433 ], [ %2429, %2368 ]
  br i1 %2278, label %2442, label %2455

; <label>:2442                                    ; preds = %2440
  %2443 = fmul fast float %1135, 2.500000e-01
  %2444 = bitcast float %2441 to i32
  %2445 = ashr i32 %2444, 1
  %2446 = add nsw i32 %2445, 532487669
  %2447 = bitcast i32 %2446 to float
  %2448 = fmul fast float %2447, 3.000000e+00
  %2449 = fadd fast float %2448, %1135
  %2450 = fmul fast float %2443, %2449
  %2451 = fadd fast float %2369, 0x3F50624DE0000000
  %2452 = fdiv fast float %2450, %2451
  %2453 = fadd fast float %2452, %2441
  %2454 = fdiv fast float %2441, %2453
  br label %2455

; <label>:2455                                    ; preds = %2442, %2440
  %2456 = phi float [ %2453, %2442 ], [ %2441, %2440 ]
  %2457 = phi float [ %2454, %2442 ], [ 1.000000e+00, %2440 ]
  %2458 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %2458, label %2459, label %2478

; <label>:2459                                    ; preds = %2455
  %2460 = fsub fast float 0x3FF00068E0000000, %1071
  %2461 = fadd fast float %1071, 1.000000e+00
  %2462 = fdiv fast float %2460, %2461
  %2463 = call float @dx.op.unary.f32(i32 24, float %2462)  ; Sqrt(value)
  %2464 = fmul fast float %2463, 2.500000e-01
  %2465 = bitcast float %2456 to i32
  %2466 = ashr i32 %2465, 1
  %2467 = add nsw i32 %2466, 532487669
  %2468 = bitcast i32 %2467 to float
  %2469 = fmul fast float %2468, 3.000000e+00
  %2470 = fadd fast float %2463, %2469
  %2471 = fmul fast float %2464, %2470
  %2472 = fadd fast float %2369, 0x3F50624DE0000000
  %2473 = fdiv fast float %2471, %2472
  %2474 = fadd fast float %2473, %2456
  %2475 = fdiv fast float %2456, %2474
  %2476 = call float @dx.op.unary.f32(i32 24, float %2475)  ; Sqrt(value)
  %2477 = fmul fast float %2476, %2457
  br label %2478

; <label>:2478                                    ; preds = %2459, %2455
  %2479 = phi float [ %2477, %2459 ], [ %2457, %2455 ]
  br i1 %2432, label %2480, label %2487

; <label>:2480                                    ; preds = %2478
  %2481 = fmul fast float %1137, %1137
  %2482 = fmul fast float %2369, 0x400CCCCCC0000000
  %2483 = fadd fast float %2482, 0x3FD99999A0000000
  %2484 = fdiv fast float %2481, %2483
  %2485 = fadd fast float %2484, %2431
  %2486 = call float @dx.op.unary.f32(i32 7, float %2485)  ; Saturate(value)
  br label %2487

; <label>:2487                                    ; preds = %2480, %2478
  %2488 = phi float [ %2486, %2480 ], [ %2431, %2478 ]
  br i1 %2278, label %2489, label %2502

; <label>:2489                                    ; preds = %2487
  %2490 = fmul fast float %1135, 2.500000e-01
  %2491 = bitcast float %2488 to i32
  %2492 = ashr i32 %2491, 1
  %2493 = add nsw i32 %2492, 532487669
  %2494 = bitcast i32 %2493 to float
  %2495 = fmul fast float %2494, 3.000000e+00
  %2496 = fadd fast float %2495, %1135
  %2497 = fmul fast float %2490, %2496
  %2498 = fadd fast float %2369, 0x3F50624DE0000000
  %2499 = fdiv fast float %2497, %2498
  %2500 = fadd fast float %2499, %2488
  %2501 = fdiv fast float %2488, %2500
  br label %2502

; <label>:2502                                    ; preds = %2489, %2487
  %2503 = phi float [ %2500, %2489 ], [ %2488, %2487 ]
  %2504 = phi float [ %2501, %2489 ], [ 1.000000e+00, %2487 ]
  br i1 %2458, label %2505, label %2524

; <label>:2505                                    ; preds = %2502
  %2506 = fsub fast float 0x3FF00068E0000000, %1071
  %2507 = fadd fast float %1071, 1.000000e+00
  %2508 = fdiv fast float %2506, %2507
  %2509 = call float @dx.op.unary.f32(i32 24, float %2508)  ; Sqrt(value)
  %2510 = fmul fast float %2509, 2.500000e-01
  %2511 = bitcast float %2503 to i32
  %2512 = ashr i32 %2511, 1
  %2513 = add nsw i32 %2512, 532487669
  %2514 = bitcast i32 %2513 to float
  %2515 = fmul fast float %2514, 3.000000e+00
  %2516 = fadd fast float %2509, %2515
  %2517 = fmul fast float %2510, %2516
  %2518 = fadd fast float %2369, 0x3F50624DE0000000
  %2519 = fdiv fast float %2517, %2518
  %2520 = fadd fast float %2519, %2503
  %2521 = fdiv fast float %2503, %2520
  %2522 = call float @dx.op.unary.f32(i32 24, float %2521)  ; Sqrt(value)
  %2523 = fmul fast float %2522, %2504
  br label %2524

; <label>:2524                                    ; preds = %2505, %2502
  %2525 = phi float [ %2523, %2505 ], [ %2504, %2502 ]
  %2526 = fmul fast float %2488, %2370
  %2527 = fsub fast float %2526, %2370
  %2528 = fmul fast float %2527, %2370
  %2529 = fadd fast float %2528, 1.000000e+00
  %2530 = fmul fast float %2529, %2529
  %2531 = fmul fast float %2530, 0x400921FB60000000
  %2532 = fdiv fast float %2488, %2531
  %2533 = fmul fast float %2532, %2525
  %2534 = fmul fast float %2441, %2370
  %2535 = fsub fast float %2534, %2370
  %2536 = fmul fast float %2535, %2370
  %2537 = fadd fast float %2536, 1.000000e+00
  %2538 = fmul fast float %2537, %2537
  %2539 = fmul fast float %2538, 0x400921FB60000000
  %2540 = fdiv fast float %2441, %2539
  %2541 = fmul fast float %2540, %2479
  %2542 = fsub fast float %2533, %2541
  %2543 = fmul fast float %2542, %2381
  %2544 = fadd fast float %2543, %2541
  %2545 = call float @dx.op.unary.f32(i32 24, float %2427)  ; Sqrt(value)
  %2546 = fsub fast float 1.000000e+00, %2545
  %2547 = fmul fast float %2546, %2373
  %2548 = fadd fast float %2547, %2545
  %2549 = fmul fast float %2548, %1088
  %2550 = fmul fast float %2546, %1088
  %2551 = fadd fast float %2550, %2545
  %2552 = fmul fast float %2551, %2373
  %2553 = fadd fast float %2549, %2552
  %2554 = fdiv fast float 5.000000e-01, %2553
  %2555 = fsub fast float 1.000000e+00, %2369
  %2556 = fmul fast float %2555, %2555
  %2557 = fmul fast float %2556, %2556
  %2558 = fmul fast float %2557, %2555
  %2559 = fmul fast float %213, 5.000000e+01
  %2560 = call float @dx.op.unary.f32(i32 7, float %2559)  ; Saturate(value)
  %2561 = fmul fast float %2560, %2558
  %2562 = fsub fast float 1.000000e+00, %2558
  %2563 = fmul fast float %2562, %212
  %2564 = fmul fast float %2562, %213
  %2565 = fmul fast float %2562, %214
  %2566 = fadd fast float %2561, %2563
  %2567 = fadd fast float %2561, %2564
  %2568 = fadd fast float %2561, %2565
  %2569 = fmul fast float %2544, %2554
  %2570 = fmul fast float %2566, %2419
  %2571 = fmul fast float %2570, %2569
  %2572 = fmul fast float %2567, %2419
  %2573 = fmul fast float %2572, %2569
  %2574 = fmul fast float %2568, %2419
  %2575 = fmul fast float %2574, %2569
  br label %3729

; <label>:2576                                    ; preds = %1121
  %2577 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %2578 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %2579 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %2580 = fmul fast float %2579, 2.000000e+00
  %2581 = fadd fast float %2580, 2.000000e+00
  %2582 = call float @dx.op.unary.f32(i32 25, float %2581)  ; Rsqrt(value)
  %2583 = fadd fast float %2578, %2577
  %2584 = fmul fast float %2582, %2583
  %2585 = call float @dx.op.unary.f32(i32 7, float %2584)  ; Saturate(value)
  %2586 = fmul fast float %2582, %2579
  %2587 = fadd fast float %2586, %2582
  %2588 = call float @dx.op.unary.f32(i32 7, float %2587)  ; Saturate(value)
  %2589 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %2589, label %2590, label %2679

; <label>:2590                                    ; preds = %2576
  %2591 = fmul fast float %1135, %1135
  %2592 = fsub fast float 1.000000e+00, %2591
  %2593 = call float @dx.op.unary.f32(i32 24, float %2592)  ; Sqrt(value)
  %2594 = fmul fast float %2577, 2.000000e+00
  %2595 = fmul fast float %2594, %2578
  %2596 = fsub fast float %2595, %2579
  %2597 = fcmp fast ult float %2596, %2593
  br i1 %2597, label %2600, label %2598

; <label>:2598                                    ; preds = %2590
  %2599 = call float @dx.op.unary.f32(i32 6, float %2578)  ; FAbs(value)
  br label %2679

; <label>:2600                                    ; preds = %2590
  %2601 = fmul fast float %2596, %2596
  %2602 = fsub fast float 1.000000e+00, %2601
  %2603 = call float @dx.op.unary.f32(i32 25, float %2602)  ; Rsqrt(value)
  %2604 = fmul fast float %2603, %1135
  %2605 = fmul fast float %2596, %2577
  %2606 = fsub fast float %2578, %2605
  %2607 = fmul fast float %2604, %2606
  %2608 = fmul fast float %2578, %2578
  %2609 = fmul fast float %2608, 2.000000e+00
  %2610 = fadd fast float %2609, -1.000000e+00
  %2611 = fmul fast float %2596, %2579
  %2612 = fsub fast float %2610, %2611
  %2613 = fmul fast float %2604, %2612
  %2614 = fmul fast float %2577, %2577
  %2615 = fsub fast float 1.000000e+00, %2614
  %2616 = fsub fast float %2615, %2608
  %2617 = fmul fast float %2579, %2579
  %2618 = fsub fast float %2616, %2617
  %2619 = fmul fast float %2595, %2579
  %2620 = fadd fast float %2618, %2619
  %2621 = call float @dx.op.unary.f32(i32 7, float %2620)  ; Saturate(value)
  %2622 = call float @dx.op.unary.f32(i32 24, float %2621)  ; Sqrt(value)
  %2623 = fmul fast float %2622, %2604
  %2624 = fmul fast float %2578, 2.000000e+00
  %2625 = fmul fast float %2624, %2604
  %2626 = fmul fast float %2625, %2622
  %2627 = fmul fast float %2593, %2577
  %2628 = fadd fast float %2627, %2578
  %2629 = fadd fast float %2628, %2607
  %2630 = fmul fast float %2593, %2579
  %2631 = fadd fast float %2630, 1.000000e+00
  %2632 = fadd fast float %2631, %2613
  %2633 = fmul fast float %2623, %2632
  %2634 = fmul fast float %2629, %2632
  %2635 = fmul fast float %2626, %2629
  %2636 = fmul fast float %2633, 5.000000e-01
  %2637 = fmul fast float %2629, 2.500000e-01
  %2638 = fmul fast float %2637, %2626
  %2639 = fsub fast float %2638, %2636
  %2640 = fmul fast float %2639, %2634
  %2641 = fmul fast float %2633, %2633
  %2642 = fmul fast float %2633, 2.000000e+00
  %2643 = fsub fast float %2635, %2642
  %2644 = fmul fast float %2643, %2635
  %2645 = fadd fast float %2644, %2641
  %2646 = fmul fast float %2632, %2632
  %2647 = fmul fast float %2646, %2628
  %2648 = fadd fast float %2632, %2630
  %2649 = fmul fast float %2648, 5.000000e-01
  %2650 = fsub fast float -5.000000e-01, %2649
  %2651 = fmul fast float %2650, %2634
  %2652 = fadd fast float %2651, %2647
  %2653 = fmul fast float %2652, %2629
  %2654 = fadd fast float %2645, %2653
  %2655 = fmul fast float %2640, 2.000000e+00
  %2656 = fmul fast float %2654, %2654
  %2657 = fmul fast float %2640, %2640
  %2658 = fadd fast float %2656, %2657
  %2659 = fdiv fast float %2655, %2658
  %2660 = fmul fast float %2654, %2659
  %2661 = fmul fast float %2640, %2659
  %2662 = fsub fast float 1.000000e+00, %2661
  %2663 = fmul fast float %2662, %2607
  %2664 = fmul fast float %2660, %2623
  %2665 = fmul fast float %2662, %2613
  %2666 = fmul fast float %2660, %2626
  %2667 = fadd fast float %2666, %2630
  %2668 = fadd fast float %2667, %2665
  %2669 = fmul fast float %2668, 2.000000e+00
  %2670 = fadd fast float %2669, 2.000000e+00
  %2671 = call float @dx.op.unary.f32(i32 25, float %2670)  ; Rsqrt(value)
  %2672 = fadd fast float %2628, %2664
  %2673 = fadd fast float %2672, %2663
  %2674 = fmul fast float %2673, %2671
  %2675 = call float @dx.op.unary.f32(i32 7, float %2674)  ; Saturate(value)
  %2676 = fmul fast float %2668, %2671
  %2677 = fadd fast float %2676, %2671
  %2678 = call float @dx.op.unary.f32(i32 7, float %2677)  ; Saturate(value)
  br label %2679

; <label>:2679                                    ; preds = %2600, %2598, %2576
  %2680 = phi float [ %2599, %2598 ], [ %2678, %2600 ], [ %2588, %2576 ]
  %2681 = phi float [ 1.000000e+00, %2598 ], [ %2675, %2600 ], [ %2585, %2576 ]
  %2682 = call float @dx.op.unary.f32(i32 6, float %2578)  ; FAbs(value)
  %2683 = fadd fast float %2682, 0x3EE4F8B580000000
  %2684 = call float @dx.op.unary.f32(i32 7, float %2683)  ; Saturate(value)
  %2685 = fmul fast float %201, 0x3FD45F3060000000
  %2686 = fmul fast float %202, 0x3FD45F3060000000
  %2687 = fmul fast float %203, 0x3FD45F3060000000
  %2688 = fmul fast float %1088, %1089
  %2689 = fmul fast float %2685, %2688
  %2690 = fmul fast float %2686, %2688
  %2691 = fmul fast float %2687, %2688
  %2692 = fmul fast float %1041, %1041
  %2693 = fmul fast float %2692, %2692
  %2694 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %2694, label %2695, label %2702

; <label>:2695                                    ; preds = %2679
  %2696 = fmul fast float %1137, %1137
  %2697 = fmul fast float %2680, 0x400CCCCCC0000000
  %2698 = fadd fast float %2697, 0x3FD99999A0000000
  %2699 = fdiv fast float %2696, %2698
  %2700 = fadd fast float %2699, %2693
  %2701 = call float @dx.op.unary.f32(i32 7, float %2700)  ; Saturate(value)
  br label %2702

; <label>:2702                                    ; preds = %2695, %2679
  %2703 = phi float [ %2701, %2695 ], [ %2693, %2679 ]
  br i1 %2589, label %2704, label %2717

; <label>:2704                                    ; preds = %2702
  %2705 = fmul fast float %1135, 2.500000e-01
  %2706 = bitcast float %2703 to i32
  %2707 = ashr i32 %2706, 1
  %2708 = add nsw i32 %2707, 532487669
  %2709 = bitcast i32 %2708 to float
  %2710 = fmul fast float %2709, 3.000000e+00
  %2711 = fadd fast float %2710, %1135
  %2712 = fmul fast float %2705, %2711
  %2713 = fadd fast float %2680, 0x3F50624DE0000000
  %2714 = fdiv fast float %2712, %2713
  %2715 = fadd fast float %2714, %2703
  %2716 = fdiv fast float %2703, %2715
  br label %2717

; <label>:2717                                    ; preds = %2704, %2702
  %2718 = phi float [ %2715, %2704 ], [ %2703, %2702 ]
  %2719 = phi float [ %2716, %2704 ], [ 1.000000e+00, %2702 ]
  %2720 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %2720, label %2721, label %2740

; <label>:2721                                    ; preds = %2717
  %2722 = fsub fast float 0x3FF00068E0000000, %1071
  %2723 = fadd fast float %1071, 1.000000e+00
  %2724 = fdiv fast float %2722, %2723
  %2725 = call float @dx.op.unary.f32(i32 24, float %2724)  ; Sqrt(value)
  %2726 = fmul fast float %2725, 2.500000e-01
  %2727 = bitcast float %2718 to i32
  %2728 = ashr i32 %2727, 1
  %2729 = add nsw i32 %2728, 532487669
  %2730 = bitcast i32 %2729 to float
  %2731 = fmul fast float %2730, 3.000000e+00
  %2732 = fadd fast float %2725, %2731
  %2733 = fmul fast float %2726, %2732
  %2734 = fadd fast float %2680, 0x3F50624DE0000000
  %2735 = fdiv fast float %2733, %2734
  %2736 = fadd fast float %2735, %2718
  %2737 = fdiv fast float %2718, %2736
  %2738 = call float @dx.op.unary.f32(i32 24, float %2737)  ; Sqrt(value)
  %2739 = fmul fast float %2738, %2719
  br label %2740

; <label>:2740                                    ; preds = %2721, %2717
  %2741 = phi float [ %2739, %2721 ], [ %2719, %2717 ]
  %2742 = fmul fast float %2703, %2681
  %2743 = fsub fast float %2742, %2681
  %2744 = fmul fast float %2743, %2681
  %2745 = fadd fast float %2744, 1.000000e+00
  %2746 = fmul fast float %2745, %2745
  %2747 = fmul fast float %2746, 0x400921FB60000000
  %2748 = fdiv fast float %2703, %2747
  %2749 = fmul fast float %2748, %2741
  %2750 = call float @dx.op.unary.f32(i32 24, float %2703)  ; Sqrt(value)
  %2751 = fsub fast float 1.000000e+00, %2750
  %2752 = fmul fast float %2751, %2684
  %2753 = fadd fast float %2752, %2750
  %2754 = fmul fast float %2753, %1088
  %2755 = fmul fast float %2751, %1088
  %2756 = fadd fast float %2755, %2750
  %2757 = fmul fast float %2756, %2684
  %2758 = fadd fast float %2754, %2757
  %2759 = fdiv fast float 5.000000e-01, %2758
  %2760 = fsub fast float 1.000000e+00, %2680
  %2761 = fmul fast float %2760, %2760
  %2762 = fmul fast float %2761, %2761
  %2763 = fmul fast float %2762, %2760
  %2764 = fmul fast float %213, 5.000000e+01
  %2765 = call float @dx.op.unary.f32(i32 7, float %2764)  ; Saturate(value)
  %2766 = fmul fast float %2765, %2763
  %2767 = fsub fast float 1.000000e+00, %2763
  %2768 = fmul fast float %2767, %212
  %2769 = fmul fast float %2767, %213
  %2770 = fmul fast float %2767, %214
  %2771 = fadd fast float %2766, %2768
  %2772 = fadd fast float %2766, %2769
  %2773 = fadd fast float %2766, %2770
  %2774 = fmul fast float %2749, %2759
  %2775 = fmul fast float %2774, %2688
  %2776 = fmul fast float %2775, %2771
  %2777 = fmul fast float %2775, %2772
  %2778 = fmul fast float %2775, %2773
  %2779 = fmul fast float %121, %121
  %2780 = fmul fast float %122, %122
  %2781 = fmul fast float %123, %123
  %2782 = fsub fast float 5.000000e-01, %2577
  %2783 = fmul fast float %2782, 0x3FDC71C720000000
  %2784 = call float @dx.op.unary.f32(i32 7, float %2783)  ; Saturate(value)
  %2785 = fsub fast float -0.000000e+00, %2579
  %2786 = call float @dx.op.unary.f32(i32 7, float %2785)  ; Saturate(value)
  %2787 = fmul fast float %2786, %2786
  %2788 = fmul fast float %2787, 0x3FE47AE140000000
  %2789 = fsub fast float 1.000000e+00, %2788
  %2790 = fmul fast float %2787, 0x400015BFA0000000
  %2791 = fsub fast float 0x400921FB60000000, %2790
  %2792 = fmul fast float %2791, %2789
  %2793 = fdiv fast float 0x3FD70A3D80000000, %2792
  %2794 = fmul fast float %2784, %1089
  %2795 = fmul fast float %2794, %2793
  %2796 = fmul fast float %2779, %2795
  %2797 = fmul fast float %2780, %2795
  %2798 = fmul fast float %2781, %2795
  br label %3729

; <label>:2799                                    ; preds = %1121
  %2800 = call float @dx.op.binary.f32(i32 35, float %1041, float 0x3F70101020000000)  ; FMax(a,b)
  %2801 = call float @dx.op.binary.f32(i32 36, float %2800, float 1.000000e+00)  ; FMin(a,b)
  %2802 = icmp ne i32 %592, 0
  %2803 = select i1 %2802, float %123, float 1.000000e+00
  %2804 = call float @dx.op.binary.f32(i32 36, float 1.000000e+00, float %2803)  ; FMin(a,b)
  %2805 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %2806 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %2807 = call float @dx.op.binary.f32(i32 35, float %2806, float -1.000000e+00)  ; FMax(a,b)
  %2808 = call float @dx.op.binary.f32(i32 36, float %2807, float 1.000000e+00)  ; FMin(a,b)
  %2809 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %2810 = call float @dx.op.binary.f32(i32 35, float %2809, float -1.000000e+00)  ; FMax(a,b)
  %2811 = call float @dx.op.binary.f32(i32 36, float %2810, float 1.000000e+00)  ; FMin(a,b)
  %2812 = call float @dx.op.unary.f32(i32 6, float %2811)  ; FAbs(value)
  %2813 = fmul fast float %2812, 0x3FC40AE960000000
  %2814 = fsub fast float 0x3FF921FB60000000, %2813
  %2815 = fsub fast float 1.000000e+00, %2812
  %2816 = call float @dx.op.unary.f32(i32 24, float %2815)  ; Sqrt(value)
  %2817 = fmul fast float %2814, %2816
  %2818 = fcmp fast oge float %2811, 0.000000e+00
  %2819 = fsub fast float 0x400921FB60000000, %2817
  %2820 = select i1 %2818, float %2817, float %2819
  %2821 = call float @dx.op.unary.f32(i32 6, float %2808)  ; FAbs(value)
  %2822 = fmul fast float %2821, 0x3FC40AE960000000
  %2823 = fsub fast float 0x3FF921FB60000000, %2822
  %2824 = fsub fast float 1.000000e+00, %2821
  %2825 = call float @dx.op.unary.f32(i32 24, float %2824)  ; Sqrt(value)
  %2826 = fmul fast float %2823, %2825
  %2827 = fcmp fast oge float %2808, 0.000000e+00
  %2828 = fsub fast float 0x400921FB60000000, %2826
  %2829 = select i1 %2827, float %2826, float %2828
  %2830 = fsub fast float %2829, %2820
  %2831 = call float @dx.op.unary.f32(i32 6, float %2830)  ; FAbs(value)
  %2832 = fmul fast float %2831, 5.000000e-01
  %2833 = call float @dx.op.unary.f32(i32 12, float %2832)  ; Cos(value)
  %2834 = fmul fast float %2808, %140
  %2835 = fmul fast float %2808, %141
  %2836 = fmul fast float %2808, %142
  %2837 = fsub fast float %1127, %2834
  %2838 = fsub fast float %1128, %2835
  %2839 = fsub fast float %1129, %2836
  %2840 = fmul fast float %2811, %140
  %2841 = fmul fast float %2811, %141
  %2842 = fmul fast float %2811, %142
  %2843 = fsub fast float %612, %2840
  %2844 = fsub fast float %613, %2841
  %2845 = fsub fast float %614, %2842
  %2846 = call float @dx.op.dot3.f32(i32 55, float %2837, float %2838, float %2839, float %2843, float %2844, float %2845)  ; Dot3(ax,ay,az,bx,by,bz)
  %2847 = call float @dx.op.dot3.f32(i32 55, float %2837, float %2838, float %2839, float %2837, float %2838, float %2839)  ; Dot3(ax,ay,az,bx,by,bz)
  %2848 = call float @dx.op.dot3.f32(i32 55, float %2843, float %2844, float %2845, float %2843, float %2844, float %2845)  ; Dot3(ax,ay,az,bx,by,bz)
  %2849 = fmul fast float %2848, %2847
  %2850 = fadd fast float %2849, 0x3F1A36E2E0000000
  %2851 = call float @dx.op.unary.f32(i32 25, float %2850)  ; Rsqrt(value)
  %2852 = fmul fast float %2851, %2846
  %2853 = fmul fast float %2852, 5.000000e-01
  %2854 = fadd fast float %2853, 5.000000e-01
  %2855 = call float @dx.op.unary.f32(i32 7, float %2854)  ; Saturate(value)
  %2856 = call float @dx.op.unary.f32(i32 24, float %2855)  ; Sqrt(value)
  %2857 = fdiv fast float 0x3FF30A3D80000000, %2833
  %2858 = fmul fast float %2833, 0x3FD70A3D80000000
  %2859 = fadd fast float %2857, %2858
  %2860 = fmul fast float %2801, %2801
  %2861 = fmul fast float %2860, 5.000000e-01
  %2862 = fmul fast float %2860, 2.000000e+00
  %2863 = and i32 %588, 1
  %2864 = icmp eq i32 %2863, 0
  br i1 %2864, label %2906, label %2865

; <label>:2865                                    ; preds = %2799
  %2866 = fmul fast float %2856, 0x3FEFEBF020000000
  %2867 = fmul fast float %2811, %2811
  %2868 = fsub fast float 1.000000e+00, %2867
  %2869 = call float @dx.op.unary.f32(i32 24, float %2868)  ; Sqrt(value)
  %2870 = fmul fast float %2866, %2869
  %2871 = fmul fast float %2811, 0x3FB1E7C640000000
  %2872 = fsub fast float %2870, %2871
  %2873 = fmul fast float %2872, 0x3FC1E7C640000000
  %2874 = fadd fast float %2811, %2808
  %2875 = fadd fast float %2874, %2873
  %2876 = fmul fast float %2860, 0x3FF6A09E60000000
  %2877 = fmul fast float %2876, %2856
  %2878 = fmul fast float %2875, %2875
  %2879 = fmul fast float %2878, -5.000000e-01
  %2880 = fmul fast float %2877, %2877
  %2881 = fdiv fast float %2879, %2880
  %2882 = fmul fast float %2881, 0x3FF7154760000000
  %2883 = call float @dx.op.unary.f32(i32 21, float %2882)  ; Exp(value)
  %2884 = fmul fast float %2877, 0x40040D9320000000
  %2885 = fdiv fast float %2883, %2884
  %2886 = fmul fast float %2805, 5.000000e-01
  %2887 = fadd fast float %2886, 5.000000e-01
  %2888 = call float @dx.op.unary.f32(i32 7, float %2887)  ; Saturate(value)
  %2889 = call float @dx.op.unary.f32(i32 24, float %2888)  ; Sqrt(value)
  %2890 = fsub fast float 1.000000e+00, %2889
  %2891 = fmul fast float %2890, %2890
  %2892 = fmul fast float %2890, 0x3FEE82E740000000
  %2893 = fmul fast float %2891, %2891
  %2894 = fmul fast float %2893, %2892
  %2895 = fadd fast float %2894, 0x3FA7D18B20000000
  %2896 = fsub fast float -0.000000e+00, %2805
  %2897 = call float @dx.op.unary.f32(i32 7, float %2896)  ; Saturate(value)
  %2898 = fadd fast float %2804, -1.000000e+00
  %2899 = fmul fast float %2897, %2898
  %2900 = fadd fast float %2899, 1.000000e+00
  %2901 = fmul fast float %186, 5.000000e-01
  %2902 = fmul fast float %2901, %2856
  %2903 = fmul fast float %2902, %2885
  %2904 = fmul fast float %2903, %2900
  %2905 = fmul fast float %2904, %2895
  br label %2906

; <label>:2906                                    ; preds = %2865, %2799
  %2907 = phi float [ %2905, %2865 ], [ 0.000000e+00, %2799 ]
  %2908 = and i32 %588, 2
  %2909 = icmp eq i32 %2908, 0
  br i1 %2909, label %2993, label %2910

; <label>:2910                                    ; preds = %2906
  %2911 = fadd fast float %2808, 0xBFA1EB8520000000
  %2912 = fadd fast float %2911, %2811
  %2913 = fmul fast float %2912, %2912
  %2914 = fmul fast float %2913, -5.000000e-01
  %2915 = fmul fast float %2861, %2861
  %2916 = fdiv fast float %2914, %2915
  %2917 = fmul fast float %2916, 0x3FF7154760000000
  %2918 = call float @dx.op.unary.f32(i32 21, float %2917)  ; Exp(value)
  %2919 = fmul fast float %2860, 0x3FF40D9320000000
  %2920 = fdiv fast float %2918, %2919
  %2921 = fdiv fast float 1.000000e+00, %2859
  %2922 = fmul fast float %2852, 0x3FE99999A0000000
  %2923 = fsub fast float 0x3FE3333340000000, %2922
  %2924 = fmul fast float %2921, %2923
  %2925 = fadd fast float %2924, 1.000000e+00
  %2926 = fmul fast float %2925, %2856
  %2927 = fmul fast float %2926, %2926
  %2928 = fsub fast float 1.000000e+00, %2927
  %2929 = call float @dx.op.unary.f32(i32 7, float %2928)  ; Saturate(value)
  %2930 = call float @dx.op.unary.f32(i32 24, float %2929)  ; Sqrt(value)
  %2931 = fmul fast float %2930, %2833
  %2932 = fsub fast float 1.000000e+00, %2931
  %2933 = fmul fast float %2932, %2932
  %2934 = fmul fast float %2932, 0x3FEE82E740000000
  %2935 = fmul fast float %2933, %2933
  %2936 = fmul fast float %2935, %2934
  %2937 = fsub fast float 0x3FEE82E740000000, %2936
  %2938 = icmp eq i32 %593, 0
  %2939 = fmul fast float %2926, %2921
  %2940 = fmul fast float %2939, %2939
  br i1 %2938, label %2955, label %2941

; <label>:2941                                    ; preds = %2910
  %2942 = fsub fast float 1.000000e+00, %2940
  %2943 = call float @dx.op.unary.f32(i32 24, float %2942)  ; Sqrt(value)
  %2944 = fmul fast float %2943, 5.000000e-01
  %2945 = fdiv fast float %2944, %2833
  %2946 = call float @dx.op.unary.f32(i32 6, float %585)  ; FAbs(value)
  %2947 = call float @dx.op.unary.f32(i32 6, float %586)  ; FAbs(value)
  %2948 = call float @dx.op.unary.f32(i32 6, float %587)  ; FAbs(value)
  %2949 = call float @dx.op.unary.f32(i32 23, float %2946)  ; Log(value)
  %2950 = call float @dx.op.unary.f32(i32 23, float %2947)  ; Log(value)
  %2951 = call float @dx.op.unary.f32(i32 23, float %2948)  ; Log(value)
  %2952 = fmul fast float %2949, %2945
  %2953 = fmul fast float %2950, %2945
  %2954 = fmul fast float %2951, %2945
  br label %2971

; <label>:2955                                    ; preds = %2910
  %2956 = call float @dx.op.unary.f32(i32 23, float %585)  ; Log(value)
  %2957 = call float @dx.op.unary.f32(i32 23, float %586)  ; Log(value)
  %2958 = call float @dx.op.unary.f32(i32 23, float %587)  ; Log(value)
  %2959 = fdiv fast float %2940, %2833
  %2960 = fsub fast float 1.000000e+00, %2959
  %2961 = call float @dx.op.unary.f32(i32 6, float %2960)  ; FAbs(value)
  %2962 = fmul fast float %2956, %2956
  %2963 = fmul fast float %2962, 0xBFA4787320000000
  %2964 = fmul fast float %2963, %2961
  %2965 = fmul fast float %2957, %2957
  %2966 = fmul fast float %2965, 0xBFA4787320000000
  %2967 = fmul fast float %2966, %2961
  %2968 = fmul fast float %2958, %2958
  %2969 = fmul fast float %2968, 0xBFA4787320000000
  %2970 = fmul fast float %2969, %2961
  br label %2971

; <label>:2971                                    ; preds = %2955, %2941
  %2972 = phi float [ %2952, %2941 ], [ %2964, %2955 ]
  %2973 = phi float [ %2953, %2941 ], [ %2967, %2955 ]
  %2974 = phi float [ %2954, %2941 ], [ %2970, %2955 ]
  %2975 = call float @dx.op.unary.f32(i32 21, float %2972)  ; Exp(value)
  %2976 = call float @dx.op.unary.f32(i32 21, float %2973)  ; Exp(value)
  %2977 = call float @dx.op.unary.f32(i32 21, float %2974)  ; Exp(value)
  %2978 = fmul fast float %2852, 0x40151037A0000000
  %2979 = fsub fast float 0xC016F7BB80000000, %2978
  %2980 = call float @dx.op.unary.f32(i32 21, float %2979)  ; Exp(value)
  %2981 = fmul fast float %2937, %2937
  %2982 = fmul fast float %2981, %2920
  %2983 = fmul fast float %2982, %2980
  %2984 = fmul fast float %2975, %2804
  %2985 = fmul fast float %2984, %2983
  %2986 = fmul fast float %2976, %2804
  %2987 = fmul fast float %2986, %2983
  %2988 = fmul fast float %2977, %2804
  %2989 = fmul fast float %2988, %2983
  %2990 = fadd fast float %2985, %2907
  %2991 = fadd fast float %2987, %2907
  %2992 = fadd fast float %2989, %2907
  br label %2993

; <label>:2993                                    ; preds = %2971, %2906
  %2994 = phi float [ %2990, %2971 ], [ %2907, %2906 ]
  %2995 = phi float [ %2991, %2971 ], [ %2907, %2906 ]
  %2996 = phi float [ %2992, %2971 ], [ %2907, %2906 ]
  %2997 = and i32 %588, 4
  %2998 = icmp eq i32 %2997, 0
  %2999 = call float @dx.op.unary.f32(i32 6, float %585)  ; FAbs(value)
  %3000 = call float @dx.op.unary.f32(i32 6, float %586)  ; FAbs(value)
  %3001 = call float @dx.op.unary.f32(i32 6, float %587)  ; FAbs(value)
  br i1 %2998, label %3045, label %3002

; <label>:3002                                    ; preds = %2993
  %3003 = fadd fast float %2808, 0xBFC1EB8520000000
  %3004 = fadd fast float %3003, %2811
  %3005 = fmul fast float %3004, %3004
  %3006 = fmul fast float %3005, -5.000000e-01
  %3007 = fmul fast float %2862, %2862
  %3008 = fdiv fast float %3006, %3007
  %3009 = fmul fast float %3008, 0x3FF7154760000000
  %3010 = call float @dx.op.unary.f32(i32 21, float %3009)  ; Exp(value)
  %3011 = fmul fast float %2860, 0x40140D9320000000
  %3012 = fdiv fast float %3010, %3011
  %3013 = fmul fast float %2833, 5.000000e-01
  %3014 = fsub fast float 1.000000e+00, %3013
  %3015 = fmul fast float %3014, %3014
  %3016 = fmul fast float %2833, 0x3FDE82E740000000
  %3017 = fsub fast float 0x3FEE82E740000000, %3016
  %3018 = fmul fast float %3015, %3015
  %3019 = fmul fast float %3018, %3017
  %3020 = fadd fast float %3019, 0x3FA7D18B20000000
  %3021 = fsub fast float 0x3FEE82E740000000, %3019
  %3022 = fdiv fast float 0x3FE99999A0000000, %2833
  %3023 = call float @dx.op.unary.f32(i32 23, float %2999)  ; Log(value)
  %3024 = call float @dx.op.unary.f32(i32 23, float %3000)  ; Log(value)
  %3025 = call float @dx.op.unary.f32(i32 23, float %3001)  ; Log(value)
  %3026 = fmul fast float %3023, %3022
  %3027 = fmul fast float %3024, %3022
  %3028 = fmul fast float %3025, %3022
  %3029 = call float @dx.op.unary.f32(i32 21, float %3026)  ; Exp(value)
  %3030 = call float @dx.op.unary.f32(i32 21, float %3027)  ; Exp(value)
  %3031 = call float @dx.op.unary.f32(i32 21, float %3028)  ; Exp(value)
  %3032 = fmul fast float %2852, 0x4038869BE0000000
  %3033 = fadd fast float %3032, 0xC038355B40000000
  %3034 = call float @dx.op.unary.f32(i32 21, float %3033)  ; Exp(value)
  %3035 = fmul fast float %3021, %3021
  %3036 = fmul fast float %3035, %3020
  %3037 = fmul fast float %3036, %3012
  %3038 = fmul fast float %3037, %3034
  %3039 = fmul fast float %3038, %3029
  %3040 = fmul fast float %3038, %3030
  %3041 = fmul fast float %3038, %3031
  %3042 = fadd fast float %3039, %2994
  %3043 = fadd fast float %3040, %2995
  %3044 = fadd fast float %3041, %2996
  br label %3045

; <label>:3045                                    ; preds = %3002, %2993
  %3046 = phi float [ %3042, %3002 ], [ %2994, %2993 ]
  %3047 = phi float [ %3043, %3002 ], [ %2995, %2993 ]
  %3048 = phi float [ %3044, %3002 ], [ %2996, %2993 ]
  %3049 = fadd fast float %3046, %589
  %3050 = fadd fast float %3047, %590
  %3051 = fadd fast float %3048, %591
  %3052 = fmul fast float %3049, %1025
  %3053 = fmul fast float %3050, %1025
  %3054 = fmul fast float %3051, %1025
  %3055 = call float @dx.op.unary.f32(i32 6, float %2806)  ; FAbs(value)
  %3056 = fsub fast float 1.000000e+00, %3055
  %3057 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %140, float %141, float %142)  ; Dot3(ax,ay,az,bx,by,bz)
  %3058 = fmul fast float %3057, %140
  %3059 = fmul fast float %3057, %141
  %3060 = fmul fast float %3057, %142
  %3061 = fsub fast float %612, %3058
  %3062 = fsub fast float %613, %3059
  %3063 = fsub fast float %614, %3060
  %3064 = call float @dx.op.dot3.f32(i32 55, float %3061, float %3062, float %3063, float %3061, float %3062, float %3063)  ; Dot3(ax,ay,az,bx,by,bz)
  %3065 = call float @dx.op.unary.f32(i32 25, float %3064)  ; Rsqrt(value)
  %3066 = fmul fast float %3061, %3065
  %3067 = fmul fast float %3062, %3065
  %3068 = fmul fast float %3063, %3065
  %3069 = call float @dx.op.dot3.f32(i32 55, float %3066, float %3067, float %3068, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3070 = fadd fast float %3069, 1.000000e+00
  %3071 = fmul fast float %3070, 2.500000e-01
  %3072 = call float @dx.op.unary.f32(i32 7, float %3071)  ; Saturate(value)
  %3073 = fsub fast float %3056, %3072
  %3074 = fmul fast float %3073, 0x3FD51EB860000000
  %3075 = fadd fast float %3074, %3072
  %3076 = fmul fast float %144, 0x3FD45F3060000000
  %3077 = fmul fast float %3076, %3075
  %3078 = call float @dx.op.dot3.f32(i32 55, float %585, float %586, float %587, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3079 = fsub fast float 1.000000e+00, %1024
  %3080 = call float @dx.op.binary.f32(i32 35, float %3078, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %3081 = fdiv fast float %585, %3080
  %3082 = fdiv fast float %586, %3080
  %3083 = fdiv fast float %587, %3080
  %3084 = call float @dx.op.unary.f32(i32 6, float %3081)  ; FAbs(value)
  %3085 = call float @dx.op.unary.f32(i32 6, float %3082)  ; FAbs(value)
  %3086 = call float @dx.op.unary.f32(i32 6, float %3083)  ; FAbs(value)
  %3087 = call float @dx.op.unary.f32(i32 23, float %3084)  ; Log(value)
  %3088 = call float @dx.op.unary.f32(i32 23, float %3085)  ; Log(value)
  %3089 = call float @dx.op.unary.f32(i32 23, float %3086)  ; Log(value)
  %3090 = fmul fast float %3087, %3079
  %3091 = fmul fast float %3088, %3079
  %3092 = fmul fast float %3089, %3079
  %3093 = call float @dx.op.unary.f32(i32 21, float %3090)  ; Exp(value)
  %3094 = call float @dx.op.unary.f32(i32 21, float %3091)  ; Exp(value)
  %3095 = call float @dx.op.unary.f32(i32 21, float %3092)  ; Exp(value)
  %3096 = call float @dx.op.unary.f32(i32 24, float %2999)  ; Sqrt(value)
  %3097 = call float @dx.op.unary.f32(i32 24, float %3000)  ; Sqrt(value)
  %3098 = call float @dx.op.unary.f32(i32 24, float %3001)  ; Sqrt(value)
  %3099 = fmul fast float %3093, %3077
  %3100 = fmul fast float %3099, %3096
  %3101 = fmul fast float %3094, %3077
  %3102 = fmul fast float %3101, %3097
  %3103 = fmul fast float %3095, %3077
  %3104 = fmul fast float %3103, %3098
  %3105 = fadd fast float %3052, %3100
  %3106 = fadd fast float %3053, %3102
  %3107 = fadd fast float %3054, %3104
  %3108 = fsub fast float -0.000000e+00, %3105
  %3109 = fsub fast float -0.000000e+00, %3106
  %3110 = fsub fast float -0.000000e+00, %3107
  %3111 = call float @dx.op.binary.f32(i32 36, float %3108, float 0.000000e+00)  ; FMin(a,b)
  %3112 = call float @dx.op.binary.f32(i32 36, float %3109, float 0.000000e+00)  ; FMin(a,b)
  %3113 = call float @dx.op.binary.f32(i32 36, float %3110, float 0.000000e+00)  ; FMin(a,b)
  %3114 = fmul fast float %1089, %3111
  %3115 = fsub fast float -0.000000e+00, %3114
  %3116 = fmul fast float %1089, %3112
  %3117 = fsub fast float -0.000000e+00, %3116
  %3118 = fmul fast float %1089, %3113
  %3119 = fsub fast float -0.000000e+00, %3118
  br label %3729

; <label>:3120                                    ; preds = %1121
  %3121 = fmul fast float %121, %121
  %3122 = fmul fast float %122, %122
  %3123 = fmul fast float %123, %123
  %3124 = call float @dx.op.unary.f32(i32 7, float %124)  ; Saturate(value)
  %3125 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3126 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %3127 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3128 = fmul fast float %3127, 2.000000e+00
  %3129 = fadd fast float %3128, 2.000000e+00
  %3130 = call float @dx.op.unary.f32(i32 25, float %3129)  ; Rsqrt(value)
  %3131 = fadd fast float %3126, %3125
  %3132 = fmul fast float %3130, %3131
  %3133 = call float @dx.op.unary.f32(i32 7, float %3132)  ; Saturate(value)
  %3134 = fmul fast float %3130, %3127
  %3135 = fadd fast float %3134, %3130
  %3136 = call float @dx.op.unary.f32(i32 7, float %3135)  ; Saturate(value)
  %3137 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %3137, label %3138, label %3227

; <label>:3138                                    ; preds = %3120
  %3139 = fmul fast float %1135, %1135
  %3140 = fsub fast float 1.000000e+00, %3139
  %3141 = call float @dx.op.unary.f32(i32 24, float %3140)  ; Sqrt(value)
  %3142 = fmul fast float %3125, 2.000000e+00
  %3143 = fmul fast float %3142, %3126
  %3144 = fsub fast float %3143, %3127
  %3145 = fcmp fast ult float %3144, %3141
  br i1 %3145, label %3148, label %3146

; <label>:3146                                    ; preds = %3138
  %3147 = call float @dx.op.unary.f32(i32 6, float %3126)  ; FAbs(value)
  br label %3227

; <label>:3148                                    ; preds = %3138
  %3149 = fmul fast float %3144, %3144
  %3150 = fsub fast float 1.000000e+00, %3149
  %3151 = call float @dx.op.unary.f32(i32 25, float %3150)  ; Rsqrt(value)
  %3152 = fmul fast float %3151, %1135
  %3153 = fmul fast float %3144, %3125
  %3154 = fsub fast float %3126, %3153
  %3155 = fmul fast float %3152, %3154
  %3156 = fmul fast float %3126, %3126
  %3157 = fmul fast float %3156, 2.000000e+00
  %3158 = fadd fast float %3157, -1.000000e+00
  %3159 = fmul fast float %3144, %3127
  %3160 = fsub fast float %3158, %3159
  %3161 = fmul fast float %3152, %3160
  %3162 = fmul fast float %3125, %3125
  %3163 = fsub fast float 1.000000e+00, %3162
  %3164 = fsub fast float %3163, %3156
  %3165 = fmul fast float %3127, %3127
  %3166 = fsub fast float %3164, %3165
  %3167 = fmul fast float %3143, %3127
  %3168 = fadd fast float %3166, %3167
  %3169 = call float @dx.op.unary.f32(i32 7, float %3168)  ; Saturate(value)
  %3170 = call float @dx.op.unary.f32(i32 24, float %3169)  ; Sqrt(value)
  %3171 = fmul fast float %3170, %3152
  %3172 = fmul fast float %3126, 2.000000e+00
  %3173 = fmul fast float %3172, %3152
  %3174 = fmul fast float %3173, %3170
  %3175 = fmul fast float %3141, %3125
  %3176 = fadd fast float %3175, %3126
  %3177 = fadd fast float %3176, %3155
  %3178 = fmul fast float %3141, %3127
  %3179 = fadd fast float %3178, 1.000000e+00
  %3180 = fadd fast float %3179, %3161
  %3181 = fmul fast float %3171, %3180
  %3182 = fmul fast float %3177, %3180
  %3183 = fmul fast float %3174, %3177
  %3184 = fmul fast float %3181, 5.000000e-01
  %3185 = fmul fast float %3177, 2.500000e-01
  %3186 = fmul fast float %3185, %3174
  %3187 = fsub fast float %3186, %3184
  %3188 = fmul fast float %3187, %3182
  %3189 = fmul fast float %3181, %3181
  %3190 = fmul fast float %3181, 2.000000e+00
  %3191 = fsub fast float %3183, %3190
  %3192 = fmul fast float %3191, %3183
  %3193 = fadd fast float %3192, %3189
  %3194 = fmul fast float %3180, %3180
  %3195 = fmul fast float %3194, %3176
  %3196 = fadd fast float %3180, %3178
  %3197 = fmul fast float %3196, 5.000000e-01
  %3198 = fsub fast float -5.000000e-01, %3197
  %3199 = fmul fast float %3198, %3182
  %3200 = fadd fast float %3199, %3195
  %3201 = fmul fast float %3200, %3177
  %3202 = fadd fast float %3193, %3201
  %3203 = fmul fast float %3188, 2.000000e+00
  %3204 = fmul fast float %3202, %3202
  %3205 = fmul fast float %3188, %3188
  %3206 = fadd fast float %3204, %3205
  %3207 = fdiv fast float %3203, %3206
  %3208 = fmul fast float %3202, %3207
  %3209 = fmul fast float %3188, %3207
  %3210 = fsub fast float 1.000000e+00, %3209
  %3211 = fmul fast float %3210, %3155
  %3212 = fmul fast float %3208, %3171
  %3213 = fmul fast float %3210, %3161
  %3214 = fmul fast float %3208, %3174
  %3215 = fadd fast float %3214, %3178
  %3216 = fadd fast float %3215, %3213
  %3217 = fmul fast float %3216, 2.000000e+00
  %3218 = fadd fast float %3217, 2.000000e+00
  %3219 = call float @dx.op.unary.f32(i32 25, float %3218)  ; Rsqrt(value)
  %3220 = fadd fast float %3176, %3212
  %3221 = fadd fast float %3220, %3211
  %3222 = fmul fast float %3221, %3219
  %3223 = call float @dx.op.unary.f32(i32 7, float %3222)  ; Saturate(value)
  %3224 = fmul fast float %3216, %3219
  %3225 = fadd fast float %3224, %3219
  %3226 = call float @dx.op.unary.f32(i32 7, float %3225)  ; Saturate(value)
  br label %3227

; <label>:3227                                    ; preds = %3148, %3146, %3120
  %3228 = phi float [ %3147, %3146 ], [ %3226, %3148 ], [ %3136, %3120 ]
  %3229 = phi float [ 1.000000e+00, %3146 ], [ %3223, %3148 ], [ %3133, %3120 ]
  %3230 = call float @dx.op.unary.f32(i32 6, float %3126)  ; FAbs(value)
  %3231 = fadd fast float %3230, 0x3EE4F8B580000000
  %3232 = call float @dx.op.unary.f32(i32 7, float %3231)  ; Saturate(value)
  %3233 = fmul fast float %1088, %1089
  %3234 = fmul fast float %1041, %1041
  %3235 = fmul fast float %3234, %3234
  %3236 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %3236, label %3237, label %3244

; <label>:3237                                    ; preds = %3227
  %3238 = fmul fast float %1137, %1137
  %3239 = fmul fast float %3228, 0x400CCCCCC0000000
  %3240 = fadd fast float %3239, 0x3FD99999A0000000
  %3241 = fdiv fast float %3238, %3240
  %3242 = fadd fast float %3241, %3235
  %3243 = call float @dx.op.unary.f32(i32 7, float %3242)  ; Saturate(value)
  br label %3244

; <label>:3244                                    ; preds = %3237, %3227
  %3245 = phi float [ %3243, %3237 ], [ %3235, %3227 ]
  br i1 %3137, label %3246, label %3259

; <label>:3246                                    ; preds = %3244
  %3247 = fmul fast float %1135, 2.500000e-01
  %3248 = bitcast float %3245 to i32
  %3249 = ashr i32 %3248, 1
  %3250 = add nsw i32 %3249, 532487669
  %3251 = bitcast i32 %3250 to float
  %3252 = fmul fast float %3251, 3.000000e+00
  %3253 = fadd fast float %3252, %1135
  %3254 = fmul fast float %3247, %3253
  %3255 = fadd fast float %3228, 0x3F50624DE0000000
  %3256 = fdiv fast float %3254, %3255
  %3257 = fadd fast float %3256, %3245
  %3258 = fdiv fast float %3245, %3257
  br label %3259

; <label>:3259                                    ; preds = %3246, %3244
  %3260 = phi float [ %3257, %3246 ], [ %3245, %3244 ]
  %3261 = phi float [ %3258, %3246 ], [ 1.000000e+00, %3244 ]
  %3262 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %3262, label %3263, label %3282

; <label>:3263                                    ; preds = %3259
  %3264 = fsub fast float 0x3FF00068E0000000, %1071
  %3265 = fadd fast float %1071, 1.000000e+00
  %3266 = fdiv fast float %3264, %3265
  %3267 = call float @dx.op.unary.f32(i32 24, float %3266)  ; Sqrt(value)
  %3268 = fmul fast float %3267, 2.500000e-01
  %3269 = bitcast float %3260 to i32
  %3270 = ashr i32 %3269, 1
  %3271 = add nsw i32 %3270, 532487669
  %3272 = bitcast i32 %3271 to float
  %3273 = fmul fast float %3272, 3.000000e+00
  %3274 = fadd fast float %3267, %3273
  %3275 = fmul fast float %3268, %3274
  %3276 = fadd fast float %3228, 0x3F50624DE0000000
  %3277 = fdiv fast float %3275, %3276
  %3278 = fadd fast float %3277, %3260
  %3279 = fdiv fast float %3260, %3278
  %3280 = call float @dx.op.unary.f32(i32 24, float %3279)  ; Sqrt(value)
  %3281 = fmul fast float %3280, %3261
  br label %3282

; <label>:3282                                    ; preds = %3263, %3259
  %3283 = phi float [ %3281, %3263 ], [ %3261, %3259 ]
  %3284 = fmul fast float %3245, %3229
  %3285 = fsub fast float %3284, %3229
  %3286 = fmul fast float %3285, %3229
  %3287 = fadd fast float %3286, 1.000000e+00
  %3288 = fmul fast float %3287, %3287
  %3289 = fmul fast float %3288, 0x400921FB60000000
  %3290 = fdiv fast float %3245, %3289
  %3291 = fmul fast float %3290, %3283
  %3292 = call float @dx.op.unary.f32(i32 24, float %3245)  ; Sqrt(value)
  %3293 = fsub fast float 1.000000e+00, %3292
  %3294 = fmul fast float %3293, %3232
  %3295 = fadd fast float %3294, %3292
  %3296 = fmul fast float %3295, %1088
  %3297 = fmul fast float %3293, %1088
  %3298 = fadd fast float %3297, %3292
  %3299 = fmul fast float %3298, %3232
  %3300 = fadd fast float %3296, %3299
  %3301 = fdiv fast float 5.000000e-01, %3300
  %3302 = fsub fast float 1.000000e+00, %3228
  %3303 = fmul fast float %3302, %3302
  %3304 = fmul fast float %3303, %3303
  %3305 = fmul fast float %3304, %3302
  %3306 = fmul fast float %213, 5.000000e+01
  %3307 = call float @dx.op.unary.f32(i32 7, float %3306)  ; Saturate(value)
  %3308 = fmul fast float %3307, %3305
  %3309 = fsub fast float 1.000000e+00, %3305
  %3310 = fmul fast float %3309, %212
  %3311 = fmul fast float %3309, %213
  %3312 = fmul fast float %3309, %214
  %3313 = fadd fast float %3308, %3310
  %3314 = fadd fast float %3308, %3311
  %3315 = fadd fast float %3308, %3312
  %3316 = fmul fast float %3291, %3301
  %3317 = fmul fast float %3316, %3233
  %3318 = fmul fast float %3317, %3313
  %3319 = fmul fast float %3317, %3314
  %3320 = fmul fast float %3317, %3315
  %3321 = fmul fast float %3229, %3235
  %3322 = fsub fast float %3229, %3321
  %3323 = fmul fast float %3322, %3229
  %3324 = fadd fast float %3323, %3235
  %3325 = fmul fast float %3235, 0x402921FB60000000
  %3326 = fadd fast float %3325, 0x400921FB60000000
  %3327 = fdiv fast float 1.000000e+00, %3326
  %3328 = fmul fast float %3235, %3235
  %3329 = fmul fast float %3328, 4.000000e+00
  %3330 = fmul fast float %3324, %3324
  %3331 = fdiv fast float %3329, %3330
  %3332 = fadd fast float %3331, 1.000000e+00
  %3333 = fmul fast float %3332, %3327
  %3334 = fadd fast float %3232, %1088
  %3335 = fmul fast float %3232, %1088
  %3336 = fsub fast float %3334, %3335
  %3337 = fdiv fast float 2.500000e-01, %3336
  %3338 = fmul fast float %3122, 5.000000e+01
  %3339 = call float @dx.op.unary.f32(i32 7, float %3338)  ; Saturate(value)
  %3340 = fmul fast float %3339, %3305
  %3341 = fmul fast float %3121, %3309
  %3342 = fmul fast float %3309, %3122
  %3343 = fmul fast float %3123, %3309
  %3344 = fadd fast float %3340, %3341
  %3345 = fadd fast float %3340, %3342
  %3346 = fadd fast float %3340, %3343
  %3347 = fmul fast float %3333, %3337
  %3348 = fmul fast float %3347, %3233
  %3349 = fmul fast float %3348, %3344
  %3350 = fmul fast float %3348, %3345
  %3351 = fmul fast float %3348, %3346
  %3352 = fmul fast float %201, 0x3FD45F3060000000
  %3353 = fmul fast float %202, 0x3FD45F3060000000
  %3354 = fmul fast float %203, 0x3FD45F3060000000
  %3355 = fmul fast float %3352, %3233
  %3356 = fmul fast float %3353, %3233
  %3357 = fmul fast float %3354, %3233
  %3358 = fsub fast float %3349, %3318
  %3359 = fsub fast float %3350, %3319
  %3360 = fsub fast float %3351, %3320
  %3361 = fmul fast float %3358, %3124
  %3362 = fmul fast float %3359, %3124
  %3363 = fmul fast float %3360, %3124
  %3364 = fadd fast float %3361, %3318
  %3365 = fadd fast float %3362, %3319
  %3366 = fadd fast float %3363, %3320
  br label %3729

; <label>:3367                                    ; preds = %1121
  %3368 = fmul fast float %122, 2.000000e+00
  %3369 = fmul fast float %123, 2.000000e+00
  %3370 = fadd fast float %3368, -1.000000e+00
  %3371 = fadd fast float %3369, -1.000000e+00
  %3372 = call float @dx.op.unary.f32(i32 6, float %3370)  ; FAbs(value)
  %3373 = call float @dx.op.unary.f32(i32 6, float %3371)  ; FAbs(value)
  %3374 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %3372, float %3373)  ; Dot2(ax,ay,bx,by)
  %3375 = fsub fast float 1.000000e+00, %3374
  %3376 = fsub fast float -0.000000e+00, %3375
  %3377 = call float @dx.op.binary.f32(i32 35, float %3376, float 0.000000e+00)  ; FMax(a,b)
  %3378 = fsub fast float -0.000000e+00, %3377
  %3379 = fcmp fast oge float %3370, 0.000000e+00
  %3380 = fcmp fast oge float %3371, 0.000000e+00
  %3381 = select i1 %3379, float %3378, float %3377
  %3382 = select i1 %3380, float %3378, float %3377
  %3383 = fadd fast float %3381, %3370
  %3384 = fadd fast float %3382, %3371
  %3385 = call float @dx.op.dot3.f32(i32 55, float %3383, float %3384, float %3375, float %3383, float %3384, float %3375)  ; Dot3(ax,ay,az,bx,by,bz)
  %3386 = call float @dx.op.unary.f32(i32 25, float %3385)  ; Rsqrt(value)
  %3387 = fmul fast float %3383, %3386
  %3388 = fmul fast float %3384, %3386
  %3389 = fmul fast float %3386, %3375
  %3390 = fsub fast float 1.000000e+00, %124
  %3391 = fmul fast float %3390, %66
  %3392 = fsub fast float -0.000000e+00, %140
  %3393 = fsub fast float -0.000000e+00, %141
  %3394 = fsub fast float -0.000000e+00, %142
  %3395 = fsub fast float %3392, %3387
  %3396 = fsub fast float %3393, %3388
  %3397 = fsub fast float %3394, %3389
  %3398 = fmul fast float %3395, %3391
  %3399 = fmul fast float %3396, %3391
  %3400 = fmul fast float %3397, %3391
  %3401 = fadd fast float %3398, %3387
  %3402 = fadd fast float %3399, %3388
  %3403 = fadd fast float %3400, %3389
  %3404 = call float @dx.op.dot3.f32(i32 55, float %3401, float %3402, float %3403, float %3401, float %3402, float %3403)  ; Dot3(ax,ay,az,bx,by,bz)
  %3405 = call float @dx.op.unary.f32(i32 25, float %3404)  ; Rsqrt(value)
  %3406 = fmul fast float %3401, %3405
  %3407 = fmul fast float %3402, %3405
  %3408 = fmul fast float %3403, %3405
  %3409 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3410 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %3411 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3412 = fmul fast float %3411, 2.000000e+00
  %3413 = fadd fast float %3412, 2.000000e+00
  %3414 = call float @dx.op.unary.f32(i32 25, float %3413)  ; Rsqrt(value)
  %3415 = fadd fast float %3410, %3409
  %3416 = fmul fast float %3414, %3415
  %3417 = call float @dx.op.unary.f32(i32 7, float %3416)  ; Saturate(value)
  %3418 = fmul fast float %3414, %3411
  %3419 = fadd fast float %3418, %3414
  %3420 = call float @dx.op.unary.f32(i32 7, float %3419)  ; Saturate(value)
  %3421 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %3421, label %3422, label %3459

; <label>:3422                                    ; preds = %3367
  %3423 = fmul fast float %1135, %1135
  %3424 = fsub fast float 1.000000e+00, %3423
  %3425 = call float @dx.op.unary.f32(i32 24, float %3424)  ; Sqrt(value)
  %3426 = fmul fast float %3409, 2.000000e+00
  %3427 = fmul fast float %3426, %3410
  %3428 = fsub fast float %3427, %3411
  %3429 = fcmp fast ult float %3428, %3425
  br i1 %3429, label %3432, label %3430

; <label>:3430                                    ; preds = %3422
  %3431 = call float @dx.op.unary.f32(i32 6, float %3410)  ; FAbs(value)
  br label %3459

; <label>:3432                                    ; preds = %3422
  %3433 = fmul fast float %3428, %3428
  %3434 = fsub fast float 1.000000e+00, %3433
  %3435 = call float @dx.op.unary.f32(i32 25, float %3434)  ; Rsqrt(value)
  %3436 = fmul fast float %3435, %1135
  %3437 = fmul fast float %3428, %3409
  %3438 = fsub fast float %3410, %3437
  %3439 = fmul fast float %3436, %3438
  %3440 = fmul fast float %3410, %3410
  %3441 = fmul fast float %3440, 2.000000e+00
  %3442 = fadd fast float %3441, -1.000000e+00
  %3443 = fmul fast float %3428, %3411
  %3444 = fsub fast float %3442, %3443
  %3445 = fmul fast float %3436, %3444
  %3446 = fmul fast float %3425, %3409
  %3447 = fmul fast float %3425, %3411
  %3448 = fadd fast float %3445, %3447
  %3449 = fmul fast float %3448, 2.000000e+00
  %3450 = fadd fast float %3449, 2.000000e+00
  %3451 = call float @dx.op.unary.f32(i32 25, float %3450)  ; Rsqrt(value)
  %3452 = fadd fast float %3446, %3410
  %3453 = fadd fast float %3452, %3439
  %3454 = fmul fast float %3453, %3451
  %3455 = call float @dx.op.unary.f32(i32 7, float %3454)  ; Saturate(value)
  %3456 = fmul fast float %3448, %3451
  %3457 = fadd fast float %3456, %3451
  %3458 = call float @dx.op.unary.f32(i32 7, float %3457)  ; Saturate(value)
  br label %3459

; <label>:3459                                    ; preds = %3432, %3430, %3367
  %3460 = phi float [ %3431, %3430 ], [ %3458, %3432 ], [ %3420, %3367 ]
  %3461 = phi float [ 1.000000e+00, %3430 ], [ %3455, %3432 ], [ %3417, %3367 ]
  %3462 = call float @dx.op.unary.f32(i32 6, float %3410)  ; FAbs(value)
  %3463 = fadd fast float %3462, 0x3EE4F8B580000000
  %3464 = call float @dx.op.unary.f32(i32 7, float %3463)  ; Saturate(value)
  %3465 = fmul fast float %186, 0x3FB47AE140000000
  %3466 = fsub fast float 1.000000e+00, %3460
  %3467 = fmul fast float %3466, %3466
  %3468 = fmul fast float %3467, %3467
  %3469 = fmul fast float %3468, %3466
  %3470 = fsub fast float 1.000000e+00, %3469
  %3471 = fmul fast float %3465, %3470
  %3472 = fadd fast float %3471, %3469
  %3473 = fmul fast float %1041, %1041
  %3474 = fmul fast float %3473, %3473
  %3475 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %3475, label %3476, label %3483

; <label>:3476                                    ; preds = %3459
  %3477 = fmul fast float %1137, %1137
  %3478 = fmul fast float %3460, 0x400CCCCCC0000000
  %3479 = fadd fast float %3478, 0x3FD99999A0000000
  %3480 = fdiv fast float %3477, %3479
  %3481 = fadd fast float %3480, %3474
  %3482 = call float @dx.op.unary.f32(i32 7, float %3481)  ; Saturate(value)
  br label %3483

; <label>:3483                                    ; preds = %3476, %3459
  %3484 = phi float [ %3482, %3476 ], [ %3474, %3459 ]
  br i1 %3421, label %3485, label %3498

; <label>:3485                                    ; preds = %3483
  %3486 = fmul fast float %1135, 2.500000e-01
  %3487 = bitcast float %3484 to i32
  %3488 = ashr i32 %3487, 1
  %3489 = add nsw i32 %3488, 532487669
  %3490 = bitcast i32 %3489 to float
  %3491 = fmul fast float %3490, 3.000000e+00
  %3492 = fadd fast float %3491, %1135
  %3493 = fmul fast float %3486, %3492
  %3494 = fadd fast float %3460, 0x3F50624DE0000000
  %3495 = fdiv fast float %3493, %3494
  %3496 = fadd fast float %3495, %3484
  %3497 = fdiv fast float %3484, %3496
  br label %3498

; <label>:3498                                    ; preds = %3485, %3483
  %3499 = phi float [ %3496, %3485 ], [ %3484, %3483 ]
  %3500 = phi float [ %3497, %3485 ], [ 1.000000e+00, %3483 ]
  %3501 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %3501, label %3502, label %3521

; <label>:3502                                    ; preds = %3498
  %3503 = fsub fast float 0x3FF00068E0000000, %1071
  %3504 = fadd fast float %1071, 1.000000e+00
  %3505 = fdiv fast float %3503, %3504
  %3506 = call float @dx.op.unary.f32(i32 24, float %3505)  ; Sqrt(value)
  %3507 = fmul fast float %3506, 2.500000e-01
  %3508 = bitcast float %3499 to i32
  %3509 = ashr i32 %3508, 1
  %3510 = add nsw i32 %3509, 532487669
  %3511 = bitcast i32 %3510 to float
  %3512 = fmul fast float %3511, 3.000000e+00
  %3513 = fadd fast float %3506, %3512
  %3514 = fmul fast float %3507, %3513
  %3515 = fadd fast float %3460, 0x3F50624DE0000000
  %3516 = fdiv fast float %3514, %3515
  %3517 = fadd fast float %3516, %3499
  %3518 = fdiv fast float %3499, %3517
  %3519 = call float @dx.op.unary.f32(i32 24, float %3518)  ; Sqrt(value)
  %3520 = fmul fast float %3519, %3500
  br label %3521

; <label>:3521                                    ; preds = %3502, %3498
  %3522 = phi float [ %3520, %3502 ], [ %3500, %3498 ]
  %3523 = call float @dx.op.unary.f32(i32 24, float %3484)  ; Sqrt(value)
  %3524 = fsub fast float 1.000000e+00, %3523
  %3525 = fmul fast float %3524, %3464
  %3526 = fadd fast float %3525, %3523
  %3527 = fmul fast float %3526, %1088
  %3528 = fmul fast float %3524, %1088
  %3529 = fadd fast float %3528, %3523
  %3530 = fmul fast float %3529, %3464
  %3531 = fadd fast float %3527, %3530
  %3532 = fdiv fast float 5.000000e-01, %3531
  %3533 = fmul fast float %3484, %3461
  %3534 = fsub fast float %3533, %3461
  %3535 = fmul fast float %3534, %3461
  %3536 = fadd fast float %3535, 1.000000e+00
  %3537 = fmul fast float %3536, %3536
  %3538 = fmul fast float %3537, 0x400921FB60000000
  %3539 = fdiv fast float %3484, %3538
  %3540 = fmul fast float %3539, %3522
  %3541 = fmul fast float %1088, %1089
  %3542 = fmul fast float %3472, %3541
  %3543 = fmul fast float %3542, %3532
  %3544 = fmul fast float %3543, %3540
  %3545 = call float @dx.op.dot3.f32(i32 55, float %3387, float %3388, float %3389, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3546 = call float @dx.op.unary.f32(i32 7, float %3545)  ; Saturate(value)
  %3547 = fmul fast float %3546, 1.100000e+01
  %3548 = fsub fast float 1.200000e+01, %3547
  %3549 = fmul fast float %3546, 0x40019999A0000000
  %3550 = fsub fast float 0x4004CCCCE0000000, %3549
  %3551 = call float @dx.op.dot3.f32(i32 55, float %3406, float %3407, float %3408, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3552 = call float @dx.op.unary.f32(i32 7, float %3551)  ; Saturate(value)
  %3553 = call float @dx.op.unary.f32(i32 23, float %3552)  ; Log(value)
  %3554 = fmul fast float %3553, %3548
  %3555 = call float @dx.op.unary.f32(i32 21, float %3554)  ; Exp(value)
  %3556 = fmul fast float %3555, %3550
  %3557 = fadd fast float %3556, 0x3FE99999A0000000
  %3558 = fmul fast float %3557, %3546
  %3559 = fsub fast float 1.000000e+00, %3472
  %3560 = fsub fast float %3558, %1088
  %3561 = fmul fast float %3560, %3390
  %3562 = fadd fast float %3561, %1088
  %3563 = fmul fast float %3559, %1089
  %3564 = fmul fast float %3563, %3562
  %3565 = fmul fast float %201, 0x3FD45F3060000000
  %3566 = fmul fast float %202, 0x3FD45F3060000000
  %3567 = fmul fast float %203, 0x3FD45F3060000000
  %3568 = fmul fast float %3565, %3564
  %3569 = fmul fast float %3566, %3564
  %3570 = fmul fast float %3567, %3564
  br label %3729

; <label>:3571                                    ; preds = %1121
  %3572 = fmul fast float %259, %141
  %3573 = fmul fast float %258, %142
  %3574 = fsub fast float %3572, %3573
  %3575 = fmul fast float %257, %142
  %3576 = fmul fast float %259, %140
  %3577 = fsub fast float %3575, %3576
  %3578 = fmul fast float %258, %140
  %3579 = fmul fast float %257, %141
  %3580 = fsub fast float %3578, %3579
  %3581 = call float @dx.op.dot3.f32(i32 55, float %3574, float %3577, float %3580, float %3574, float %3577, float %3580)  ; Dot3(ax,ay,az,bx,by,bz)
  %3582 = call float @dx.op.unary.f32(i32 25, float %3581)  ; Rsqrt(value)
  %3583 = fmul fast float %3582, %3574
  %3584 = fmul fast float %3582, %3577
  %3585 = fmul fast float %3582, %3580
  %3586 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3587 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %3588 = call float @dx.op.dot3.f32(i32 55, float %612, float %613, float %614, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3589 = fmul fast float %3588, 2.000000e+00
  %3590 = fadd fast float %3589, 2.000000e+00
  %3591 = call float @dx.op.unary.f32(i32 25, float %3590)  ; Rsqrt(value)
  %3592 = fadd fast float %3587, %3586
  %3593 = fmul fast float %3591, %3592
  %3594 = call float @dx.op.unary.f32(i32 7, float %3593)  ; Saturate(value)
  %3595 = fmul fast float %3591, %3588
  %3596 = fadd fast float %3595, %3591
  %3597 = call float @dx.op.unary.f32(i32 7, float %3596)  ; Saturate(value)
  %3598 = call float @dx.op.dot3.f32(i32 55, float %257, float %258, float %259, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %3599 = call float @dx.op.dot3.f32(i32 55, float %257, float %258, float %259, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3600 = fadd fast float %3599, %3598
  %3601 = fmul fast float %3600, %3591
  %3602 = call float @dx.op.dot3.f32(i32 55, float %3583, float %3584, float %3585, float %612, float %613, float %614)  ; Dot3(ax,ay,az,bx,by,bz)
  %3603 = call float @dx.op.dot3.f32(i32 55, float %3583, float %3584, float %3585, float %1127, float %1128, float %1129)  ; Dot3(ax,ay,az,bx,by,bz)
  %3604 = fadd fast float %3603, %3602
  %3605 = fmul fast float %3604, %3591
  %3606 = call float @dx.op.unary.f32(i32 6, float %3587)  ; FAbs(value)
  %3607 = fadd fast float %3606, 0x3EE4F8B580000000
  %3608 = call float @dx.op.unary.f32(i32 7, float %3607)  ; Saturate(value)
  %3609 = fmul fast float %1088, %1089
  %3610 = fmul fast float %201, 0x3FD45F3060000000
  %3611 = fmul fast float %202, 0x3FD45F3060000000
  %3612 = fmul fast float %203, 0x3FD45F3060000000
  %3613 = fmul fast float %3610, %3609
  %3614 = fmul fast float %3611, %3609
  %3615 = fmul fast float %3612, %3609
  %3616 = fmul fast float %1041, %1041
  %3617 = fmul fast float %3616, %3616
  %3618 = fadd fast float %260, 1.000000e+00
  %3619 = fmul fast float %3616, %3618
  %3620 = call float @dx.op.binary.f32(i32 35, float %3619, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3621 = fsub fast float 1.000000e+00, %260
  %3622 = fmul fast float %3616, %3621
  %3623 = call float @dx.op.binary.f32(i32 35, float %3622, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3624 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %3624, label %3625, label %3632

; <label>:3625                                    ; preds = %3571
  %3626 = fmul fast float %1137, %1137
  %3627 = fmul fast float %3597, 0x400CCCCCC0000000
  %3628 = fadd fast float %3627, 0x3FD99999A0000000
  %3629 = fdiv fast float %3626, %3628
  %3630 = fadd fast float %3629, %3617
  %3631 = call float @dx.op.unary.f32(i32 7, float %3630)  ; Saturate(value)
  br label %3632

; <label>:3632                                    ; preds = %3625, %3571
  %3633 = phi float [ %3631, %3625 ], [ %3617, %3571 ]
  %3634 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %3634, label %3635, label %3648

; <label>:3635                                    ; preds = %3632
  %3636 = fmul fast float %1135, 2.500000e-01
  %3637 = bitcast float %3633 to i32
  %3638 = ashr i32 %3637, 1
  %3639 = add nsw i32 %3638, 532487669
  %3640 = bitcast i32 %3639 to float
  %3641 = fmul fast float %3640, 3.000000e+00
  %3642 = fadd fast float %3641, %1135
  %3643 = fmul fast float %3636, %3642
  %3644 = fadd fast float %3597, 0x3F50624DE0000000
  %3645 = fdiv fast float %3643, %3644
  %3646 = fadd fast float %3645, %3633
  %3647 = fdiv fast float %3633, %3646
  br label %3648

; <label>:3648                                    ; preds = %3635, %3632
  %3649 = phi float [ %3646, %3635 ], [ %3633, %3632 ]
  %3650 = phi float [ %3647, %3635 ], [ 1.000000e+00, %3632 ]
  %3651 = fcmp fast olt float %1071, 1.000000e+00
  br i1 %3651, label %3652, label %3671

; <label>:3652                                    ; preds = %3648
  %3653 = fsub fast float 0x3FF00068E0000000, %1071
  %3654 = fadd fast float %1071, 1.000000e+00
  %3655 = fdiv fast float %3653, %3654
  %3656 = call float @dx.op.unary.f32(i32 24, float %3655)  ; Sqrt(value)
  %3657 = fmul fast float %3656, 2.500000e-01
  %3658 = bitcast float %3649 to i32
  %3659 = ashr i32 %3658, 1
  %3660 = add nsw i32 %3659, 532487669
  %3661 = bitcast i32 %3660 to float
  %3662 = fmul fast float %3661, 3.000000e+00
  %3663 = fadd fast float %3656, %3662
  %3664 = fmul fast float %3657, %3663
  %3665 = fadd fast float %3597, 0x3F50624DE0000000
  %3666 = fdiv fast float %3664, %3665
  %3667 = fadd fast float %3666, %3649
  %3668 = fdiv fast float %3649, %3667
  %3669 = call float @dx.op.unary.f32(i32 24, float %3668)  ; Sqrt(value)
  %3670 = fmul fast float %3669, %3650
  br label %3671

; <label>:3671                                    ; preds = %3652, %3648
  %3672 = phi float [ %3670, %3652 ], [ %3650, %3648 ]
  %3673 = fmul fast float %3623, %3620
  %3674 = fmul fast float %3601, %3623
  %3675 = fmul fast float %3605, %3620
  %3676 = fmul fast float %3673, %3594
  %3677 = call float @dx.op.dot3.f32(i32 55, float %3674, float %3675, float %3676, float %3674, float %3675, float %3676)  ; Dot3(ax,ay,az,bx,by,bz)
  %3678 = fdiv fast float %3673, %3677
  %3679 = fmul fast float %3673, 0x3FD45F3060000000
  %3680 = fmul fast float %3678, %3678
  %3681 = fmul fast float %3680, %3679
  %3682 = call float @dx.op.unary.f32(i32 23, float %3681)  ; Log(value)
  %3683 = fmul fast float %3682, 1.500000e+00
  %3684 = call float @dx.op.unary.f32(i32 21, float %3683)  ; Exp(value)
  %3685 = call float @dx.op.binary.f32(i32 35, float %3684, float 0.000000e+00)  ; FMax(a,b)
  %3686 = call float @dx.op.binary.f32(i32 36, float %3685, float 3.000000e+00)  ; FMin(a,b)
  %3687 = fmul fast float %3686, %261
  %3688 = fadd fast float %3687, %3681
  %3689 = fmul fast float %3688, %3672
  %3690 = fmul fast float %3620, %3598
  %3691 = fmul fast float %3623, %3602
  %3692 = fmul fast float %3690, %3690
  %3693 = fmul fast float %3691, %3691
  %3694 = fmul fast float %3608, %3608
  %3695 = fadd fast float %3692, %3694
  %3696 = fadd fast float %3695, %3693
  %3697 = call float @dx.op.unary.f32(i32 24, float %3696)  ; Sqrt(value)
  %3698 = fmul fast float %3697, %1088
  %3699 = fmul fast float %3620, %3599
  %3700 = fmul fast float %3623, %3603
  %3701 = fmul fast float %3699, %3699
  %3702 = fmul fast float %3700, %3700
  %3703 = fmul fast float %1088, %1088
  %3704 = fadd fast float %3701, %3703
  %3705 = fadd fast float %3704, %3702
  %3706 = call float @dx.op.unary.f32(i32 24, float %3705)  ; Sqrt(value)
  %3707 = fmul fast float %3706, %3608
  %3708 = fadd fast float %3707, %3698
  %3709 = fdiv fast float 5.000000e-01, %3708
  %3710 = fsub fast float 1.000000e+00, %3597
  %3711 = fmul fast float %3710, %3710
  %3712 = fmul fast float %3711, %3711
  %3713 = fmul fast float %3712, %3710
  %3714 = fmul fast float %213, 5.000000e+01
  %3715 = call float @dx.op.unary.f32(i32 7, float %3714)  ; Saturate(value)
  %3716 = fmul fast float %3715, %3713
  %3717 = fsub fast float 1.000000e+00, %3713
  %3718 = fmul fast float %3717, %212
  %3719 = fmul fast float %3717, %213
  %3720 = fmul fast float %3717, %214
  %3721 = fadd fast float %3716, %3718
  %3722 = fadd fast float %3716, %3719
  %3723 = fadd fast float %3716, %3720
  %3724 = fmul fast float %3689, %3709
  %3725 = fmul fast float %3724, %3609
  %3726 = fmul fast float %3725, %3721
  %3727 = fmul fast float %3725, %3722
  %3728 = fmul fast float %3725, %3723
  br label %3729

; <label>:3729                                    ; preds = %3671, %3521, %3282, %3045, %2740, %2524, %2239, %1820, %1592, %1302, %1121
  %3730 = phi float [ 0.000000e+00, %3671 ], [ %3568, %3521 ], [ 0.000000e+00, %3282 ], [ %3115, %3045 ], [ %2796, %2740 ], [ 0.000000e+00, %2524 ], [ 0.000000e+00, %2239 ], [ %1871, %1820 ], [ %1653, %1592 ], [ 0.000000e+00, %1302 ], [ 0.000000e+00, %1121 ]
  %3731 = phi float [ 0.000000e+00, %3671 ], [ %3569, %3521 ], [ 0.000000e+00, %3282 ], [ %3117, %3045 ], [ %2797, %2740 ], [ 0.000000e+00, %2524 ], [ 0.000000e+00, %2239 ], [ %1874, %1820 ], [ %1654, %1592 ], [ 0.000000e+00, %1302 ], [ 0.000000e+00, %1121 ]
  %3732 = phi float [ 0.000000e+00, %3671 ], [ %3570, %3521 ], [ 0.000000e+00, %3282 ], [ %3119, %3045 ], [ %2798, %2740 ], [ 0.000000e+00, %2524 ], [ 0.000000e+00, %2239 ], [ %1877, %1820 ], [ %1655, %1592 ], [ 0.000000e+00, %1302 ], [ 0.000000e+00, %1121 ]
  %3733 = phi float [ %3726, %3671 ], [ %3544, %3521 ], [ %3364, %3282 ], [ 0.000000e+00, %3045 ], [ %2776, %2740 ], [ %2571, %2524 ], [ %2262, %2239 ], [ %1856, %1820 ], [ %1541, %1592 ], [ %1338, %1302 ], [ 0.000000e+00, %1121 ]
  %3734 = phi float [ %3727, %3671 ], [ %3544, %3521 ], [ %3365, %3282 ], [ 0.000000e+00, %3045 ], [ %2777, %2740 ], [ %2573, %2524 ], [ %2263, %2239 ], [ %1857, %1820 ], [ %1542, %1592 ], [ %1339, %1302 ], [ 0.000000e+00, %1121 ]
  %3735 = phi float [ %3728, %3671 ], [ %3544, %3521 ], [ %3366, %3282 ], [ 0.000000e+00, %3045 ], [ %2778, %2740 ], [ %2575, %2524 ], [ %2264, %2239 ], [ %1858, %1820 ], [ %1543, %1592 ], [ %1340, %1302 ], [ 0.000000e+00, %1121 ]
  %3736 = phi float [ %3613, %3671 ], [ 0.000000e+00, %3521 ], [ %3355, %3282 ], [ 0.000000e+00, %3045 ], [ %2689, %2740 ], [ %2421, %2524 ], [ %2152, %2239 ], [ %1769, %1820 ], [ %1454, %1592 ], [ %1251, %1302 ], [ 0.000000e+00, %1121 ]
  %3737 = phi float [ %3614, %3671 ], [ 0.000000e+00, %3521 ], [ %3356, %3282 ], [ 0.000000e+00, %3045 ], [ %2690, %2740 ], [ %2423, %2524 ], [ %2153, %2239 ], [ %1770, %1820 ], [ %1455, %1592 ], [ %1252, %1302 ], [ 0.000000e+00, %1121 ]
  %3738 = phi float [ %3615, %3671 ], [ 0.000000e+00, %3521 ], [ %3357, %3282 ], [ 0.000000e+00, %3045 ], [ %2691, %2740 ], [ %2425, %2524 ], [ %2154, %2239 ], [ %1771, %1820 ], [ %1456, %1592 ], [ %1253, %1302 ], [ 0.000000e+00, %1121 ]
  %3739 = fmul fast float %1025, %648
  %3740 = fmul fast float %1025, %649
  %3741 = fmul fast float %1025, %650
  br i1 %156, label %3742, label %3751

; <label>:3742                                    ; preds = %3729
  %3743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3744 = extractvalue %dx.types.CBufRet.f32 %3743, 2
  %3745 = fcmp fast oeq float %3744, 0.000000e+00
  br i1 %3745, label %3746, label %3751

; <label>:3746                                    ; preds = %3742
  %3747 = fmul fast float %3736, %3739
  %3748 = fmul fast float %3737, %3740
  %3749 = fmul fast float %3738, %3741
  %3750 = call float @dx.op.dot3.f32(i32 55, float %3747, float %3748, float %3749, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %3751

; <label>:3751                                    ; preds = %3746, %3742, %3729
  %3752 = phi float [ %3750, %3746 ], [ 0.000000e+00, %3742 ], [ 0.000000e+00, %3729 ]
  %3753 = fmul fast float %3736, %3739
  %3754 = fmul fast float %3737, %3740
  %3755 = fmul fast float %3738, %3741
  %3756 = fmul fast float %3739, %345
  %3757 = fmul fast float %3756, %3733
  %3758 = fmul fast float %3740, %345
  %3759 = fmul fast float %3758, %3734
  %3760 = fmul fast float %3741, %345
  %3761 = fmul fast float %3760, %3735
  %3762 = fmul fast float %1024, %648
  %3763 = fmul fast float %1024, %649
  %3764 = fmul fast float %1024, %650
  br i1 %156, label %3765, label %3775

; <label>:3765                                    ; preds = %3751
  %3766 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3767 = extractvalue %dx.types.CBufRet.f32 %3766, 2
  %3768 = fcmp fast oeq float %3767, 0.000000e+00
  br i1 %3768, label %3769, label %3775

; <label>:3769                                    ; preds = %3765
  %3770 = fmul fast float %3730, %3762
  %3771 = fmul fast float %3731, %3763
  %3772 = fmul fast float %3732, %3764
  %3773 = call float @dx.op.dot3.f32(i32 55, float %3770, float %3771, float %3772, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3774 = fadd fast float %3773, %3752
  br label %3775

; <label>:3775                                    ; preds = %3769, %3765, %3751
  %3776 = phi float [ %3774, %3769 ], [ %3752, %3765 ], [ %3752, %3751 ]
  %3777 = fmul fast float %3730, %3762
  %3778 = fmul fast float %3731, %3763
  %3779 = fmul fast float %3732, %3764
  %3780 = fadd fast float %3753, %3777
  %3781 = fadd fast float %3754, %3778
  %3782 = fadd fast float %3755, %3779
  br label %3783

; <label>:3783                                    ; preds = %3775, %1023, %640
  %3784 = phi float [ %3757, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3785 = phi float [ %3759, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3786 = phi float [ %3761, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3787 = phi float [ %3780, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3788 = phi float [ %3781, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3789 = phi float [ %3782, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3790 = phi float [ %3776, %3775 ], [ 0.000000e+00, %1023 ], [ 0.000000e+00, %640 ]
  %3791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3792 = extractvalue %dx.types.CBufRet.f32 %3791, 2
  %3793 = fcmp fast oeq float %3792, 0.000000e+00
  %3794 = select i1 %3793, float %3790, float 0.000000e+00
  %3795 = fadd fast float %3787, %3784
  %3796 = fadd fast float %3788, %3785
  %3797 = fadd fast float %3789, %3786
  br label %3798

; <label>:3798                                    ; preds = %3783, %266, %256
  %3799 = phi float [ %3795, %3783 ], [ 0.000000e+00, %266 ], [ 0.000000e+00, %256 ]
  %3800 = phi float [ %3796, %3783 ], [ 0.000000e+00, %266 ], [ 0.000000e+00, %256 ]
  %3801 = phi float [ %3797, %3783 ], [ 0.000000e+00, %266 ], [ 0.000000e+00, %256 ]
  %3802 = phi float [ %3794, %3783 ], [ 0.000000e+00, %266 ], [ 0.000000e+00, %256 ]
  %3803 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %3804 = extractvalue %dx.types.CBufRet.f32 %3803, 1
  %3805 = fmul fast float %3804, %3799
  %3806 = fmul fast float %3804, %3800
  %3807 = fmul fast float %3804, %3801
  %3808 = fmul fast float %3804, %3802
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %3805)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3806)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %3807)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %3808)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!29}
!dx.entryPoints = !{!30}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !21, !24}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!15 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!16 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!17 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!18 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!19 = !{i32 12, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !20}
!20 = !{i32 0, i32 5}
!21 = !{!22, !23}
!22 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5420, null}
!23 = !{i32 1, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 1, i32 1, i32 160, null}
!24 = !{!25, !26, !27, !28}
!25 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!26 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!27 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!28 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!29 = !{[10 x i32] [i32 8, i32 4, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 0]}
!30 = !{void ()* @DeferredLightPixelMain, !"DeferredLightPixelMain", !31, !4, !41}
!31 = !{!32, !38, null}
!32 = !{!33, !36}
!33 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !34, i8 2, i32 1, i8 4, i32 0, i8 0, !35}
!34 = !{i32 0}
!35 = !{i32 3, i32 11}
!36 = !{i32 1, !"SV_Position", i8 9, i8 3, !34, i8 4, i32 1, i8 4, i32 1, i8 0, !37}
!37 = !{i32 3, i32 3}
!38 = !{!39}
!39 = !{i32 0, !"SV_Target", i8 9, i8 16, !34, i8 0, i32 1, i8 4, i32 0, i8 0, !40}
!40 = !{i32 3, i32 15}
!41 = !{i32 5, !34}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 1}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
 