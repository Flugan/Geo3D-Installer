//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbSurfRideVp
// {
//
//   row_major float4x4 u_world_matrix; // Offset:    0 Size:    64
//   row_major float4x4 u_view_matrix;  // Offset:   64 Size:    64
//   row_major float4x4 u_proj_matrix;  // Offset:  128 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbSurfRideVp                      cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// TEXCOORD                 1   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[12], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v4.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4
mov r0.xyz, v0.xyzx
mov r0.w, l(1.0)
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mul r2.xyzw, r0.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, r0.xxxx, cb0[4].xyzw
mul r2.xyzw, r0.yyyy, cb0[5].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[6].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.wwww, cb0[7].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyz, r0.xxxx, cb0[8].xywx
mul r2.xyz, r0.yyyy, cb0[9].xywx
add r1.xyz, r1.xyzx, r2.xyzx
mul r0.xyz, r0.zzzz, cb0[10].xywx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, r0.wwww, cb0[11].xywx
add r0.xyz, r0.xyzx, r1.xyzx
mov r0.xyz, r0.xyzx
mov r0.w, l(0.5)
mov r1.xyzw, v1.xyzw
mov r2.xyzw, v2.xyzw
mul r2.xyz, r2.wwww, r2.xyzx
mov r2.w, l(0)
mov r3.xy, v3.xyxx
mov r3.zw, v4.xxxy
mov o0.xyw, r0.xyxz
mov o0.z, r0.w
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r2.xyzw
mov o3.xyzw, r3.xyzw
ret 
// Approximately 37 instruction slots used
