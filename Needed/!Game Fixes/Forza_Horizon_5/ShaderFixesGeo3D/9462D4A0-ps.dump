;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyz 
; Color                    0   xyzw        1     NONE   float   xyzw
; TexCoord                 0   xy          2     NONE   float   xy  
; VERTEX_FOG_PARAMS        0     z         2     NONE   float     z 
; VERTEX_FOG_PARAMS0y      0      w        2     NONE   float      w
; VERTEX_FOG_PARAMS0z      0   x           3     NONE   float   x   
; VERTEX_FOG_PARAMS0w      0    y          3     NONE   float    y  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: D:\scratch\p4\woodstock_rc\CodeShaders\pdb\GamingDesktop\RaceLineRenderer.pshader.pdb
; shader hash: f31f72851ff9c653c521f2c5399c658c
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; Color                    0                 linear       
; TexCoord                 0                 linear       
; VERTEX_FOG_PARAMS        0                 linear       
; VERTEX_FOG_PARAMS0y      0                 linear       
; VERTEX_FOG_PARAMS0z      0                 linear       
; VERTEX_FOG_PARAMS0w      0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [480 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1            s13     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          3d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 14, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 10, 13 }
;   output 1 depends on inputs: { 0, 1, 2, 5, 11, 13 }
;   output 2 depends on inputs: { 0, 1, 2, 6, 12, 13 }
;   output 3 depends on inputs: { 7, 8, 9 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%dx.alignment.legacy.PSConstants = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, %struct.FogVolumeParams }
%struct.FogVolumeParams = type { <4 x float>, [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <3 x float>, float, float, float, float, float, float, float, float, i32, %struct.FogVolumeParams_Approx }
%struct.FogVolumeParams_Approx = type { <3 x float>, float, <3 x float>, float, <3 x float>, float }
%struct.SamplerState = type { i32 }

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 13, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %3, float %10, float %11, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 3
  %20 = fmul fast float %19, %15
  %21 = fmul fast float %6, 3.000000e+00
  %22 = fmul fast float %21, %12
  %23 = fmul fast float %21, %13
  %24 = fmul fast float %21, %14
  %25 = fadd fast float %22, %9
  %26 = fadd fast float %23, %8
  %27 = fadd fast float %24, %7
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = fcmp fast ogt float %29, 0x3FB99999A0000000
  br i1 %30, label %31, label %80

; <label>:31                                      ; preds = %0
  %32 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.i32 %32, 3
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %80, label %35, !dx.controlflow.hints !33

; <label>:35                                      ; preds = %31
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = fsub fast float 1.000000e+00, %36
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = fadd fast float %39, -1.000000e+00
  %41 = fdiv fast float %16, %40
  %42 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %43 = fadd fast float %42, -1.000000e+00
  %44 = fdiv fast float %17, %43
  %45 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %46 = fsub fast float -0.000000e+00, %45
  %47 = extractvalue %dx.types.CBufRet.f32 %38, 3
  %48 = fsub fast float %37, %47
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 3
  %51 = fmul fast float %48, %50
  %52 = fdiv fast float %46, %51
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %55 = fcmp fast ult float %54, 0x3F50624DE0000000
  br i1 %55, label %63, label %56, !dx.controlflow.hints !34

; <label>:56                                      ; preds = %35
  %57 = fmul fast float %54, %52
  %58 = fadd fast float %57, 1.000000e+00
  %59 = call float @dx.op.unary.f32(i32 23, float %58)  ; Log(value)
  %60 = fadd fast float %54, 1.000000e+00
  %61 = call float @dx.op.unary.f32(i32 23, float %60)  ; Log(value)
  %62 = fdiv fast float %59, %61
  br label %63

; <label>:63                                      ; preds = %56, %35
  %64 = phi float [ %62, %56 ], [ %52, %35 ]
  %65 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1, %dx.types.Handle %4, float %41, float %44, float %64, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %66 = extractvalue %dx.types.ResRet.f32 %65, 0
  %67 = extractvalue %dx.types.ResRet.f32 %65, 1
  %68 = extractvalue %dx.types.ResRet.f32 %65, 2
  %69 = extractvalue %dx.types.ResRet.f32 %65, 3
  %70 = fmul fast float %69, %25
  %71 = fmul fast float %69, %26
  %72 = fmul fast float %69, %27
  %73 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %74 = fdiv fast float %66, %73
  %75 = fdiv fast float %67, %73
  %76 = fdiv fast float %68, %73
  %77 = fadd fast float %70, %74
  %78 = fadd fast float %75, %71
  %79 = fadd fast float %76, %72
  br label %80

; <label>:80                                      ; preds = %63, %31, %0
  %81 = phi float [ %25, %0 ], [ %77, %63 ], [ %25, %31 ]
  %82 = phi float [ %26, %0 ], [ %78, %63 ], [ %26, %31 ]
  %83 = phi float [ %27, %0 ], [ %79, %63 ], [ %27, %31 ]
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = fmul fast float %85, %81
  %87 = fmul fast float %85, %82
  %88 = fmul fast float %85, %83
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %86)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %87)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %88)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"ps", i32 6, i32 0}
!4 = !{!5, null, !9, !11}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !7}
!9 = !{!10}
!10 = !{i32 0, %dx.alignment.legacy.PSConstants* undef, !"", i32 0, i32 0, i32 1, i32 480, null}
!11 = !{!12, !13}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!14 = !{[16 x i32] [i32 14, i32 4, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 8, i32 8, i32 8, i32 1, i32 2, i32 4, i32 7]}
!15 = !{void ()* @main, !"main", !16, !4, !32}
!16 = !{!17, !30, null}
!17 = !{!18, !21, !23, !25, !27, !28, !29}
!18 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"Color", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"TexCoord", i8 9, i8 0, !19, i8 2, i32 1, i8 2, i32 2, i8 0, !24}
!24 = !{i32 3, i32 3}
!25 = !{i32 3, !"VERTEX_FOG_PARAMS", i8 9, i8 0, !19, i8 2, i32 1, i8 1, i32 2, i8 2, !26}
!26 = !{i32 3, i32 1}
!27 = !{i32 4, !"VERTEX_FOG_PARAMS0y", i8 9, i8 0, !19, i8 2, i32 1, i8 1, i32 2, i8 3, !26}
!28 = !{i32 5, !"VERTEX_FOG_PARAMS0z", i8 9, i8 0, !19, i8 2, i32 1, i8 1, i32 3, i8 0, !26}
!29 = !{i32 6, !"VERTEX_FOG_PARAMS0w", i8 9, i8 0, !19, i8 2, i32 1, i8 1, i32 3, i8 1, !26}
!30 = !{!31}
!31 = !{i32 0, !"SV_Target", i8 9, i8 16, !19, i8 0, i32 1, i8 4, i32 0, i8 0, !22}
!32 = !{i32 0, i64 256}
!33 = distinct !{!33, !"dx.controlflow.hints", i32 1}
!34 = distinct !{!34, !"dx.controlflow.hints", i32 1}
 