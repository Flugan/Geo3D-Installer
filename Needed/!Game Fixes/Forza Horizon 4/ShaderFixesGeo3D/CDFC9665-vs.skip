//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer VSConstants
// {
//
//   float4x4 matMV;                    // Offset:    0 Size:    64
//   float4x4 matMVP;                   // Offset:   64 Size:    64
//   float4x4 matMVPScreen;             // Offset:  128 Size:    64
//   float4 clipPlanes[4];              // Offset:  192 Size:    64
//   float4 uvTransform;                // Offset:  256 Size:    16
//   float2 uvOffset;                   // Offset:  272 Size:     8
//   float2 screenSize;                 // Offset:  280 Size:     8
//   float alpha;                       // Offset:  288 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// VSConstants                       cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// SV_ClipDistance          0   xyzw        5  CLIPDST   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[19], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, clip_distance
dcl_temps 4
mul r0.xyz, v0.yyyy, cb0[5].xywx
mad r0.xyz, cb0[4].xywx, v0.xxxx, r0.xyzx
add r0.xyz, r0.xyzx, cb0[7].xywx
div r0.xy, r0.xyxx, r0.zzzz
mad r1.xyzw, v1.xyzw, l(0.01, 0.01, 0.01, 0.01), v0.xyxy
mul r2.xyz, r1.yyyy, cb0[5].xywx
mad r2.xyz, cb0[4].xywx, r1.xxxx, r2.xyzx
add r2.xyz, r2.xyzx, cb0[7].xywx
div r0.zw, r2.xxxy, r2.zzzz
add r0.zw, -r0.xxxy, r0.zzzw
mul r0.zw, r0.zzzw, cb0[17].zzzw
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
div r0.z, l(0.01), r0.z
min r2.zw, r0.zzzz, l(0, 0, 0.5, 0.5)
mad r3.zw, r0.zzzz, l(0, 0, 2.0, 2.0), -r2.wwww
mul r1.xyw, r1.wwww, cb0[5].xyxw
mad r1.xyz, cb0[4].xywx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb0[7].xywx
div r0.zw, r1.xxxy, r1.zzzz
add r0.xy, -r0.xyxx, r0.zwzz
mul r0.xy, r0.xyxx, cb0[17].zwzz
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
div r0.x, l(0.01), r0.x
min r2.xy, r0.xxxx, l(0.5, 0.5, 0, 0)
mad r3.xy, r0.xxxx, l(2.0, 2.0, 0, 0), -r2.yyyy
lt r0.x, l(0.5), v0.z
movc r0.xyzw, r0.xxxx, r2.xyzw, r3.xyzw
mad r1.xy, r0.zwzz, v1.xyxx, v0.xyxx
mul r2.xyzw, r0.xyzw, v1.zwxy
lt r0.xy, r0.ywyy, l(0.00001, 0.00001, 0, 0)
movc r0.xz, r0.xxxx, l(0, 0, 0, 0), r2.xxyx
dp2 r0.w, r0.xzxx, r0.xzxx
mad r0.w, -r2.z, r0.x, r0.w
mad r0.w, -r2.w, r0.z, r0.w
mul r1.z, r0.z, r2.z
mad r1.z, r2.w, r0.x, -r1.z
mul r2.xy, r2.wzww, l(1.0, -1.0, 0, 0)
add r0.xz, r0.xxzx, v0.xxyx
div r0.w, r0.w, r1.z
eq r1.z, r1.z, l(0)
movc r0.w, r1.z, l(0), r0.w
mad r1.xy, r0.wwww, r2.xyxx, r1.xyxx
movc r0.xy, r0.yyyy, r0.xzxx, r1.xyxx
mul r1.xyzw, r0.yyyy, cb0[5].xyzw
mad r1.xyzw, cb0[4].xyzw, r0.xxxx, r1.xyzw
add o0.xyzw, r1.xyzw, cb0[7].xyzw
mov o1.xy, r0.xyxx
mul o1.z, v0.z, cb0[18].x
mov o1.w, cb0[18].x
mul r1.xyz, r0.yyyy, cb0[9].xywx
mad r1.xyz, cb0[8].xywx, r0.xxxx, r1.xyzx
add r1.xyz, r1.xyzx, cb0[11].xywx
div r0.zw, r1.xxxy, r1.zzzz
mad o2.zw, r0.zzzw, l(0, 0, 0.5, -0.5), l(0, 0, 0.5, 0.5)
mul r1.xyzw, r0.xxyy, cb0[16].xyzw
add r0.zw, r1.zzzw, r1.xxxy
add o2.xy, r0.zwzz, cb0[17].xyxx
mul r1.xyzw, r0.yyyy, cb0[1].xyzw
mad r0.xyzw, cb0[0].xyzw, r0.xxxx, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mov o3.xyzw, r0.xyzw
div r0.xyz, r0.xyzx, r0.wwww
mov o4.xyzw, -cb0[2].xyzw
dp3 r0.w, r0.xyzx, cb0[12].xyzx
add o5.x, r0.w, -cb0[12].w
dp3 r0.w, r0.xyzx, cb0[13].xyzx
add o5.y, r0.w, -cb0[13].w
dp3 r0.w, r0.xyzx, cb0[14].xyzx
dp3 r0.x, r0.xyzx, cb0[15].xyzx
add o5.w, r0.x, -cb0[15].w
add o5.z, r0.w, -cb0[14].w
ret 
// Approximately 74 instruction slots used
