//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[174], dynamicIndexed
dcl_sampler s0, mode_comparison
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 9
ftoi r0.xy, v0.xyxx
ftou r1.x, v0.y
iadd r1.x, r1.x, cb0[20].w
and r1.x, r1.x, l(1)
utof r1.x, r1.x
add r1.x, r1.x, l(-0.5)
mul r1.x, r1.x, cb0[20].w
mov r1.y, l(0)
mad r1.xy, v0.xyxx, cb0[0].xyxx, r1.xyxx
mov r0.zw, l(0, 0, 0, 0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t3.yzxw
mad r1.xy, r1.xyxx, l(2.0, 2.0, 0, 0), l(-1.0, -1.0, 0, 0)
mul r0.xy, r1.xyxx, l(1.0, -1.0, 0, 0)
mov r0.w, l(1.0)
dp4 r1.x, r0.xyzw, cb0[1].xyzw
dp4 r1.y, r0.xyzw, cb0[2].xyzw
dp4 r1.z, r0.xyzw, cb0[3].xyzw
dp4 r0.x, r0.xyzw, cb0[4].xyzw
div r0.x, l(1.0, 1.0, 1.0, 1.0), r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
mov r0.w, l(1.0)
dp4 r1.x, r0.xyzw, cb0[13].xyzw
dp4 r1.y, r0.xyzw, cb0[14].xyzw
dp4 r1.z, r0.xyzw, cb0[15].xyzw
eq r0.x, cb0[173].x, l(1.0)
if_nz r0.x
  ftou r2.z, cb0[25].y
  mov_sat r0.yz, r1.xxyx
  mul r3.xy, r0.yzyy, cb0[173].yyyy
  round_ni r3.xy, r3.xyxx
  ftoi r3.zw, r3.xxxy
  ftoi r0.w, cb0[173].y
  iadd r0.w, r0.w, l(-1)
  imax r3.zw, r3.zzzw, l(0, 0, 0, 0)
  imin r2.xy, r0.wwww, r3.zwzz
  mov r2.w, l(0)
  ld_indexable(texture2d)(float,float,float,float) r3.zw, r2.xzww, t9.ywxz
  ld_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzww, t9.xwyz
  mul r4.x, r3.z, cb0[173].y
  mul r4.y, r2.z, cb0[173].y
  mad r0.yz, -r3.xxyx, cb0[173].zzzz, r0.yyzy
  mov r2.x, r3.w
  mad_sat r0.yz, r4.xxyx, r0.yyzy, r2.xxyx
else 
  mov r0.yz, r1.xxyx
endif 
utof r0.w, cb0[22].x
div r1.w, l(1.0, 1.0, 1.0, 1.0), r0.w
iadd r2.x, cb0[154].x, l(-1)
ushr r2.x, r2.x, l(1)
mad r2.yz, r0.yyzy, r0.wwww, l(0, -0.5, -0.5, 0)
frc r3.xy, r2.yzyy
add r3.zw, -r3.xxxy, l(0, 0, 1.0, 1.0)
mul r3.xyzw, r3.yyww, r3.xzxz
round_ni r2.yz, r2.yyzy
ftoi r2.yz, r2.yyzy
iadd r2.xy, -r2.xxxx, r2.yzyy
itof r2.xy, r2.xyxx
mad r2.xy, r2.xyxx, r1.wwww, r1.wwww
ishl r0.w, cb0[154].z, l(1)
mov r4.x, cb0[154].y
mov r4.y, l(0)
mov r5.y, r2.y
mov r6.x, l(0)
loop 
  uge r2.z, r4.y, cb0[154].x
  breakc_nz r2.z
  mov r7.x, r6.x
  mov r7.y, r2.x
  mov r2.z, l(0)
  loop 
    uge r2.w, r2.z, cb0[154].x
    breakc_nz r2.w
    iadd r2.w, r2.z, r4.x
    iadd r4.z, r2.w, cb0[154].z
    dp4 r4.w, cb0[r2.w + 34].xyzw, r3.xyzw
    iadd r2.w, r2.w, l(1)
    dp4 r2.w, cb0[r2.w + 34].xyzw, r3.xyzw
    dp4 r5.z, cb0[r4.z + 34].xyzw, r3.xyzw
    iadd r4.z, r4.z, l(1)
    dp4 r4.z, cb0[r4.z + 34].xyzw, r3.xyzw
    mov r5.x, r7.y
    gather4_c_indexable(texture2d)(float,float,float,float) r8.xyzw, r5.xyxx, t0.xyzw, s0.x, r1.z
    mad r4.w, r8.w, r4.w, r7.x
    mad r2.w, r8.z, r2.w, r4.w
    mad r2.w, r8.x, r5.z, r2.w
    mad r7.x, r8.y, r4.z, r2.w
    mad r7.y, r1.w, l(2.0), r7.y
    iadd r2.z, r2.z, l(2)
  endloop 
  mov r6.x, r7.x
  mad r5.y, r1.w, l(2.0), r5.y
  iadd r4.x, r0.w, r4.x
  iadd r4.y, r4.y, l(2)
endloop 
mov_sat r6.x, r6.x
if_nz cb0[19].w
  sample_l_indexable(texture2d)(float,float,float,float) r0.w, r0.yzyy, t2.yzwx, s2, l(0)
  mul r6.x, r0.w, r6.x
endif 
if_nz r0.x
  utof r0.xw, cb0[22].xxxy
  rcp r0.xw, r0.xxxw
  ge r2.xy, r0.yzyy, r0.xwxx
  and r2.xy, r2.xyxx, l(1.0, 1.0, 0, 0)
  add r0.xw, -r0.xxxw, l(1.0, 0, 0, 1.0)
  ge r0.xy, r0.xwxx, r0.yzyy
  and r0.xy, r0.xyxx, l(1.0, 1.0, 0, 0)
  mul r0.xy, r0.xyxx, r2.xyxx
  mul r0.z, r0.y, r0.x
  mad r0.x, -r0.x, r0.y, l(1.0)
  mad r6.x, r6.x, r0.z, r0.x
endif 
mad r0.xyz, r1.xyzx, cb0[19].xyzx, cb0[20].xyzx
mad_sat r0.xyz, |r0.xyzx|, cb0[18].wwww, cb0[18].xyzx
min r0.x, r0.y, r0.x
min r6.y, r0.z, r0.x
mov r6.z, l(0)
mov o0.xyzw, r6.xzzy
ret 
// Approximately 0 instruction slots used
