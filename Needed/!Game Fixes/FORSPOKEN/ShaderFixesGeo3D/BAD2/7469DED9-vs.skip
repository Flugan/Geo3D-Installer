;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyzw        0     NONE   float   xyz 
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
;
; shader debug name: 85f7f50d242eba207c3c6f5c6df5d2f0.pdb
; shader hash: 85f7f50d242eba207c3c6f5c6df5d2f0
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer IView_Combined_cbView
; {
;
;   struct hostlayout.IView_Combined_cbView
;   {
;
;       struct hostlayout.struct.SIView_Combined_cbView
;       {
;
;           row_major float4x4 Projection;            ; Offset:    0
;           row_major float4x4 View;                  ; Offset:   64
;           row_major float4x4 ViewProj;              ; Offset:  128
;           row_major float4x4 InvView;               ; Offset:  192
;           row_major float4x4 InvProjection;         ; Offset:  256
;           struct struct.Viewport
;           {
;
;               int2 TopLeft;                         ; Offset:  320
;               int2 Size;                            ; Offset:  328
;           
;           } ViewPort;                               ; Offset:  320
;
;           float3 ViewPoint;                         ; Offset:  336
;           row_major float4x4 PreviousView;          ; Offset:  352
;           row_major float4x4 PreviousProj;          ; Offset:  416
;           row_major float4x4 PreviousViewProj;      ; Offset:  480
;           row_major float4x4 InvViewProj;           ; Offset:  544
;           int RenderTargetViewIndex;                ; Offset:  608
;           float DepthOffset;                        ; Offset:  612
;           int2 DitherOffset;                        ; Offset:  616
;           row_major float4x4 ViewProjLS;            ; Offset:  624
;           row_major float4x4 PreviousViewProjLS;    ; Offset:  688
;           float3 PreviousViewPoint;                 ; Offset:  752
;       
;       } IView_Combined_cbView_CB;                   ; Offset:    0
;
;   
;   } IView_Combined_cbView;                          ; Offset:    0 Size:   764
;
; }
;
; cbuffer cbTransform
; {
;
;   struct hostlayout.cbTransform
;   {
;
;       struct hostlayout.struct.ScbTransform
;       {
;
;           row_major float4x4 mWorld;                ; Offset:    0
;           row_major float4x4 mPreviousWorld;        ; Offset:   64
;           float lodScale;                           ; Offset:  128
;           float wetScale;                           ; Offset:  132
;           float dummy;                              ; Offset:  136
;           float baseScale;                          ; Offset:  140
;       
;       } cbTransform_CB;                             ; Offset:    0
;
;   
;   } cbTransform;                                    ; Offset:    0 Size:   144
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; IView_Combined_cbView             cbuffer      NA          NA     CB0            cb0     1
; cbTransform                       cbuffer      NA          NA     CB1            cb1     1
;
;
; ViewId state:
;
; Number of inputs: 4, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2 }
;   output 1 depends on inputs: { 0, 1, 2 }
;   output 2 depends on inputs: { 0, 1, 2 }
;   output 3 depends on inputs: { 0, 1, 2 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.IView_Combined_cbView = type { %hostlayout.struct.SIView_Combined_cbView }
%hostlayout.struct.SIView_Combined_cbView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], %struct.Viewport, <3 x float>, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], i32, float, <2 x i32>, [4 x <4 x float>], [4 x <4 x float>], <3 x float> }
%struct.Viewport = type { <2 x i32>, <2 x i32> }
%hostlayout.cbTransform = type { %hostlayout.struct.ScbTransform }
%hostlayout.struct.ScbTransform = type { [4 x <4 x float>], [4 x <4 x float>], float, float, float, float }

define void @VSMain() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %7 = extractvalue %dx.types.CBufRet.f32 %6, 0
  %8 = extractvalue %dx.types.CBufRet.f32 %6, 1
  %9 = extractvalue %dx.types.CBufRet.f32 %6, 2
  %10 = extractvalue %dx.types.CBufRet.f32 %6, 3
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 0
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 1
  %14 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %15 = extractvalue %dx.types.CBufRet.f32 %11, 3
  %16 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %17 = extractvalue %dx.types.CBufRet.f32 %16, 0
  %18 = extractvalue %dx.types.CBufRet.f32 %16, 1
  %19 = extractvalue %dx.types.CBufRet.f32 %16, 2
  %20 = extractvalue %dx.types.CBufRet.f32 %16, 3
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.f32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.f32 %30, 1
  %33 = extractvalue %dx.types.CBufRet.f32 %30, 2
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.f32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.f32 %42, 1
  %45 = extractvalue %dx.types.CBufRet.f32 %42, 2
  %46 = fsub fast float %39, %43
  %47 = fsub fast float %40, %44
  %48 = fsub fast float %41, %45
  %49 = fmul fast float %27, %3
  %50 = call float @dx.op.tertiary.f32(i32 46, float %4, float %31, float %49)  ; FMad(a,b,c)
  %51 = call float @dx.op.tertiary.f32(i32 46, float %5, float %35, float %50)  ; FMad(a,b,c)
  %52 = fadd fast float %46, %51
  %53 = fmul fast float %28, %3
  %54 = call float @dx.op.tertiary.f32(i32 46, float %4, float %32, float %53)  ; FMad(a,b,c)
  %55 = call float @dx.op.tertiary.f32(i32 46, float %5, float %36, float %54)  ; FMad(a,b,c)
  %56 = fadd fast float %55, %47
  %57 = fmul fast float %29, %3
  %58 = call float @dx.op.tertiary.f32(i32 46, float %4, float %33, float %57)  ; FMad(a,b,c)
  %59 = call float @dx.op.tertiary.f32(i32 46, float %5, float %37, float %58)  ; FMad(a,b,c)
  %60 = fadd fast float %59, %48
  %61 = fmul fast float %52, %7
  %62 = call float @dx.op.tertiary.f32(i32 46, float %56, float %12, float %61)  ; FMad(a,b,c)
  %63 = call float @dx.op.tertiary.f32(i32 46, float %60, float %17, float %62)  ; FMad(a,b,c)
  %64 = fadd fast float %63, %22
  %65 = fmul fast float %52, %8
  %66 = call float @dx.op.tertiary.f32(i32 46, float %56, float %13, float %65)  ; FMad(a,b,c)
  %67 = call float @dx.op.tertiary.f32(i32 46, float %60, float %18, float %66)  ; FMad(a,b,c)
  %68 = fadd fast float %67, %23
  %69 = fmul fast float %52, %9
  %70 = call float @dx.op.tertiary.f32(i32 46, float %56, float %14, float %69)  ; FMad(a,b,c)
  %71 = call float @dx.op.tertiary.f32(i32 46, float %60, float %19, float %70)  ; FMad(a,b,c)
  %72 = fadd fast float %71, %24
  %73 = fmul fast float %52, %10
  %74 = call float @dx.op.tertiary.f32(i32 46, float %56, float %15, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %60, float %20, float %74)  ; FMad(a,b,c)
  %76 = fadd fast float %75, %25
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %64)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %68)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %72)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %76)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 5}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 5}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %hostlayout.IView_Combined_cbView* undef, !"", i32 0, i32 0, i32 1, i32 764, null}
!7 = !{i32 1, %hostlayout.cbTransform* undef, !"", i32 0, i32 1, i32 1, i32 144, null}
!8 = !{[6 x i32] [i32 4, i32 4, i32 15, i32 15, i32 15, i32 0]}
!9 = !{void ()* @VSMain, !"VSMain", !10, !4, !18}
!10 = !{!11, !15, null}
!11 = !{!12}
!12 = !{i32 0, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 7}
!15 = !{!16}
!16 = !{i32 0, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 0, i8 0, !17}
!17 = !{i32 3, i32 15}
!18 = !{i32 0, i64 256}
 