;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; NORMAL                   0   xyzw        0     NONE   float   xyz 
; POSITION                 0   xyzw        1     NONE   float   xyz 
; TANGENT                  0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; SEM_BINORMAL_SIGN        0   x           1     NONE   float   x   
; SEM_NORMAL_WS            0    yzw        1     NONE   float    yzw
; SEM_TANGENT_WS           0   xyz         2     NONE   float   xyz 
;
; shader debug name: 2ee48ac6cdab269255092759d16d1010.pdb
; shader hash: 2ee48ac6cdab269255092759d16d1010
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; NORMAL                   0                              
; POSITION                 0                              
; TANGENT                  0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; SEM_BINORMAL_SIGN        0                 linear       
; SEM_NORMAL_WS            0                 linear       
; SEM_TANGENT_WS           0                 linear       
;
; Buffer Definitions:
;
; cbuffer IView_Combined_cbView
; {
;
;   struct hostlayout.IView_Combined_cbView
;   {
;
;       struct hostlayout.struct.SIView_Combined_cbView
;       {
;
;           row_major float4x4 Projection;            ; Offset:    0
;           row_major float4x4 View;                  ; Offset:   64
;           row_major float4x4 ViewProj;              ; Offset:  128
;           row_major float4x4 InvView;               ; Offset:  192
;           row_major float4x4 InvProjection;         ; Offset:  256
;           struct struct.Viewport
;           {
;
;               int2 TopLeft;                         ; Offset:  320
;               int2 Size;                            ; Offset:  328
;           
;           } ViewPort;                               ; Offset:  320
;
;           float3 ViewPoint;                         ; Offset:  336
;           row_major float4x4 PreviousView;          ; Offset:  352
;           row_major float4x4 PreviousProj;          ; Offset:  416
;           row_major float4x4 PreviousViewProj;      ; Offset:  480
;           row_major float4x4 InvViewProj;           ; Offset:  544
;           int RenderTargetViewIndex;                ; Offset:  608
;           float DepthOffset;                        ; Offset:  612
;           int2 DitherOffset;                        ; Offset:  616
;           row_major float4x4 ViewProjLS;            ; Offset:  624
;           row_major float4x4 PreviousViewProjLS;    ; Offset:  688
;           float3 PreviousViewPoint;                 ; Offset:  752
;       
;       } IView_Combined_cbView_CB;                   ; Offset:    0
;
;   
;   } IView_Combined_cbView;                          ; Offset:    0 Size:   764
;
; }
;
; cbuffer cbTransform
; {
;
;   struct hostlayout.cbTransform
;   {
;
;       struct hostlayout.struct.ScbTransform
;       {
;
;           row_major float4x4 mWorld;                ; Offset:    0
;           row_major float4x4 mPreviousWorld;        ; Offset:   64
;           float lodScale;                           ; Offset:  128
;           float wetScale;                           ; Offset:  132
;           float dummy;                              ; Offset:  136
;           float baseScale;                          ; Offset:  140
;       
;       } cbTransform_CB;                             ; Offset:    0
;
;   
;   } cbTransform;                                    ; Offset:    0 Size:   144
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; IView_Combined_cbView             cbuffer      NA          NA     CB0            cb0     1
; cbTransform                       cbuffer      NA          NA     CB1            cb1     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 11
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6 }
;   output 1 depends on inputs: { 4, 5, 6 }
;   output 2 depends on inputs: { 4, 5, 6 }
;   output 3 depends on inputs: { 4, 5, 6 }
;   output 4 depends on inputs: { 11 }
;   output 5 depends on inputs: { 0, 1, 2 }
;   output 6 depends on inputs: { 0, 1, 2 }
;   output 7 depends on inputs: { 0, 1, 2 }
;   output 8 depends on inputs: { 8, 9, 10 }
;   output 9 depends on inputs: { 8, 9, 10 }
;   output 10 depends on inputs: { 8, 9, 10 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.IView_Combined_cbView = type { %hostlayout.struct.SIView_Combined_cbView }
%hostlayout.struct.SIView_Combined_cbView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], %struct.Viewport, <3 x float>, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], i32, float, <2 x i32>, [4 x <4 x float>], [4 x <4 x float>], <3 x float> }
%struct.Viewport = type { <2 x i32>, <2 x i32> }
%hostlayout.cbTransform = type { %hostlayout.struct.ScbTransform }
%hostlayout.struct.ScbTransform = type { [4 x <4 x float>], [4 x <4 x float>], float, float, float, float }

define void @VSMain() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %17 = extractvalue %dx.types.CBufRet.f32 %13, 3
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 2
  %22 = extractvalue %dx.types.CBufRet.f32 %18, 3
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = extractvalue %dx.types.CBufRet.f32 %28, 3
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.f32 %37, 0
  %39 = extractvalue %dx.types.CBufRet.f32 %37, 1
  %40 = extractvalue %dx.types.CBufRet.f32 %37, 2
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 0
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 1
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = fsub fast float %46, %50
  %54 = fsub fast float %47, %51
  %55 = fsub fast float %48, %52
  %56 = fmul fast float %34, %7
  %57 = call float @dx.op.tertiary.f32(i32 46, float %8, float %38, float %56)  ; FMad(a,b,c)
  %58 = call float @dx.op.tertiary.f32(i32 46, float %9, float %42, float %57)  ; FMad(a,b,c)
  %59 = fadd fast float %53, %58
  %60 = fmul fast float %35, %7
  %61 = call float @dx.op.tertiary.f32(i32 46, float %8, float %39, float %60)  ; FMad(a,b,c)
  %62 = call float @dx.op.tertiary.f32(i32 46, float %9, float %43, float %61)  ; FMad(a,b,c)
  %63 = fadd fast float %62, %54
  %64 = fmul fast float %36, %7
  %65 = call float @dx.op.tertiary.f32(i32 46, float %8, float %40, float %64)  ; FMad(a,b,c)
  %66 = call float @dx.op.tertiary.f32(i32 46, float %9, float %44, float %65)  ; FMad(a,b,c)
  %67 = fadd fast float %66, %55
  %68 = fmul fast float %59, %14
  %69 = call float @dx.op.tertiary.f32(i32 46, float %63, float %19, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %67, float %24, float %69)  ; FMad(a,b,c)
  %71 = fadd fast float %70, %29
  %72 = fmul fast float %59, %15
  %73 = call float @dx.op.tertiary.f32(i32 46, float %63, float %20, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %67, float %25, float %73)  ; FMad(a,b,c)
  %75 = fadd fast float %74, %30
  %76 = fmul fast float %59, %16
  %77 = call float @dx.op.tertiary.f32(i32 46, float %63, float %21, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %67, float %26, float %77)  ; FMad(a,b,c)
  %79 = fadd fast float %78, %31
  %80 = fmul fast float %59, %17
  %81 = call float @dx.op.tertiary.f32(i32 46, float %63, float %22, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %67, float %27, float %81)  ; FMad(a,b,c)
  %83 = fadd fast float %82, %32
  %84 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %85 = call float @dx.op.unary.f32(i32 25, float %84)  ; Rsqrt(value)
  %86 = fmul fast float %85, %10
  %87 = fmul fast float %85, %11
  %88 = fmul fast float %85, %12
  %89 = fmul fast float %86, %34
  %90 = call float @dx.op.tertiary.f32(i32 46, float %87, float %38, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.tertiary.f32(i32 46, float %88, float %42, float %90)  ; FMad(a,b,c)
  %92 = fmul fast float %86, %35
  %93 = call float @dx.op.tertiary.f32(i32 46, float %87, float %39, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %88, float %43, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %86, %36
  %96 = call float @dx.op.tertiary.f32(i32 46, float %87, float %40, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %88, float %44, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.dot3.f32(i32 55, float %91, float %94, float %97, float %91, float %94, float %97)  ; Dot3(ax,ay,az,bx,by,bz)
  %99 = call float @dx.op.unary.f32(i32 25, float %98)  ; Rsqrt(value)
  %100 = fmul fast float %99, %91
  %101 = fmul fast float %99, %94
  %102 = fmul fast float %99, %97
  %103 = call float @dx.op.dot3.f32(i32 55, float %3, float %4, float %5, float %3, float %4, float %5)  ; Dot3(ax,ay,az,bx,by,bz)
  %104 = call float @dx.op.unary.f32(i32 25, float %103)  ; Rsqrt(value)
  %105 = fmul fast float %104, %3
  %106 = fmul fast float %104, %4
  %107 = fmul fast float %104, %5
  %108 = fmul fast float %105, %34
  %109 = call float @dx.op.tertiary.f32(i32 46, float %106, float %38, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %107, float %42, float %109)  ; FMad(a,b,c)
  %111 = fmul fast float %105, %35
  %112 = call float @dx.op.tertiary.f32(i32 46, float %106, float %39, float %111)  ; FMad(a,b,c)
  %113 = call float @dx.op.tertiary.f32(i32 46, float %107, float %43, float %112)  ; FMad(a,b,c)
  %114 = fmul fast float %105, %36
  %115 = call float @dx.op.tertiary.f32(i32 46, float %106, float %40, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %107, float %44, float %115)  ; FMad(a,b,c)
  %117 = call float @dx.op.dot3.f32(i32 55, float %110, float %113, float %116, float %110, float %113, float %116)  ; Dot3(ax,ay,az,bx,by,bz)
  %118 = call float @dx.op.unary.f32(i32 25, float %117)  ; Rsqrt(value)
  %119 = fmul fast float %118, %110
  %120 = fmul fast float %118, %113
  %121 = fmul fast float %118, %116
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %100)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %101)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %102)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %71)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %75)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %79)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %83)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %119)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %120)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %121)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 5}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 5}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %hostlayout.IView_Combined_cbView* undef, !"", i32 0, i32 0, i32 1, i32 764, null}
!7 = !{i32 1, %hostlayout.cbTransform* undef, !"", i32 0, i32 1, i32 1, i32 144, null}
!8 = !{[14 x i32] [i32 12, i32 11, i32 224, i32 224, i32 224, i32 0, i32 15, i32 15, i32 15, i32 0, i32 1792, i32 1792, i32 1792, i32 16]}
!9 = !{void ()* @VSMain, !"VSMain", !10, !4, !24}
!10 = !{!11, !18, null}
!11 = !{!12, !15, !16}
!12 = !{i32 0, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 7}
!15 = !{i32 1, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 1, i8 0, !14}
!16 = !{i32 2, !"TANGENT", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 2, i8 0, !17}
!17 = !{i32 3, i32 15}
!18 = !{!19, !20, !22, !23}
!19 = !{i32 0, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 0, i8 0, !17}
!20 = !{i32 1, !"SEM_BINORMAL_SIGN", i8 9, i8 0, !13, i8 2, i32 1, i8 1, i32 1, i8 0, !21}
!21 = !{i32 3, i32 1}
!22 = !{i32 2, !"SEM_NORMAL_WS", i8 9, i8 0, !13, i8 2, i32 1, i8 3, i32 1, i8 1, !14}
!23 = !{i32 3, !"SEM_TANGENT_WS", i8 9, i8 0, !13, i8 2, i32 1, i8 3, i32 2, i8 0, !14}
!24 = !{i32 0, i64 256}
 