;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; NORMAL                   0   xyzw        0     NONE   float   xyz 
; POSITION                 0   xyzw        1     NONE   float   xyz 
; TANGENT                  0   xyzw        2     NONE   float   xyzw
; SV_InstanceID            0   x           3   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; SEM_BINORMAL_SIGN        0   x           1     NONE   float   x   
; SEM_NORMAL_WS            0    yzw        1     NONE   float    yzw
; SEM_TANGENT_WS           0   xyz         2     NONE   float   xyz 
;
; shader debug name: 074b3209f2dff21478c909e6a4c48b15.pdb
; shader hash: 074b3209f2dff21478c909e6a4c48b15
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; NORMAL                   0                              
; POSITION                 0                              
; TANGENT                  0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; SEM_BINORMAL_SIGN        0                 linear       
; SEM_NORMAL_WS            0                 linear       
; SEM_TANGENT_WS           0                 linear       
;
; Buffer Definitions:
;
; cbuffer IView_Combined_cbView
; {
;
;   struct hostlayout.IView_Combined_cbView
;   {
;
;       struct hostlayout.struct.SIView_Combined_cbView
;       {
;
;           row_major float4x4 Projection;            ; Offset:    0
;           row_major float4x4 View;                  ; Offset:   64
;           row_major float4x4 ViewProj;              ; Offset:  128
;           row_major float4x4 InvView;               ; Offset:  192
;           row_major float4x4 InvProjection;         ; Offset:  256
;           struct struct.Viewport
;           {
;
;               int2 TopLeft;                         ; Offset:  320
;               int2 Size;                            ; Offset:  328
;           
;           } ViewPort;                               ; Offset:  320
;
;           float3 ViewPoint;                         ; Offset:  336
;           row_major float4x4 PreviousView;          ; Offset:  352
;           row_major float4x4 PreviousProj;          ; Offset:  416
;           row_major float4x4 PreviousViewProj;      ; Offset:  480
;           row_major float4x4 InvViewProj;           ; Offset:  544
;           int RenderTargetViewIndex;                ; Offset:  608
;           float DepthOffset;                        ; Offset:  612
;           int2 DitherOffset;                        ; Offset:  616
;           row_major float4x4 ViewProjLS;            ; Offset:  624
;           row_major float4x4 PreviousViewProjLS;    ; Offset:  688
;           float3 PreviousViewPoint;                 ; Offset:  752
;       
;       } IView_Combined_cbView_CB;                   ; Offset:    0
;
;   
;   } IView_Combined_cbView;                          ; Offset:    0 Size:   764
;
; }
;
; Resource bind info for Transforms_SRV_InstanceData0_Vertex0_core
; {
;
;   struct hostlayout.struct.sTransform
;   {
;
;       row_major float4x4 mWorld;                    ; Offset:    0
;       row_major float4x4 mPreviousWorld;            ; Offset:   64
;       float lodScale;                               ; Offset:  128
;       float wetScale;                               ; Offset:  132
;       float dummy;                                  ; Offset:  136
;       float baseScale;                              ; Offset:  140
;   
;   } $Element;                                       ; Offset:    0 Size:   144
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; IView_Combined_cbView             cbuffer      NA          NA     CB0            cb0     1
; TransformIds_SRV_InstanceData0_Vertex0_core   texture    byte         r/o      T0             t0     1
; Transforms_SRV_InstanceData0_Vertex0_core   texture  struct         r/o      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 13, outputs: 11
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12 }
;   output 1 depends on inputs: { 4, 5, 6, 12 }
;   output 2 depends on inputs: { 4, 5, 6, 12 }
;   output 3 depends on inputs: { 4, 5, 6, 12 }
;   output 4 depends on inputs: { 11 }
;   output 5 depends on inputs: { 0, 1, 2, 12 }
;   output 6 depends on inputs: { 0, 1, 2, 12 }
;   output 7 depends on inputs: { 0, 1, 2, 12 }
;   output 8 depends on inputs: { 8, 9, 10, 12 }
;   output 9 depends on inputs: { 8, 9, 10, 12 }
;   output 10 depends on inputs: { 8, 9, 10, 12 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<sTransform>" = type { %hostlayout.struct.sTransform }
%hostlayout.struct.sTransform = type { [4 x <4 x float>], [4 x <4 x float>], float, float, float, float }
%hostlayout.IView_Combined_cbView = type { %hostlayout.struct.SIView_Combined_cbView }
%hostlayout.struct.SIView_Combined_cbView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], %struct.Viewport, <3 x float>, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], i32, float, <2 x i32>, [4 x <4 x float>], [4 x <4 x float>], <3 x float> }
%struct.Viewport = type { <2 x i32>, <2 x i32> }

define void @VSMain() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.f32 %15, 0
  %17 = extractvalue %dx.types.CBufRet.f32 %15, 1
  %18 = extractvalue %dx.types.CBufRet.f32 %15, 2
  %19 = extractvalue %dx.types.CBufRet.f32 %15, 3
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 0
  %22 = extractvalue %dx.types.CBufRet.f32 %20, 1
  %23 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %24 = extractvalue %dx.types.CBufRet.f32 %20, 3
  %25 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %26 = extractvalue %dx.types.CBufRet.f32 %25, 0
  %27 = extractvalue %dx.types.CBufRet.f32 %25, 1
  %28 = extractvalue %dx.types.CBufRet.f32 %25, 2
  %29 = extractvalue %dx.types.CBufRet.f32 %25, 3
  %30 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.f32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.f32 %30, 1
  %33 = extractvalue %dx.types.CBufRet.f32 %30, 2
  %34 = extractvalue %dx.types.CBufRet.f32 %30, 3
  %35 = shl i32 %4, 2
  %36 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2, i32 %35, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %37 = extractvalue %dx.types.ResRet.i32 %36, 0
  %38 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %37, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %39 = extractvalue %dx.types.ResRet.f32 %38, 0
  %40 = extractvalue %dx.types.ResRet.f32 %38, 1
  %41 = extractvalue %dx.types.ResRet.f32 %38, 2
  %42 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %37, i32 16, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %43 = extractvalue %dx.types.ResRet.f32 %42, 0
  %44 = extractvalue %dx.types.ResRet.f32 %42, 1
  %45 = extractvalue %dx.types.ResRet.f32 %42, 2
  %46 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %37, i32 32, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %47 = extractvalue %dx.types.ResRet.f32 %46, 0
  %48 = extractvalue %dx.types.ResRet.f32 %46, 1
  %49 = extractvalue %dx.types.ResRet.f32 %46, 2
  %50 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %37, i32 48, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 0
  %52 = extractvalue %dx.types.ResRet.f32 %50, 1
  %53 = extractvalue %dx.types.ResRet.f32 %50, 2
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = fsub fast float %51, %55
  %59 = fsub fast float %52, %56
  %60 = fsub fast float %53, %57
  %61 = fmul fast float %39, %9
  %62 = call float @dx.op.tertiary.f32(i32 46, float %10, float %43, float %61)  ; FMad(a,b,c)
  %63 = call float @dx.op.tertiary.f32(i32 46, float %11, float %47, float %62)  ; FMad(a,b,c)
  %64 = fadd fast float %58, %63
  %65 = fmul fast float %40, %9
  %66 = call float @dx.op.tertiary.f32(i32 46, float %10, float %44, float %65)  ; FMad(a,b,c)
  %67 = call float @dx.op.tertiary.f32(i32 46, float %11, float %48, float %66)  ; FMad(a,b,c)
  %68 = fadd fast float %67, %59
  %69 = fmul fast float %41, %9
  %70 = call float @dx.op.tertiary.f32(i32 46, float %10, float %45, float %69)  ; FMad(a,b,c)
  %71 = call float @dx.op.tertiary.f32(i32 46, float %11, float %49, float %70)  ; FMad(a,b,c)
  %72 = fadd fast float %71, %60
  %73 = fmul fast float %64, %16
  %74 = call float @dx.op.tertiary.f32(i32 46, float %68, float %21, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %72, float %26, float %74)  ; FMad(a,b,c)
  %76 = fadd fast float %75, %31
  %77 = fmul fast float %64, %17
  %78 = call float @dx.op.tertiary.f32(i32 46, float %68, float %22, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.tertiary.f32(i32 46, float %72, float %27, float %78)  ; FMad(a,b,c)
  %80 = fadd fast float %79, %32
  %81 = fmul fast float %64, %18
  %82 = call float @dx.op.tertiary.f32(i32 46, float %68, float %23, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %72, float %28, float %82)  ; FMad(a,b,c)
  %84 = fadd fast float %83, %33
  %85 = fmul fast float %64, %19
  %86 = call float @dx.op.tertiary.f32(i32 46, float %68, float %24, float %85)  ; FMad(a,b,c)
  %87 = call float @dx.op.tertiary.f32(i32 46, float %72, float %29, float %86)  ; FMad(a,b,c)
  %88 = fadd fast float %87, %34
  %89 = call float @dx.op.dot3.f32(i32 55, float %12, float %13, float %14, float %12, float %13, float %14)  ; Dot3(ax,ay,az,bx,by,bz)
  %90 = call float @dx.op.unary.f32(i32 25, float %89)  ; Rsqrt(value)
  %91 = fmul fast float %90, %12
  %92 = fmul fast float %90, %13
  %93 = fmul fast float %90, %14
  %94 = fmul fast float %91, %39
  %95 = call float @dx.op.tertiary.f32(i32 46, float %92, float %43, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.tertiary.f32(i32 46, float %93, float %47, float %95)  ; FMad(a,b,c)
  %97 = fmul fast float %91, %40
  %98 = call float @dx.op.tertiary.f32(i32 46, float %92, float %44, float %97)  ; FMad(a,b,c)
  %99 = call float @dx.op.tertiary.f32(i32 46, float %93, float %48, float %98)  ; FMad(a,b,c)
  %100 = fmul fast float %91, %41
  %101 = call float @dx.op.tertiary.f32(i32 46, float %92, float %45, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %93, float %49, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.dot3.f32(i32 55, float %96, float %99, float %102, float %96, float %99, float %102)  ; Dot3(ax,ay,az,bx,by,bz)
  %104 = call float @dx.op.unary.f32(i32 25, float %103)  ; Rsqrt(value)
  %105 = fmul fast float %104, %96
  %106 = fmul fast float %104, %99
  %107 = fmul fast float %104, %102
  %108 = call float @dx.op.dot3.f32(i32 55, float %5, float %6, float %7, float %5, float %6, float %7)  ; Dot3(ax,ay,az,bx,by,bz)
  %109 = call float @dx.op.unary.f32(i32 25, float %108)  ; Rsqrt(value)
  %110 = fmul fast float %109, %5
  %111 = fmul fast float %109, %6
  %112 = fmul fast float %109, %7
  %113 = fmul fast float %110, %39
  %114 = call float @dx.op.tertiary.f32(i32 46, float %111, float %43, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %112, float %47, float %114)  ; FMad(a,b,c)
  %116 = fmul fast float %110, %40
  %117 = call float @dx.op.tertiary.f32(i32 46, float %111, float %44, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %112, float %48, float %117)  ; FMad(a,b,c)
  %119 = fmul fast float %110, %41
  %120 = call float @dx.op.tertiary.f32(i32 46, float %111, float %45, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %112, float %49, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.dot3.f32(i32 55, float %115, float %118, float %121, float %115, float %118, float %121)  ; Dot3(ax,ay,az,bx,by,bz)
  %123 = call float @dx.op.unary.f32(i32 25, float %122)  ; Rsqrt(value)
  %124 = fmul fast float %123, %115
  %125 = fmul fast float %123, %118
  %126 = fmul fast float %123, %121
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %105)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %106)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %107)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %76)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %80)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %84)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %88)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %124)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %125)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %126)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 5}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 5}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"hostlayout.class.StructuredBuffer<sTransform>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !8}
!8 = !{i32 1, i32 144}
!9 = !{!10}
!10 = !{i32 0, %hostlayout.IView_Combined_cbView* undef, !"", i32 0, i32 0, i32 1, i32 764, null}
!11 = !{[15 x i32] [i32 13, i32 11, i32 224, i32 224, i32 224, i32 0, i32 15, i32 15, i32 15, i32 0, i32 1792, i32 1792, i32 1792, i32 16, i32 2031]}
!12 = !{void ()* @VSMain, !"VSMain", !13, !4, !28}
!13 = !{!14, !23, null}
!14 = !{!15, !18, !19, !21}
!15 = !{i32 0, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !17}
!19 = !{i32 2, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !20}
!20 = !{i32 3, i32 15}
!21 = !{i32 3, !"SV_InstanceID", i8 5, i8 2, !16, i8 0, i32 1, i8 1, i32 3, i8 0, !22}
!22 = !{i32 3, i32 1}
!23 = !{!24, !25, !26, !27}
!24 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !20}
!25 = !{i32 1, !"SEM_BINORMAL_SIGN", i8 9, i8 0, !16, i8 2, i32 1, i8 1, i32 1, i8 0, !22}
!26 = !{i32 2, !"SEM_NORMAL_WS", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 1, i8 1, !17}
!27 = !{i32 3, !"SEM_TANGENT_WS", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 2, i8 0, !17}
!28 = !{i32 0, i64 272}
 