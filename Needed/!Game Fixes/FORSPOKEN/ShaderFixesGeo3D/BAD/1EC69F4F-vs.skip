;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; NORMAL                   0   xyzw        0     NONE   float   xyz 
; POSITION                 0   xyzw        1     NONE   float   xyz 
; TANGENT                  0   xyzw        2     NONE   float   xyzw
; TANGENT                  1   xyzw        3     NONE   float   xyzw
; TEXCOORD                 0   xy          4     NONE   float   xy  
; TEXCOORD                 1   xy          5     NONE   float   xy  
; SV_InstanceID            0   x           6   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; SEM_BINORMAL1_SIGN       0   x           1     NONE   float   x   
; SEM_BINORMAL_SIGN        0    y          1     NONE   float    y  
; SEM_TEXCOORD_UV          0     zw        1     NONE   float     zw
; SEM_NORMAL_WS            0   xyz         2     NONE   float   xyz 
; SEM_TANGENT1_WS          0   xyz         3     NONE   float   xyz 
; SEM_TANGENT_WS           0   xyz         4     NONE   float   xyz 
; SEM_TEXCOORD_UV          1   xy          5     NONE   float   xy  
;
; shader debug name: a375b12c634b8912abb0212645fe3b8e.pdb
; shader hash: a375b12c634b8912abb0212645fe3b8e
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; NORMAL                   0                              
; POSITION                 0                              
; TANGENT                  0                              
; TANGENT                  1                              
; TEXCOORD                 0                              
; TEXCOORD                 1                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; SEM_BINORMAL1_SIGN       0                 linear       
; SEM_BINORMAL_SIGN        0                 linear       
; SEM_NORMAL_WS            0                 linear       
; SEM_TANGENT1_WS          0                 linear       
; SEM_TANGENT_WS           0                 linear       
; SEM_TEXCOORD_UV          0                 linear       
; SEM_TEXCOORD_UV          1                 linear       
;
; Buffer Definitions:
;
; cbuffer IView_Combined_cbView
; {
;
;   struct hostlayout.IView_Combined_cbView
;   {
;
;       struct hostlayout.struct.SIView_Combined_cbView
;       {
;
;           row_major float4x4 Projection;            ; Offset:    0
;           row_major float4x4 View;                  ; Offset:   64
;           row_major float4x4 ViewProj;              ; Offset:  128
;           row_major float4x4 InvView;               ; Offset:  192
;           row_major float4x4 InvProjection;         ; Offset:  256
;           struct struct.Viewport
;           {
;
;               int2 TopLeft;                         ; Offset:  320
;               int2 Size;                            ; Offset:  328
;           
;           } ViewPort;                               ; Offset:  320
;
;           float3 ViewPoint;                         ; Offset:  336
;           row_major float4x4 PreviousView;          ; Offset:  352
;           row_major float4x4 PreviousProj;          ; Offset:  416
;           row_major float4x4 PreviousViewProj;      ; Offset:  480
;           row_major float4x4 InvViewProj;           ; Offset:  544
;           int RenderTargetViewIndex;                ; Offset:  608
;           float DepthOffset;                        ; Offset:  612
;           int2 DitherOffset;                        ; Offset:  616
;           row_major float4x4 ViewProjLS;            ; Offset:  624
;           row_major float4x4 PreviousViewProjLS;    ; Offset:  688
;           float3 PreviousViewPoint;                 ; Offset:  752
;       
;       } IView_Combined_cbView_CB;                   ; Offset:    0
;
;   
;   } IView_Combined_cbView;                          ; Offset:    0 Size:   764
;
; }
;
; Resource bind info for Transforms_SRV_InstanceData0_Vertex0_core
; {
;
;   struct hostlayout.struct.sTransform
;   {
;
;       row_major float4x4 mWorld;                    ; Offset:    0
;       row_major float4x4 mPreviousWorld;            ; Offset:   64
;       float lodScale;                               ; Offset:  128
;       float wetScale;                               ; Offset:  132
;       float dummy;                                  ; Offset:  136
;       float baseScale;                              ; Offset:  140
;   
;   } $Element;                                       ; Offset:    0 Size:   144
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; IView_Combined_cbView             cbuffer      NA          NA     CB0            cb0     1
; TransformIds_SRV_InstanceData0_Vertex0_core   texture    byte         r/o      T0             t0     1
; Transforms_SRV_InstanceData0_Vertex0_core   texture  struct         r/o      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 25, outputs: 22
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 24 }
;   output 1 depends on inputs: { 4, 5, 6, 24 }
;   output 2 depends on inputs: { 4, 5, 6, 24 }
;   output 3 depends on inputs: { 4, 5, 6, 24 }
;   output 4 depends on inputs: { 15 }
;   output 5 depends on inputs: { 11 }
;   output 6 depends on inputs: { 16 }
;   output 7 depends on inputs: { 17 }
;   output 8 depends on inputs: { 0, 1, 2, 24 }
;   output 9 depends on inputs: { 0, 1, 2, 24 }
;   output 10 depends on inputs: { 0, 1, 2, 24 }
;   output 12 depends on inputs: { 12, 13, 14, 24 }
;   output 13 depends on inputs: { 12, 13, 14, 24 }
;   output 14 depends on inputs: { 12, 13, 14, 24 }
;   output 16 depends on inputs: { 8, 9, 10, 24 }
;   output 17 depends on inputs: { 8, 9, 10, 24 }
;   output 18 depends on inputs: { 8, 9, 10, 24 }
;   output 20 depends on inputs: { 20 }
;   output 21 depends on inputs: { 21 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<sTransform>" = type { %hostlayout.struct.sTransform }
%hostlayout.struct.sTransform = type { [4 x <4 x float>], [4 x <4 x float>], float, float, float, float }
%hostlayout.IView_Combined_cbView = type { %hostlayout.struct.SIView_Combined_cbView }
%hostlayout.struct.SIView_Combined_cbView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], %struct.Viewport, <3 x float>, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], i32, float, <2 x i32>, [4 x <4 x float>], [4 x <4 x float>], <3 x float> }
%struct.Viewport = type { <2 x i32>, <2 x i32> }

define void @VSMain() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = extractvalue %dx.types.CBufRet.f32 %28, 3
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = extractvalue %dx.types.CBufRet.f32 %38, 3
  %43 = shl i32 %4, 2
  %44 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2, i32 %43, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %45 = extractvalue %dx.types.ResRet.i32 %44, 0
  %46 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %45, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %47 = extractvalue %dx.types.ResRet.f32 %46, 0
  %48 = extractvalue %dx.types.ResRet.f32 %46, 1
  %49 = extractvalue %dx.types.ResRet.f32 %46, 2
  %50 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %45, i32 16, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 0
  %52 = extractvalue %dx.types.ResRet.f32 %50, 1
  %53 = extractvalue %dx.types.ResRet.f32 %50, 2
  %54 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %45, i32 32, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %55 = extractvalue %dx.types.ResRet.f32 %54, 0
  %56 = extractvalue %dx.types.ResRet.f32 %54, 1
  %57 = extractvalue %dx.types.ResRet.f32 %54, 2
  %58 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1, i32 %45, i32 48, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %59 = extractvalue %dx.types.ResRet.f32 %58, 0
  %60 = extractvalue %dx.types.ResRet.f32 %58, 1
  %61 = extractvalue %dx.types.ResRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = fsub fast float %59, %63
  %67 = fsub fast float %60, %64
  %68 = fsub fast float %61, %65
  %69 = fmul fast float %47, %17
  %70 = call float @dx.op.tertiary.f32(i32 46, float %18, float %51, float %69)  ; FMad(a,b,c)
  %71 = call float @dx.op.tertiary.f32(i32 46, float %19, float %55, float %70)  ; FMad(a,b,c)
  %72 = fadd fast float %66, %71
  %73 = fmul fast float %48, %17
  %74 = call float @dx.op.tertiary.f32(i32 46, float %18, float %52, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %19, float %56, float %74)  ; FMad(a,b,c)
  %76 = fadd fast float %75, %67
  %77 = fmul fast float %49, %17
  %78 = call float @dx.op.tertiary.f32(i32 46, float %18, float %53, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.tertiary.f32(i32 46, float %19, float %57, float %78)  ; FMad(a,b,c)
  %80 = fadd fast float %79, %68
  %81 = fmul fast float %72, %24
  %82 = call float @dx.op.tertiary.f32(i32 46, float %76, float %29, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %80, float %34, float %82)  ; FMad(a,b,c)
  %84 = fadd fast float %83, %39
  %85 = fmul fast float %72, %25
  %86 = call float @dx.op.tertiary.f32(i32 46, float %76, float %30, float %85)  ; FMad(a,b,c)
  %87 = call float @dx.op.tertiary.f32(i32 46, float %80, float %35, float %86)  ; FMad(a,b,c)
  %88 = fadd fast float %87, %40
  %89 = fmul fast float %72, %26
  %90 = call float @dx.op.tertiary.f32(i32 46, float %76, float %31, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.tertiary.f32(i32 46, float %80, float %36, float %90)  ; FMad(a,b,c)
  %92 = fadd fast float %91, %41
  %93 = fmul fast float %72, %27
  %94 = call float @dx.op.tertiary.f32(i32 46, float %76, float %32, float %93)  ; FMad(a,b,c)
  %95 = call float @dx.op.tertiary.f32(i32 46, float %80, float %37, float %94)  ; FMad(a,b,c)
  %96 = fadd fast float %95, %42
  %97 = call float @dx.op.dot3.f32(i32 55, float %20, float %21, float %22, float %20, float %21, float %22)  ; Dot3(ax,ay,az,bx,by,bz)
  %98 = call float @dx.op.unary.f32(i32 25, float %97)  ; Rsqrt(value)
  %99 = fmul fast float %98, %20
  %100 = fmul fast float %98, %21
  %101 = fmul fast float %98, %22
  %102 = fmul fast float %99, %47
  %103 = call float @dx.op.tertiary.f32(i32 46, float %100, float %51, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %101, float %55, float %103)  ; FMad(a,b,c)
  %105 = fmul fast float %99, %48
  %106 = call float @dx.op.tertiary.f32(i32 46, float %100, float %52, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %101, float %56, float %106)  ; FMad(a,b,c)
  %108 = fmul fast float %99, %49
  %109 = call float @dx.op.tertiary.f32(i32 46, float %100, float %53, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %101, float %57, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.dot3.f32(i32 55, float %104, float %107, float %110, float %104, float %107, float %110)  ; Dot3(ax,ay,az,bx,by,bz)
  %112 = call float @dx.op.unary.f32(i32 25, float %111)  ; Rsqrt(value)
  %113 = fmul fast float %112, %104
  %114 = fmul fast float %112, %107
  %115 = fmul fast float %112, %110
  %116 = call float @dx.op.dot3.f32(i32 55, float %13, float %14, float %15, float %13, float %14, float %15)  ; Dot3(ax,ay,az,bx,by,bz)
  %117 = call float @dx.op.unary.f32(i32 25, float %116)  ; Rsqrt(value)
  %118 = fmul fast float %117, %13
  %119 = fmul fast float %117, %14
  %120 = fmul fast float %117, %15
  %121 = fmul fast float %118, %47
  %122 = call float @dx.op.tertiary.f32(i32 46, float %119, float %51, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %120, float %55, float %122)  ; FMad(a,b,c)
  %124 = fmul fast float %118, %48
  %125 = call float @dx.op.tertiary.f32(i32 46, float %119, float %52, float %124)  ; FMad(a,b,c)
  %126 = call float @dx.op.tertiary.f32(i32 46, float %120, float %56, float %125)  ; FMad(a,b,c)
  %127 = fmul fast float %118, %49
  %128 = call float @dx.op.tertiary.f32(i32 46, float %119, float %53, float %127)  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float %120, float %57, float %128)  ; FMad(a,b,c)
  %130 = call float @dx.op.dot3.f32(i32 55, float %123, float %126, float %129, float %123, float %126, float %129)  ; Dot3(ax,ay,az,bx,by,bz)
  %131 = call float @dx.op.unary.f32(i32 25, float %130)  ; Rsqrt(value)
  %132 = fmul fast float %131, %123
  %133 = fmul fast float %131, %126
  %134 = fmul fast float %131, %129
  %135 = call float @dx.op.dot3.f32(i32 55, float %9, float %10, float %11, float %9, float %10, float %11)  ; Dot3(ax,ay,az,bx,by,bz)
  %136 = call float @dx.op.unary.f32(i32 25, float %135)  ; Rsqrt(value)
  %137 = fmul fast float %136, %9
  %138 = fmul fast float %136, %10
  %139 = fmul fast float %136, %11
  %140 = fmul fast float %137, %47
  %141 = call float @dx.op.tertiary.f32(i32 46, float %138, float %51, float %140)  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %139, float %55, float %141)  ; FMad(a,b,c)
  %143 = fmul fast float %137, %48
  %144 = call float @dx.op.tertiary.f32(i32 46, float %138, float %52, float %143)  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float %139, float %56, float %144)  ; FMad(a,b,c)
  %146 = fmul fast float %137, %49
  %147 = call float @dx.op.tertiary.f32(i32 46, float %138, float %53, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %139, float %57, float %147)  ; FMad(a,b,c)
  %149 = call float @dx.op.dot3.f32(i32 55, float %142, float %145, float %148, float %142, float %145, float %148)  ; Dot3(ax,ay,az,bx,by,bz)
  %150 = call float @dx.op.unary.f32(i32 25, float %149)  ; Rsqrt(value)
  %151 = fmul fast float %150, %142
  %152 = fmul fast float %150, %145
  %153 = fmul fast float %150, %148
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %113)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %114)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %115)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %84)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %88)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %92)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %96)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %151)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %152)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %153)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %132)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %133)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %134)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 5}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 5}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"hostlayout.class.StructuredBuffer<sTransform>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !8}
!8 = !{i32 1, i32 144}
!9 = !{!10}
!10 = !{i32 0, %hostlayout.IView_Combined_cbView* undef, !"", i32 0, i32 0, i32 1, i32 764, null}
!11 = !{[27 x i32] [i32 25, i32 22, i32 1792, i32 1792, i32 1792, i32 0, i32 15, i32 15, i32 15, i32 0, i32 458752, i32 458752, i32 458752, i32 32, i32 28672, i32 28672, i32 28672, i32 16, i32 64, i32 128, i32 0, i32 0, i32 1048576, i32 2097152, i32 0, i32 0, i32 489231]}
!12 = !{void ()* @VSMain, !"VSMain", !13, !4, !37}
!13 = !{!14, !28, null}
!14 = !{!15, !18, !19, !21, !23, !25, !26}
!15 = !{i32 0, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !17}
!19 = !{i32 2, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !20}
!20 = !{i32 3, i32 15}
!21 = !{i32 3, !"TANGENT", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 3, i8 0, !20}
!22 = !{i32 1}
!23 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 4, i8 0, !24}
!24 = !{i32 3, i32 3}
!25 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 5, i8 0, !24}
!26 = !{i32 6, !"SV_InstanceID", i8 5, i8 2, !16, i8 0, i32 1, i8 1, i32 6, i8 0, !27}
!27 = !{i32 3, i32 1}
!28 = !{!29, !30, !31, !32, !33, !34, !35, !36}
!29 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !20}
!30 = !{i32 1, !"SEM_BINORMAL1_SIGN", i8 9, i8 0, !16, i8 2, i32 1, i8 1, i32 1, i8 0, !27}
!31 = !{i32 2, !"SEM_BINORMAL_SIGN", i8 9, i8 0, !16, i8 2, i32 1, i8 1, i32 1, i8 1, !27}
!32 = !{i32 3, !"SEM_NORMAL_WS", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 2, i8 0, !17}
!33 = !{i32 4, !"SEM_TANGENT1_WS", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 3, i8 0, !17}
!34 = !{i32 5, !"SEM_TANGENT_WS", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 4, i8 0, !17}
!35 = !{i32 6, !"SEM_TEXCOORD_UV", i8 9, i8 0, !16, i8 2, i32 1, i8 2, i32 1, i8 2, !24}
!36 = !{i32 7, !"SEM_TEXCOORD_UV", i8 9, i8 0, !22, i8 2, i32 1, i8 2, i32 5, i8 0, !24}
!37 = !{i32 0, i64 272}
 